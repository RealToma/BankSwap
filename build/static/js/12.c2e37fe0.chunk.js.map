{"version":3,"sources":["views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/ActivityHistory/utils/sortActivity.tsx","views/Nft/market/ActivityHistory/ClearAllButton.tsx","views/Nft/market/ActivityHistory/ActivityFilter.tsx","views/Nft/market/ActivityHistory/ActivityFilters.tsx","views/Nft/market/ActivityHistory/ActivityHistory.tsx","views/Nft/market/Collection/Activity/index.tsx","views/Nft/market/components/StatBox.tsx","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx"],"names":["PageButtons","styled","div","Arrow","theme","colors","primary","Avatar","img","mediaQueries","md","StyledFlex","Flex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","width","height","mr","ProfileAvatarFetchStatus","FETCHED","image","thumbnail","src","to","nftsBaseUrl","display","lineHeight","truncateHash","BackLink","RouterLink","TopBar","t","useTranslation","alignItems","justifyContent","mb","color","SearchBar","LowestPriceStatBoxItem","collectionAddress","props","useState","lowestPrice","setLowestPrice","useEffect","a","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","StatBox","title","symbol","stat","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","avatar","useLocation","pathname","hash","volume","parseFloat","itemsConfig","label","href","MarketPageHeader","BannerHeader","bannerImage","large","AvatarImage","MarketPageTitle","name","description","formatNumber","Number","address","Container","BaseSubMenu","items","activeItem","mt","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","SELL","RoundedImage","Image","radii","default","MobileModal","activity","bnbBusdPrice","localeTimestamp","onDismiss","isUserActivity","chainId","useActiveWeb3React","useTheme","priceAsFloat","price","priceInUsd","multiplyPriceByAmount","headerBackground","gradients","cardHeader","flexDirection","maxWidth","fontSize","textAlign","collectionName","bold","p","otherParty","seller","buyer","pt","as","Link","external","getBscScanLink","tx","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","toLowerCase","pancakeBunniesAddress","tokenId","attributes","find","attribute","traitType","value","onClick","event","stopPropagation","alt","sortActivity","askOrders","transactions","allActivity","map","askOrderHistory","orderType","AskOrderType","getAskOrderEvent","askPrice","id","transactionHistory","length","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ClearAllButton","dispatch","useAppDispatch","variant","scale","removeAllActivityFilters","TriggerButton","Button","hasItem","CloseButton","IconButton","eventName","eventType","ActivityFilter","nftActivityFilters","useGetNftActivityFilters","isEventSelected","typeFilters","some","nftActivityFilter","addActivityTypeFilters","field","removeActivityTypeFilters","sm","ScrollableFlexContainer","ActivityFilters","textTransform","isEmpty","ActivityHistory","currentPage","maxPage","paginationData","setPaginationData","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","isLoading","setIsLoading","isInitialized","setIsInitialized","queryPage","setQueryPage","useLastUpdated","lastUpdated","refresh","setLastUpdated","useBNBBusdPrice","nftActivityFiltersString","JSON","stringify","fetchCollectionActivity","nftActivityFiltersParsed","parse","getCollectionActivity","collectionActivity","Math","ceil","console","error","isAddress","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","getNftsFromDifferentCollectionsApi","nfts","slice","py","px","style","gap","padding","disabled","nftMeta","metaNft","borderTop","cardBorder","prevState","page","NoNftsImage","Activity","useGetCollection","StatBoxItem","mx","fontWeight","invertedContrast","card","ResultStatus","SubMenu","input","inputSecondary","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","state","setState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","onChange","evt","newValue","target","zIndex","paddingRight","top","right","background","isDark","attrs","borderColor","history","useHistory","push","children","gridGap","gridTemplateColumns","SubMenuItems","StyledBannerImage","bannerAlt","pb","BannerImage","bottom","left"],"mappings":"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","file":"static/js/12.c2e37fe0.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { ProfileAvatarFetchStatus } from 'state/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\r\n            <Skeleton />\r\n          ) : (\r\n            <Text lineHeight=\"1.25\">{profileName}</Text>\r\n          )}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import React from 'react'\r\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport SearchBar from '../components/SearchBar'\r\n\r\nconst BackLink = styled(RouterLink)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TopBar: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n      <BackLink to={`${nftsBaseUrl}/collections`}>\r\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\r\n        {t('All Collections')}\r\n      </BackLink>\r\n      <Box>\r\n        <SearchBar />\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\r\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\r\n\r\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\r\n      setLowestPrice(lowestCollectionPrice)\r\n    }\r\n\r\n    fetchLowestPrice()\r\n  }, [collectionAddress, setLowestPrice])\r\n\r\n  const formattedLowestPrice =\r\n    lowestPrice === null\r\n      ? null\r\n      : lowestPrice.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })\r\n\r\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\r\n}\r\n\r\nexport default LowestPriceStatBoxItem\r\n","import React from 'react'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport MarketPageTitle from '../components/MarketPageTitle'\r\nimport StatBox, { StatBoxItem } from '../components/StatBox'\r\nimport BannerHeader from '../components/BannerHeader'\r\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\r\nimport BaseSubMenu from '../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../constants'\r\nimport TopBar from './TopBar'\r\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\r\n\r\ninterface HeaderProps {\r\n  collection: Collection\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\r\n  const { t } = useTranslation()\r\n  const { pathname, hash } = useLocation()\r\n\r\n  const volume = totalVolumeBNB\r\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '0'\r\n\r\n  const itemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\r\n    },\r\n    {\r\n      label: t('Traits'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\r\n    },\r\n    {\r\n      label: t('Activity'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#activity`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader>\r\n        <TopBar />\r\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\r\n        <MarketPageTitle\r\n          title={collection.name}\r\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\r\n        >\r\n          <StatBox>\r\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\r\n            <StatBoxItem\r\n              title={t('Items listed')}\r\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\r\n            />\r\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\r\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\r\n          </StatBox>\r\n        </MarketPageTitle>\r\n      </MarketPageHeader>\r\n      <Container>\r\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\r\n\r\nconst GridItem = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nconst LoadingRow: React.FC = () => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <tr>\r\n      <Td>\r\n        <GridItem>\r\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\r\n        </GridItem>\r\n      </Td>\r\n      <Td>\r\n        <GridItem justifyContent=\"flex-end\">\r\n          <Skeleton height={[66, null, 24]} width={64} />\r\n        </GridItem>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={42} width={64} />\r\n            </GridItem>\r\n          </Td>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={48} width={124} />\r\n            </GridItem>\r\n          </Td>\r\n        </>\r\n      )}\r\n      <Td>\r\n        <GridItem justifyContent=\"center\">\r\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\r\n        </GridItem>\r\n      </Td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nexport default TableLoader\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\r\n\r\ninterface ActivityEventTextProps extends TextProps {\r\n  marketEvent: MarketEvent\r\n}\r\n\r\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const events = {\r\n    [MarketEvent.NEW]: {\r\n      text: t('Listed'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.CANCEL]: {\r\n      text: t('Delisted'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.MODIFY]: {\r\n      text: t('Modified'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.BUY]: {\r\n      text: t('Bought'),\r\n      color: 'success',\r\n    },\r\n    [MarketEvent.SELL]: {\r\n      text: t('Sold'),\r\n      color: 'failure',\r\n    },\r\n  }\r\n\r\n  return (\r\n    <Text {...props} color={events[marketEvent].color}>\r\n      {events[marketEvent].text}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default ActivityEventText\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { LightGreyCard } from 'components/Card'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport ActivityEventText from './ActivityEventText'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface MobileModalProps extends InjectedModalProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  localeTimestamp: string\r\n  isUserActivity?: boolean\r\n}\r\n\r\nconst MobileModal: React.FC<MobileModalProps> = ({\r\n  nft,\r\n  activity,\r\n  bnbBusdPrice,\r\n  localeTimestamp,\r\n  onDismiss,\r\n  isUserActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\r\n\r\n  return (\r\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            <Text bold>{nft.name}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <LightGreyCard p=\"16px\">\r\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\r\n            {priceAsFloat ? (\r\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\r\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n                <Text mr=\"4px\" bold>\r\n                  {priceAsFloat}\r\n                </Text>\r\n                <Text color=\"textSubtle\">\r\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })})`}\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </Flex>\r\n          {isUserActivity ? (\r\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('From/To')}\r\n              </Text>\r\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\r\n            </Flex>\r\n          ) : (\r\n            <>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('From')}\r\n                </Text>\r\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\r\n              </Flex>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('To')}\r\n                </Text>\r\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text fontSize=\"14px\" color=\"textSubtle\">\r\n              {t('Date')}\r\n            </Text>\r\n            <Text>{localeTimestamp}</Text>\r\n          </Flex>\r\n        </LightGreyCard>\r\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\r\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            {t('View on BscScan')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MobileModal\r\n","import React from 'react'\r\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n      {price ? (\r\n        <>\r\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\r\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n            <Text maxWidth=\"80px\" bold>\r\n              {price.toLocaleString(undefined, {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 5,\r\n              })}\r\n            </Text>\r\n          </Flex>\r\n          {priceInUsd ? (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2,\r\n              })})`}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"18px\" width=\"42px\" />\r\n          )}\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ActivityPrice\r\n","import React from 'react'\r\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport MobileModal from './MobileModal'\r\nimport ActivityPrice from './ActivityPrice'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface ActivityRowProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  isUserActivity?: boolean\r\n  isNftActivity?: boolean\r\n}\r\n\r\nconst ActivityRow: React.FC<ActivityRowProps> = ({\r\n  activity,\r\n  bnbBusdPrice,\r\n  nft,\r\n  isUserActivity = false,\r\n  isNftActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\r\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  })\r\n  const [onPresentMobileModal] = useModal(\r\n    <MobileModal\r\n      nft={nft}\r\n      activity={activity}\r\n      localeTimestamp={localeTimestamp}\r\n      bnbBusdPrice={bnbBusdPrice}\r\n      isUserActivity={isUserActivity}\r\n    />,\r\n  )\r\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\r\n  const tokenId =\r\n    nft && isPBCollection\r\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\r\n      : nft\r\n      ? nft.tokenId\r\n      : null\r\n\r\n  return (\r\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\r\n      {!isNftActivity ? (\r\n        <Td\r\n          {...((isXs || isSm) && {\r\n            onClick: (event) => {\r\n              event.stopPropagation()\r\n            },\r\n          })}\r\n        >\r\n          <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\r\n              <RoundedImage\r\n                src={nft?.image.thumbnail}\r\n                alt={nft?.name}\r\n                width={64}\r\n                height={64}\r\n                mr={[0, null, '16px']}\r\n                mb={['8px', null, 0]}\r\n              />\r\n              <Flex flexDirection=\"column\">\r\n                <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\r\n                  {nft?.collectionName}\r\n                </Text>\r\n                <Text textAlign={['center', null, 'left']} bold>\r\n                  {nft?.name}\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          </RouterLink>\r\n        </Td>\r\n      ) : null}\r\n      <Td>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <ActivityEventText marketEvent={activity.marketEvent} />\r\n        </Flex>\r\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\r\n          </Td>\r\n          {isUserActivity ? (\r\n            <Td>\r\n              <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\r\n              </Flex>\r\n            </Td>\r\n          ) : (\r\n            <>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      <Td>\r\n        <Flex justifyContent=\"center\">\r\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\r\n            {localeTimestamp}\r\n          </Text>\r\n        </Flex>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <Td>\r\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Td>\r\n      )}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ActivityRow\r\n","import { ethers } from 'ethers'\r\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\r\n\r\nexport const sortActivity = ({\r\n  askOrders = [],\r\n  transactions = [],\r\n}: {\r\n  askOrders?: AskOrder[]\r\n  transactions?: Transaction[]\r\n}): Activity[] => {\r\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\r\n    switch (orderType) {\r\n      case AskOrderType.CANCEL:\r\n        return MarketEvent.CANCEL\r\n      case AskOrderType.MODIFY:\r\n        return MarketEvent.MODIFY\r\n      case AskOrderType.NEW:\r\n        return MarketEvent.NEW\r\n      default:\r\n        return MarketEvent.MODIFY\r\n    }\r\n  }\r\n\r\n  const transformTransactions = (transactionsHistory: Transaction[]): Activity[] => {\r\n    const transformedTransactions = transactionsHistory.map((transactionHistory) => {\r\n      const marketEvent = MarketEvent.SELL\r\n      const { timestamp, nft } = transactionHistory\r\n      const price = transactionHistory.askPrice\r\n      const tx = transactionHistory.id\r\n      const buyer = transactionHistory.buyer.id\r\n      const seller = transactionHistory.seller.id\r\n      return { marketEvent, price, timestamp, nft, tx, buyer, seller }\r\n    })\r\n\r\n    return transformedTransactions\r\n  }\r\n\r\n  const transformAskOrders = (askOrdersHistory: AskOrder[]): Activity[] => {\r\n    const transformedAskOrders = askOrdersHistory.map((askOrderHistory) => {\r\n      const marketEvent = getAskOrderEvent(askOrderHistory.orderType)\r\n      const price = askOrderHistory.askPrice\r\n      const { timestamp, nft } = askOrderHistory\r\n      const tx = askOrderHistory.id\r\n      const seller = askOrderHistory?.seller.id\r\n      return { marketEvent, price, timestamp, nft, tx, seller }\r\n    })\r\n\r\n    return transformedAskOrders\r\n  }\r\n\r\n  const allActivity = [...transformAskOrders(askOrders), ...transformTransactions(transactions)]\r\n  if (allActivity.length > 0) {\r\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\r\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\r\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\r\n      return timestamp2.sub(timestamp1).toNumber()\r\n    })\r\n\r\n    return sortedByMostRecent\r\n  }\r\n  return []\r\n}\r\n","import React from 'react'\r\nimport { Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeAllActivityFilters } from 'state/nftMarket/reducer'\r\n\r\ninterface ClearAllButtonProps extends ButtonProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst ClearAllButton: React.FC<ClearAllButtonProps> = ({ collectionAddress, ...props }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n\r\n  const clearAll = () => {\r\n    dispatch(removeAllActivityFilters(collectionAddress))\r\n  }\r\n\r\n  return (\r\n    <Button key=\"clear-all\" variant=\"text\" scale=\"sm\" onClick={clearAll} {...props}>\r\n      {t('Clear')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ClearAllButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Button, Flex, IconButton, CloseIcon } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { addActivityTypeFilters, removeActivityTypeFilters } from 'state/nftMarket/reducer'\r\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../../../state/nftMarket/types'\r\n\r\ninterface ActivityFilterProps {\r\n  eventType: MarketEvent\r\n  collectionAddress: string\r\n}\r\n\r\nconst TriggerButton = styled(Button)<{ hasItem: boolean }>`\r\n  ${({ hasItem }) =>\r\n    hasItem &&\r\n    `  \r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n    padding-right: 8px;\r\n  `}\r\n`\r\n\r\nconst CloseButton = styled(IconButton)`\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n`\r\n\r\nconst eventName = (t: ContextApi['t'], eventType: string) => {\r\n  switch (eventType) {\r\n    case MarketEvent.CANCEL:\r\n      return t('Delisted')\r\n    case MarketEvent.MODIFY:\r\n      return t('Modified')\r\n    case MarketEvent.NEW:\r\n      return t('Listed')\r\n    case MarketEvent.SELL:\r\n      return t('Sold')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nexport const ActivityFilter: React.FC<ActivityFilterProps> = ({ eventType, collectionAddress }) => {\r\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n\r\n  const isEventSelected = nftActivityFilters.typeFilters.some((nftActivityFilter) => nftActivityFilter === eventType)\r\n\r\n  const handleMenuClick = () => {\r\n    if (!isEventSelected) {\r\n      dispatch(addActivityTypeFilters({ collection: collectionAddress, field: eventType }))\r\n    }\r\n  }\r\n\r\n  const handleClearItem = () => {\r\n    dispatch(removeActivityTypeFilters({ collection: collectionAddress, field: eventType }))\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" mr=\"4px\" mb=\"4px\">\r\n      <Box>\r\n        <TriggerButton\r\n          onClick={handleMenuClick}\r\n          variant={isEventSelected ? 'subtle' : 'light'}\r\n          scale=\"sm\"\r\n          hasItem={isEventSelected}\r\n        >\r\n          {eventName(t, eventType)}\r\n        </TriggerButton>\r\n      </Box>\r\n      {isEventSelected && (\r\n        <CloseButton variant={isEventSelected ? 'subtle' : 'light'} scale=\"sm\" onClick={handleClearItem}>\r\n          <CloseIcon color=\"currentColor\" width=\"18px\" />\r\n        </CloseButton>\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\r\nimport { Collection, MarketEvent } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ClearAllButton from './ClearAllButton'\r\nimport { ActivityFilter } from './ActivityFilter'\r\n\r\nexport const Container = styled(Flex)`\r\n  gap: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    align-items: center;\r\n    flex-grow: 2;\r\n  }\r\n`\r\n\r\nconst ScrollableFlexContainer = styled(Flex)`\r\n  align-items: center;\r\n  flex: 1;\r\n  flex-wrap: nowrap;\r\n  overflow-x: auto;\r\n  -webkit-overflow-scrolling: touch;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    flex-wrap: wrap;\r\n    overflow-x: revert;\r\n  }\r\n`\r\n\r\ninterface FiltersProps {\r\n  collection: Collection\r\n}\r\n\r\nconst ActivityFilters: React.FC<FiltersProps> = ({ collection }) => {\r\n  const { address } = collection || { address: '' }\r\n  const { t } = useTranslation()\r\n\r\n  const nftActivityFilters = useGetNftActivityFilters(address)\r\n\r\n  return (\r\n    <Container justifyContent=\"space-between\" flexDirection={['column', 'column', 'row']}>\r\n      <Text textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" bold>\r\n        {t('Filter by')}\r\n      </Text>\r\n      <ScrollableFlexContainer>\r\n        {[MarketEvent.NEW, MarketEvent.CANCEL, MarketEvent.MODIFY, MarketEvent.SELL].map((eventType) => {\r\n          return <ActivityFilter key={eventType} eventType={eventType} collectionAddress={address} />\r\n        })}\r\n      </ScrollableFlexContainer>\r\n      {!isEmpty(nftActivityFilters.typeFilters) ? <ClearAllButton collectionAddress={address} /> : null}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActivityFilters\r\n","import React, { useEffect, useState } from 'react'\r\nimport { uniqBy } from 'lodash'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Table,\r\n  Text,\r\n  Th,\r\n  useMatchBreakpoints,\r\n} from '@pancakeswap/uikit'\r\nimport { getCollectionActivity, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\r\nimport Container from 'components/Layout/Container'\r\nimport TableLoader from 'components/TableLoader'\r\nimport { Activity, Collection, NftToken, TokenIdWithCollectionAddress } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { useGetNftActivityFilters } from 'state/nftMarket/hooks'\r\nimport { Arrow, PageButtons } from '../components/PaginationButtons'\r\nimport NoNftsImage from '../components/Activity/NoNftsImage'\r\nimport ActivityFilters from './ActivityFilters'\r\nimport ActivityRow from '../components/Activity/ActivityRow'\r\nimport { sortActivity } from './utils/sortActivity'\r\n\r\nconst MAX_PER_PAGE = 8\r\n\r\nconst MAX_PER_QUERY = 100\r\n\r\ninterface ActivityHistoryProps {\r\n  collection?: Collection\r\n}\r\n\r\nconst ActivityHistory: React.FC<ActivityHistoryProps> = ({ collection }) => {\r\n  const dispatch = useAppDispatch()\r\n  const { address: collectionAddress } = collection || { address: '' }\r\n  const nftActivityFilters = useGetNftActivityFilters(collectionAddress)\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const [paginationData, setPaginationData] = useState<{\r\n    activity: Activity[]\r\n    currentPage: number\r\n    maxPage: number\r\n  }>({\r\n    activity: [],\r\n    currentPage: 1,\r\n    maxPage: 1,\r\n  })\r\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\r\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [isInitialized, setIsInitialized] = useState(false)\r\n  const [queryPage, setQueryPage] = useState(1)\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  const nftActivityFiltersString = JSON.stringify(nftActivityFilters)\r\n\r\n  useEffect(() => {\r\n    const fetchCollectionActivity = async () => {\r\n      try {\r\n        setIsLoading(true)\r\n        const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\r\n        const collectionActivity = await getCollectionActivity(\r\n          collectionAddress.toLowerCase(),\r\n          nftActivityFiltersParsed,\r\n          MAX_PER_QUERY,\r\n        )\r\n        const activity = sortActivity(collectionActivity)\r\n        setPaginationData({\r\n          activity,\r\n          currentPage: 1,\r\n          maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\r\n        })\r\n        setIsLoading(false)\r\n        setIsInitialized(true)\r\n      } catch (error) {\r\n        console.error('Failed to fetch collection activity', error)\r\n      }\r\n    }\r\n\r\n    if ((collectionAddress && isAddress(collectionAddress)) || collectionAddress === '') {\r\n      fetchCollectionActivity()\r\n    }\r\n  }, [dispatch, collectionAddress, nftActivityFiltersString, lastUpdated])\r\n\r\n  useEffect(() => {\r\n    const fetchActivityNftMetadata = async () => {\r\n      const activityNftTokenIds = uniqBy(\r\n        activitiesSlice.map((activity): TokenIdWithCollectionAddress => {\r\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\r\n        }),\r\n        'tokenId',\r\n      )\r\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\r\n      setNftMetadata(nfts)\r\n    }\r\n\r\n    if (activitiesSlice.length > 0) {\r\n      fetchActivityNftMetadata()\r\n    }\r\n  }, [activitiesSlice])\r\n\r\n  useEffect(() => {\r\n    const slice = paginationData.activity.slice(\r\n      MAX_PER_PAGE * (paginationData.currentPage - 1),\r\n      MAX_PER_PAGE * paginationData.currentPage,\r\n    )\r\n    setActivitiesSlice(slice)\r\n  }, [paginationData])\r\n\r\n  return (\r\n    <Box py=\"32px\">\r\n      <Container px={[0, null, '24px']}>\r\n        <Flex\r\n          style={{ gap: '16px', padding: '0 16px' }}\r\n          alignItems={[null, null, 'center']}\r\n          flexDirection={['column', 'column', 'row']}\r\n        >\r\n          <ActivityFilters collection={collection} />\r\n          <Button\r\n            scale=\"sm\"\r\n            disabled={isLoading}\r\n            onClick={() => {\r\n              refresh()\r\n            }}\r\n          >\r\n            {t('Refresh')}\r\n          </Button>\r\n        </Flex>\r\n      </Container>\r\n      <Container>\r\n        {paginationData.activity.length === 0 &&\r\n        nftMetadata.length === 0 &&\r\n        activitiesSlice.length === 0 &&\r\n        !isLoading ? (\r\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n            <NoNftsImage />\r\n            <Text pt=\"8px\" bold>\r\n              {t('No NFT market history found')}\r\n            </Text>\r\n          </Flex>\r\n        ) : (\r\n          <>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\r\n                  <Th textAlign=\"right\"> {t('Event')}</Th>\r\n                  {isXs || isSm ? null : (\r\n                    <>\r\n                      <Th textAlign=\"right\"> {t('Price')}</Th>\r\n                      <Th textAlign=\"center\"> {t('From')}</Th>\r\n                      <Th textAlign=\"center\"> {t('To')}</Th>\r\n                    </>\r\n                  )}\r\n                  <Th textAlign=\"center\"> {t('Date')}</Th>\r\n                  {isXs || isSm ? null : <Th />}\r\n                </tr>\r\n              </thead>\r\n\r\n              <tbody>\r\n                {!isInitialized ? (\r\n                  <TableLoader />\r\n                ) : (\r\n                  activitiesSlice.map((activity) => {\r\n                    const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\r\n                    return (\r\n                      <ActivityRow\r\n                        key={`${activity.marketEvent}#${activity.nft.tokenId}#${activity.timestamp}#${activity.tx}`}\r\n                        activity={activity}\r\n                        nft={nftMeta}\r\n                        bnbBusdPrice={bnbBusdPrice}\r\n                      />\r\n                    )\r\n                  })\r\n                )}\r\n              </tbody>\r\n            </Table>\r\n            <Flex\r\n              borderTop={`1px ${theme.colors.cardBorder} solid`}\r\n              pt=\"24px\"\r\n              flexDirection=\"column\"\r\n              justifyContent=\"space-between\"\r\n              height=\"100%\"\r\n            >\r\n              <PageButtons>\r\n                <Arrow\r\n                  onClick={() => {\r\n                    if (paginationData.currentPage !== 1) {\r\n                      setPaginationData((prevState) => ({\r\n                        ...prevState,\r\n                        currentPage: prevState.currentPage - 1,\r\n                      }))\r\n                    }\r\n                  }}\r\n                >\r\n                  <ArrowBackIcon color={paginationData.currentPage === 1 ? 'textDisabled' : 'primary'} />\r\n                </Arrow>\r\n                <Text>\r\n                  {t('Page %page% of %maxPage%', {\r\n                    page: paginationData.currentPage,\r\n                    maxPage: paginationData.maxPage,\r\n                  })}\r\n                </Text>\r\n                <Arrow\r\n                  onClick={async () => {\r\n                    if (paginationData.currentPage !== paginationData.maxPage) {\r\n                      setPaginationData((prevState) => ({\r\n                        ...prevState,\r\n                        currentPage: prevState.currentPage + 1,\r\n                      }))\r\n\r\n                      if (\r\n                        paginationData.maxPage - paginationData.currentPage === 1 &&\r\n                        paginationData.activity.length === MAX_PER_QUERY * queryPage\r\n                      ) {\r\n                        try {\r\n                          setIsLoading(true)\r\n                          const nftActivityFiltersParsed = JSON.parse(nftActivityFiltersString)\r\n                          const collectionActivity = await getCollectionActivity(\r\n                            collectionAddress.toLowerCase(),\r\n                            nftActivityFiltersParsed,\r\n                            MAX_PER_QUERY * (queryPage + 1),\r\n                          )\r\n                          const activity = sortActivity(collectionActivity)\r\n                          setPaginationData((prevState) => {\r\n                            return {\r\n                              ...prevState,\r\n                              activity,\r\n                              maxPage: Math.ceil(activity.length / MAX_PER_PAGE) || 1,\r\n                            }\r\n                          })\r\n                          setIsLoading(false)\r\n                          setQueryPage((prevState) => prevState + 1)\r\n                        } catch (error) {\r\n                          console.error('Failed to fetch collection activity', error)\r\n                        }\r\n                      }\r\n                    }\r\n                  }}\r\n                >\r\n                  <ArrowForwardIcon\r\n                    color={paginationData.currentPage === paginationData.maxPage ? 'textDisabled' : 'primary'}\r\n                  />\r\n                </Arrow>\r\n              </PageButtons>\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ActivityHistory\r\n","import React from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport Header from '../Header'\r\nimport ActivityHistory from '../../ActivityHistory/ActivityHistory'\r\n\r\nconst Activity = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const collection = useGetCollection(collectionAddress)\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      <ActivityHistory collection={collection} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Activity\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n","import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst SearchBar: React.FC = (props) => {\r\n  const history = useHistory()\r\n\r\n  const handleAddressClick = (value: string) => {\r\n    history.push(`${nftsBaseUrl}/profile/${value}`)\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n","import styled from 'styled-components'\r\n\r\nconst NoNftsImage = styled.div`\r\n  background: url('/images/nfts/no-profile-md.png');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default NoNftsImage\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n"],"sourceRoot":""}