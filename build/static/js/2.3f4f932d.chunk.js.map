{"version":3,"sources":["views/Nft/market/components/PaginationButtons.tsx","views/Nft/market/components/ProfileCell.tsx","views/Nft/market/Profile/components/EditProfileModal/reducer.ts","views/Nft/market/Profile/hooks/useGetProfileCosts.ts","views/Nft/market/Profile/components/EditProfileModal/StartView.tsx","views/Nft/market/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Nft/market/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Nft/market/Profile/components/EditProfileModal/index.tsx","components/ProfileAvatarWithTeam.tsx","components/TableLoader.tsx","views/Nft/market/components/Activity/ActivityEventText.tsx","views/Nft/market/components/Activity/MobileModal.tsx","views/Nft/market/components/Activity/ActivityPrice.tsx","views/Nft/market/components/Activity/ActivityRow.tsx","views/Nft/market/components/ProfileNftModal.tsx","views/Nft/market/components/BuySellModals/shared/ApproveAndConfirmStage.tsx","views/Nft/market/components/BuySellModals/shared/TransactionConfirmed.tsx","views/Nft/market/components/BuySellModals/shared/ConfirmStage.tsx","hooks/useApproveConfirmTransaction.ts","components/ApproveConfirmButtons.tsx","views/Nft/market/components/BuySellModals/shared/styles.tsx","views/Nft/market/components/Activity/NoNftsImage.tsx","views/Nft/market/components/BuySellModals/SellModal/types.ts","views/Nft/market/components/BuySellModals/SellModal/SellStage.tsx","views/Nft/market/components/BuySellModals/SellModal/styles.tsx","views/Nft/market/components/BuySellModals/SellModal/SetPriceStage.tsx","views/Nft/market/components/BuySellModals/SellModal/EditStage.tsx","views/Nft/market/components/BuySellModals/SellModal/RemoveStage.tsx","views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx","views/Nft/market/components/BuySellModals/SellModal/index.tsx","views/Nft/market/Profile/hooks/useFetchUserNfts.tsx","views/ProfileCreation/SelectionCard.tsx"],"names":["PageButtons","styled","div","Arrow","theme","colors","primary","Avatar","img","mediaQueries","md","StyledFlex","Flex","ProfileCell","accountAddress","useGetProfileAvatar","username","profileNft","nft","usernameFetchStatus","avatarFetchStatus","profileName","sellerProfilePicComponent","width","height","mr","ProfileAvatarFetchStatus","FETCHED","image","thumbnail","src","to","nftsBaseUrl","display","lineHeight","truncateHash","Views","reducer","state","action","type","currentView","view","previousView","useEditProfile","useReducer","START","dispatch","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","t","useTranslation","useState","isLoading","setIsLoading","numberCakeToReactivate","ethers","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","toastError","useToast","useEffect","a","calls","map","method","address","getPancakeProfileAddress","name","multicallv2","profileABI","fetchCosts","DangerOutline","Button","attrs","variant","failure","AvatarWrapper","sm","StartPage","onDismiss","account","useWeb3React","cakeContract","useCake","profile","useProfile","useGetCakeBalance","cakeBalance","balance","fetchStatus","isProfileCostsLoading","needsApproval","setNeedsApproval","minimumCakeRequired","isActive","hasMinimumCakeRequired","FetchStatus","SUCCESS","gte","allowance","response","lt","checkApprovalStatus","alignItems","justifyContent","flexDirection","ProfileAvatarWithTeam","style","as","color","minimum","formatBigNumber","mb","onClick","disabled","PauseProfilePage","isAcknowledged","setIsAcknowledged","isConfirming","setIsConfirming","pancakeProfileContract","useProfileContract","callWithGasPrice","useCallWithGasPrice","toastSuccess","useAppDispatch","handleDeactivateProfile","tx","wait","receipt","status","fetchProfile","Toast","txHash","transactionHash","cost","htmlFor","cursor","marginBottom","id","checked","onChange","scale","ml","endIcon","spin","ChangeProfilePicPage","tokenId","collectionAddress","selectedNft","setSelectedNft","nfts","useUserNfts","profileContract","library","nftsInWallet","filter","location","NftLocation","WALLET","useApproveConfirmTransaction","onApprove","contract","getErc721Contract","getSigner","onConfirm","onSuccess","isApproving","isApproved","isConfirmed","handleApprove","handleConfirm","maxHeight","overflowY","walletNft","SelectionCard","value","isChecked","bold","length","ApproveConfirmButtons","isApproveDisabled","isConfirmDisabled","mt","ApproveCakePage","setIsApproving","approve","mul","toString","viewTitle","EditProfileModal","isStartView","handleBack","title","onBack","hideCloseButton","maxWidth","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","TeamAvatar","card","background","bg","AvatarInactive","NoProfileAvatarIcon","team","images","alt","GridItem","LoadingRow","useMatchBreakpoints","isXs","isSm","TableLoader","ActivityEventText","marketEvent","props","events","MarketEvent","NEW","text","CANCEL","MODIFY","BUY","SELL","RoundedImage","Image","radii","default","MobileModal","activity","bnbBusdPrice","localeTimestamp","isUserActivity","chainId","useActiveWeb3React","useTheme","priceAsFloat","parseFloat","price","priceInUsd","multiplyPriceByAmount","headerBackground","gradients","cardHeader","fontSize","textAlign","collectionName","p","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","otherParty","seller","buyer","pt","Link","external","href","getBscScanLink","ActivityPrice","justifySelf","ActivityRow","isNftActivity","timestampAsMs","timestamp","Date","year","month","day","hour","minute","useModal","onPresentMobileModal","isPBCollection","toLowerCase","pancakeBunniesAddress","attributes","find","attribute","traitType","event","stopPropagation","StyledModal","Modal","TextWrapper","dropdown","ProfileNftModal","onEditProfileModal","itemPageUrlId","flex","gridTemplateColumns","px","small","getBscScanLinkForNft","py","ApproveAndConfirmStage","success","size","TransactionConfirmed","pb","ConfirmStage","initialState","approvalState","confirmState","actions","onRequiresApproval","noop","onApproveSuccess","handlePreApprove","useRef","current","then","result","hasApproveFailed","hasConfirmFailed","logError","params","ButtonArrangement","StyledApproveConfirmButtonRow","UIKitButton","iconAttrs","ChevronRight","ChevronRightIcon","ChevronBottom","ChevronDownIcon","spinnerIcon","buttonArrangement","ROW","confirmLabel","confirmId","confirmButtonText","Divider","cardBorder","HorizontalDivider","StepIndicator","secondary","textDisabled","NoNftsImage","SellingStage","SellStage","nftToSell","lowestPrice","continueToNextStage","continueToTransferStage","hasProfile","stagesWithBackButton","SET_PRICE","ADJUST_PRICE","APPROVE_AND_CONFIRM_SELL","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","stage","includes","textSubtle","GreyedOutContainer","Box","RightAlignedInput","Input","BnbAmountCell","bnbAmount","useBNBBusdPrice","usdAmount","FeeAmountCell","creatorFee","tradingFee","totalFee","feeAmount","SetPriceStage","currentPrice","setPrice","inputRef","adjustedPriceIsTheSame","priceIsValid","Number","isNaN","useGetCollection","creatorFeeAsNumber","tradingFeeAsNumber","bnbPrice","priceIsOutOfRange","useTooltip","percentage","placement","tooltip","tooltipVisible","targetRef","focus","textTransform","inputMode","ref","isWarning","e","target","minPrice","maxPrice","alignSelf","EditStage","continueToAdjustPriceStage","continueToRemoveFromMarketStage","marketData","currentAskPrice","RemoveStage","TransferStage","transferAddress","setTransferAddress","isInvalidTransferAddress","transferAddressEqualsConnectedAddress","placeholder","modalTitles","EDIT","TX_CONFIRMED","getToastText","SellModal","setStage","confirmedTxHash","setConfirmedTxHash","collectionContract","useErc721CollectionContract","nftMarketContract","useNftMarketContract","isAddress","useGetLowestPriceFromNft","dispatchSuccessAction","updateUserNft","removeUserNft","FORSALE","isApprovedForAll","approvedForContract","methodName","askPrice","parseUnits","showBackButton","useFetchUserNfts","isProfileInitialized","isInitialized","isProfileLoading","userNftsInitializationState","collections","useGetCollections","hasProfileNft","profileNftTokenId","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","nftLocation","PROFILE","previousProfileNftTokenId","usePreviousValue","shouldFetch","UserNftInitializationState","UNINITIALIZED","hasAccountSwitched","isEmpty","fetchUserNfts","Label","label","isDisabled","Body","Children","StyledBackgroundImage","children","isSuccess"],"mappings":"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","file":"static/js/2.3f4f932d.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const PageButtons = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 16px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport const Arrow = styled.div`\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  padding: 0 20px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, BunnyPlaceholderIcon, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport { ProfileAvatarFetchStatus } from 'state/types'\r\nimport { Link } from 'react-router-dom'\r\nimport { nftsBaseUrl } from '../constants'\r\n\r\nconst Avatar = styled.img`\r\n  margin-right: 4px;\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    margin-right: 12px;\r\n  }\r\n`\r\n\r\nconst StyledFlex = styled(Flex)`\r\n  align-items: center;\r\n  transition: opacity 200ms ease-in;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nconst ProfileCell: React.FC<{ accountAddress: string }> = ({ accountAddress }) => {\r\n  const { username, nft: profileNft, usernameFetchStatus, avatarFetchStatus } = useGetProfileAvatar(accountAddress)\r\n  const profileName = username || '-'\r\n\r\n  let sellerProfilePicComponent = <Skeleton width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n  if (avatarFetchStatus === ProfileAvatarFetchStatus.FETCHED) {\r\n    if (profileNft?.image?.thumbnail) {\r\n      sellerProfilePicComponent = <Avatar src={profileNft?.image?.thumbnail} />\r\n    } else {\r\n      sellerProfilePicComponent = <BunnyPlaceholderIcon width=\"32px\" height=\"32px\" mr={['4px', null, '12px']} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Link to={`${nftsBaseUrl}/profile/${accountAddress}`}>\r\n      <StyledFlex>\r\n        {sellerProfilePicComponent}\r\n        <Box display=\"inline\">\r\n          <Text lineHeight=\"1.25\">{truncateHash(accountAddress)}</Text>\r\n          {usernameFetchStatus !== ProfileAvatarFetchStatus.FETCHED ? (\r\n            <Skeleton />\r\n          ) : (\r\n            <Text lineHeight=\"1.25\">{profileName}</Text>\r\n          )}\r\n        </Box>\r\n      </StyledFlex>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default ProfileCell\r\n","import { useReducer } from 'react'\r\n\r\nexport enum Views {\r\n  START = 'start',\r\n  CHANGE = 'change',\r\n  REMOVE = 'remove',\r\n  APPROVE = 'approve',\r\n}\r\n\r\nexport type Actions =\r\n  | {\r\n      type: 'set_view'\r\n      view: Views\r\n    }\r\n  | {\r\n      type: 'go_previous'\r\n    }\r\n\r\nexport interface State {\r\n  currentView: Views\r\n  previousView: Views | null\r\n}\r\n\r\nconst reducer = (state: State, action: Actions): State => {\r\n  switch (action.type) {\r\n    case 'set_view':\r\n      return {\r\n        ...state,\r\n        currentView: action.view,\r\n        previousView: state.currentView,\r\n      }\r\n    case 'go_previous':\r\n      return {\r\n        ...state,\r\n        currentView: state.previousView,\r\n        previousView: state.currentView,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport interface UseEditProfileResponse extends State {\r\n  goToStart: () => void\r\n  goToChange: () => void\r\n  goToApprove: () => void\r\n  goToRemove: () => void\r\n  goPrevious: () => void\r\n}\r\n\r\nconst useEditProfile = (): UseEditProfileResponse => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    currentView: Views.START,\r\n    previousView: null,\r\n  })\r\n\r\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\r\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\r\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\r\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\r\n  const goPrevious = () => dispatch({ type: 'go_previous' })\r\n\r\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\r\n}\r\n\r\nexport default useEditProfile\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport profileABI from 'config/abi/pancakeProfile.json'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport useToast from 'hooks/useToast'\r\n\r\nconst useGetProfileCosts = () => {\r\n  const { t } = useTranslation()\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [costs, setCosts] = useState({\r\n    numberCakeToReactivate: ethers.BigNumber.from(0),\r\n    numberCakeToRegister: ethers.BigNumber.from(0),\r\n    numberCakeToUpdate: ethers.BigNumber.from(0),\r\n  })\r\n  const { toastError } = useToast()\r\n\r\n  useEffect(() => {\r\n    const fetchCosts = async () => {\r\n      try {\r\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\r\n          address: getPancakeProfileAddress(),\r\n          name: method,\r\n        }))\r\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\r\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\r\n        >(profileABI, calls)\r\n\r\n        setCosts({\r\n          numberCakeToReactivate,\r\n          numberCakeToRegister,\r\n          numberCakeToUpdate,\r\n        })\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\r\n      }\r\n    }\r\n\r\n    fetchCosts()\r\n  }, [setCosts, toastError, t])\r\n\r\n  return { costs, isLoading }\r\n}\r\n\r\nexport default useGetProfileCosts\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { useCake } from 'hooks/useContract'\r\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport ProfileAvatarWithTeam from 'components/ProfileAvatarWithTeam'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface StartPageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n  goToRemove: UseEditProfileResponse['goToRemove']\r\n  goToApprove: UseEditProfileResponse['goToApprove']\r\n}\r\n\r\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\r\n  border-color: ${({ theme }) => theme.colors.failure};\r\n  color: ${({ theme }) => theme.colors.failure};\r\n  margin-bottom: 24px;\r\n\r\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\r\n    border-color: ${({ theme }) => theme.colors.failure};\r\n    opacity: 0.8;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div`\r\n  height: 64px;\r\n  width: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 128px;\r\n    width: 128px;\r\n  }\r\n`\r\n\r\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { profile } = useProfile()\r\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n    isLoading: isProfileCostsLoading,\r\n  } = useGetProfileCosts()\r\n  const [needsApproval, setNeedsApproval] = useState(null)\r\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(minimumCakeRequired)\r\n\r\n  /**\r\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\r\n   * If they don't, we send them to the approval screen first\r\n   */\r\n  useEffect(() => {\r\n    const checkApprovalStatus = async () => {\r\n      const response = await cakeContract.allowance(account, getPancakeProfileAddress())\r\n      setNeedsApproval(response.lt(minimumCakeRequired))\r\n    }\r\n\r\n    if (account && !isProfileCostsLoading) {\r\n      checkApprovalStatus()\r\n    }\r\n  }, [account, minimumCakeRequired, setNeedsApproval, cakeContract, isProfileCostsLoading])\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n      <AvatarWrapper>\r\n        <ProfileAvatarWithTeam profile={profile} />\r\n      </AvatarWrapper>\r\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\r\n        <Text as=\"p\" color=\"failure\">\r\n          {!isProfileCostsLoading &&\r\n            !hasMinimumCakeRequired &&\r\n            t('%minimum% CAKE required to change profile pic', { minimum: formatBigNumber(minimumCakeRequired) })}\r\n        </Text>\r\n      </Flex>\r\n      {profile.isActive ? (\r\n        <>\r\n          <Button\r\n            width=\"100%\"\r\n            mb=\"8px\"\r\n            onClick={needsApproval === true ? goToApprove : goToChange}\r\n            disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n          >\r\n            {t('Change Profile Pic')}\r\n          </Button>\r\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\r\n            {t('Remove Profile Pic')}\r\n          </DangerOutline>\r\n        </>\r\n      ) : (\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={needsApproval === true ? goToApprove : goToChange}\r\n          disabled={isProfileCostsLoading || !hasMinimumCakeRequired || needsApproval === null}\r\n        >\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )}\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StartPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useToast from 'hooks/useToast'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\n\r\ntype PauseProfilePageProps = InjectedModalProps\r\n\r\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\r\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const { profile } = useProfile()\r\n  const {\r\n    costs: { numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const { t } = useTranslation()\r\n  const pancakeProfileContract = useProfileContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\r\n\r\n  const handleDeactivateProfile = async () => {\r\n    const tx = await callWithGasPrice(pancakeProfileContract, 'pauseProfile')\r\n    setIsConfirming(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      // Re-fetch profile\r\n      await dispatch(fetchProfile(account))\r\n      toastSuccess(t('Profile Paused!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      onDismiss()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsConfirming(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t(\r\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\r\n        )}\r\n      </Text>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: formatBigNumber(numberCakeToReactivate) })}\r\n      </Text>\r\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\r\n        <Flex alignItems=\"center\">\r\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\r\n          <Text ml=\"8px\">{t('I understand')}</Text>\r\n        </Flex>\r\n      </label>\r\n      <Button\r\n        width=\"100%\"\r\n        isLoading={isConfirming}\r\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        disabled={!isAcknowledged || isConfirming}\r\n        onClick={handleDeactivateProfile}\r\n        mb=\"8px\"\r\n      >\r\n        {t('Confirm')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PauseProfilePage\r\n","import React, { useState } from 'react'\r\nimport { Button, Box, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { fetchProfile } from 'state/profile'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { getErc721Contract } from 'utils/contractHelpers'\r\nimport { useProfile as useProfileContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\r\nimport SelectionCard from 'views/ProfileCreation/SelectionCard'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation } from 'state/nftMarket/types'\r\n\r\ntype ChangeProfilePicPageProps = InjectedModalProps\r\n\r\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\r\n  const [selectedNft, setSelectedNft] = useState({\r\n    tokenId: null,\r\n    collectionAddress: null,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { nfts } = useUserNfts()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const profileContract = useProfileContract()\r\n  const { account, library } = useWeb3React()\r\n  const { toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const nftsInWallet = nfts.filter((nft) => nft.location === NftLocation.WALLET)\r\n\r\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\r\n    useApproveConfirmTransaction({\r\n      onApprove: () => {\r\n        const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\r\n        return callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\r\n      },\r\n      onConfirm: () => {\r\n        if (!profile.isActive) {\r\n          return callWithGasPrice(profileContract, 'reactivateProfile', [\r\n            selectedNft.collectionAddress,\r\n            selectedNft.tokenId,\r\n          ])\r\n        }\r\n\r\n        return callWithGasPrice(profileContract, 'updateProfile', [selectedNft.collectionAddress, selectedNft.tokenId])\r\n      },\r\n      onSuccess: async ({ receipt }) => {\r\n        // Re-fetch profile\r\n        await dispatch(fetchProfile(account))\r\n        toastSuccess(t('Profile Updated!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n\r\n        onDismiss()\r\n      },\r\n    })\r\n\r\n  return (\r\n    <>\r\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n        {t('Choose a new Collectible to use as your profile pic.')}\r\n      </Text>\r\n      <Box maxHeight=\"300px\" overflowY=\"scroll\">\r\n        {nftsInWallet.map((walletNft) => {\r\n          const handleChange = () => {\r\n            setSelectedNft({\r\n              tokenId: walletNft.tokenId,\r\n              collectionAddress: walletNft.collectionAddress,\r\n            })\r\n          }\r\n          return (\r\n            <SelectionCard\r\n              name=\"profilePicture\"\r\n              key={`${walletNft.collectionAddress}#${walletNft.tokenId}`}\r\n              value={walletNft.tokenId}\r\n              image={walletNft.image.thumbnail}\r\n              isChecked={walletNft.tokenId === selectedNft.tokenId}\r\n              onChange={handleChange}\r\n              disabled={isApproving || isConfirming || isConfirmed}\r\n            >\r\n              <Text bold>{walletNft.name}</Text>\r\n            </SelectionCard>\r\n          )\r\n        })}\r\n      </Box>\r\n      {nfts.length === 0 && (\r\n        <>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\r\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\r\n          </Text>\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\r\n          </Text>\r\n        </>\r\n      )}\r\n      <ApproveConfirmButtons\r\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\r\n        isApproving={isApproving}\r\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\r\n        isConfirming={isConfirming}\r\n        onApprove={handleApprove}\r\n        onConfirm={handleConfirm}\r\n      />\r\n      <Button mt=\"8px\" variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChangeProfilePicPage\r\n","import React, { useState } from 'react'\r\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useCake } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\r\nimport { formatBigNumber } from 'utils/formatBalance'\r\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\r\nimport { UseEditProfileResponse } from './reducer'\r\n\r\ninterface ApproveCakePageProps extends InjectedModalProps {\r\n  goToChange: UseEditProfileResponse['goToChange']\r\n}\r\n\r\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\r\n  const [isApproving, setIsApproving] = useState(false)\r\n  const { profile } = useProfile()\r\n  const { t } = useTranslation()\r\n  const {\r\n    costs: { numberCakeToUpdate, numberCakeToReactivate },\r\n  } = useGetProfileCosts()\r\n  const cakeContract = useCake()\r\n  const { toastError } = useToast()\r\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\r\n\r\n  const handleApprove = async () => {\r\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\r\n    setIsApproving(true)\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      goToChange()\r\n    } else {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      setIsApproving(false)\r\n    }\r\n  }\r\n\r\n  if (!profile) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\r\n        <Text>{formatBigNumber(cost)} CAKE</Text>\r\n      </Flex>\r\n      <Button\r\n        disabled={isApproving}\r\n        isLoading={isApproving}\r\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        width=\"100%\"\r\n        mb=\"8px\"\r\n        onClick={handleApprove}\r\n      >\r\n        {t('Enable')}\r\n      </Button>\r\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\r\n        {t('Close Window')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveCakePage\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport useEditProfile, { Views } from './reducer'\r\nimport StartView from './StartView'\r\nimport PauseProfileView from './PauseProfileView'\r\nimport ChangeProfilePicView from './ChangeProfilePicView'\r\nimport ApproveCakeView from './ApproveCakeView'\r\n\r\ntype EditProfileModalProps = InjectedModalProps\r\n\r\nconst viewTitle = (t: ContextApi['t'], currentView: Views) => {\r\n  switch (currentView) {\r\n    case Views.START:\r\n      return t('Edit Profile')\r\n    case Views.CHANGE:\r\n      return t('Change Profile Pic')\r\n    case Views.REMOVE:\r\n      return t('Remove Profile Pic')\r\n    case Views.APPROVE:\r\n      return t('Enable CAKE')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\r\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\r\n  const { t } = useTranslation()\r\n\r\n  const isStartView = currentView === Views.START\r\n  const handleBack = isStartView ? null : () => goPrevious()\r\n\r\n  return (\r\n    <Modal title={viewTitle(t, currentView)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\r\n      <div style={{ maxWidth: '400px' }}>\r\n        {currentView === Views.START && (\r\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\r\n        )}\r\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\r\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\r\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default EditProfileModal\r\n","import React from 'react'\r\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\r\nimport { Profile } from 'state/types'\r\nimport styled from 'styled-components'\r\n\r\nexport interface ProfileAvatarProps {\r\n  profile: Profile\r\n}\r\n\r\nconst TeamAvatar = styled.img`\r\n  border: 1px solid ${({ theme }) => theme.card.background};\r\n  border-radius: 50%;\r\n  bottom: 0px;\r\n  position: absolute;\r\n  right: 0px;\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  width: 37.5%;\r\n  height: 37.5%;\r\n  z-index: 5;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    border-width: 2px;\r\n  }\r\n`\r\n\r\nconst AvatarWrapper = styled.div<{ bg: string }>`\r\n  background: url('${({ bg }) => bg}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n// TODO: replace with no profile avatar icon\r\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nconst ProfileAvatarWithTeam: React.FC<ProfileAvatarProps> = ({ profile }) => {\r\n  return (\r\n    <AvatarWrapper bg={profile.nft?.image.thumbnail}>\r\n      {!profile.isActive && <AvatarInactive />}\r\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\r\n    </AvatarWrapper>\r\n  )\r\n}\r\n\r\nexport default ProfileAvatarWithTeam\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Skeleton, Td, useMatchBreakpoints } from '@pancakeswap/uikit'\r\n\r\nconst GridItem = styled(Flex)`\r\n  align-items: center;\r\n`\r\n\r\nconst LoadingRow: React.FC = () => {\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <tr>\r\n      <Td>\r\n        <GridItem>\r\n          <Skeleton height={[162, null, 64]} width={[80, null, 200]} />\r\n        </GridItem>\r\n      </Td>\r\n      <Td>\r\n        <GridItem justifyContent=\"flex-end\">\r\n          <Skeleton height={[66, null, 24]} width={64} />\r\n        </GridItem>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={42} width={64} />\r\n            </GridItem>\r\n          </Td>\r\n          <Td>\r\n            <GridItem justifyContent=\"flex-end\">\r\n              <Skeleton height={48} width={124} />\r\n            </GridItem>\r\n          </Td>\r\n        </>\r\n      )}\r\n      <Td>\r\n        <GridItem justifyContent=\"center\">\r\n          <Skeleton height={[36, null, 24]} width={[80, null, 120]} />\r\n        </GridItem>\r\n      </Td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nconst TableLoader: React.FC = () => (\r\n  <>\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n    <LoadingRow />\r\n  </>\r\n)\r\n\r\nexport default TableLoader\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { MarketEvent } from '../../../../../state/nftMarket/types'\r\n\r\ninterface ActivityEventTextProps extends TextProps {\r\n  marketEvent: MarketEvent\r\n}\r\n\r\nconst ActivityEventText: React.FC<ActivityEventTextProps> = ({ marketEvent, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const events = {\r\n    [MarketEvent.NEW]: {\r\n      text: t('Listed'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.CANCEL]: {\r\n      text: t('Delisted'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.MODIFY]: {\r\n      text: t('Modified'),\r\n      color: 'textSubtle',\r\n    },\r\n    [MarketEvent.BUY]: {\r\n      text: t('Bought'),\r\n      color: 'success',\r\n    },\r\n    [MarketEvent.SELL]: {\r\n      text: t('Sold'),\r\n      color: 'failure',\r\n    },\r\n  }\r\n\r\n  return (\r\n    <Text {...props} color={events[marketEvent].color}>\r\n      {events[marketEvent].text}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default ActivityEventText\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, Image, Link, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { LightGreyCard } from 'components/Card'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport ActivityEventText from './ActivityEventText'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface MobileModalProps extends InjectedModalProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  localeTimestamp: string\r\n  isUserActivity?: boolean\r\n}\r\n\r\nconst MobileModal: React.FC<MobileModalProps> = ({\r\n  nft,\r\n  activity,\r\n  bnbBusdPrice,\r\n  localeTimestamp,\r\n  onDismiss,\r\n  isUserActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, priceAsFloat)\r\n\r\n  return (\r\n    <Modal title={t('Transaction Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex alignItems=\"center\" mb=\"16px\" justifyContent=\"space-between\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Flex flexDirection=\"column\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            <Text bold>{nft.name}</Text>\r\n          </Flex>\r\n        </Flex>\r\n        <LightGreyCard p=\"16px\">\r\n          <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n            <ActivityEventText fontSize=\"14px\" marketEvent={activity.marketEvent} />\r\n            {priceAsFloat ? (\r\n              <Flex justifyContent=\"flex-end\" alignItems=\"center\">\r\n                <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n                <Text mr=\"4px\" bold>\r\n                  {priceAsFloat}\r\n                </Text>\r\n                <Text color=\"textSubtle\">\r\n                  {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2,\r\n                  })})`}\r\n                </Text>\r\n              </Flex>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </Flex>\r\n          {isUserActivity ? (\r\n            <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('From/To')}\r\n              </Text>\r\n              <Text>{activity.otherParty ? truncateHash(activity.otherParty) : '-'}</Text>\r\n            </Flex>\r\n          ) : (\r\n            <>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('From')}\r\n                </Text>\r\n                <Text>{activity.seller ? truncateHash(activity.seller) : '-'}</Text>\r\n              </Flex>\r\n              <Flex mb=\"24px\" justifyContent=\"space-between\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                  {t('To')}\r\n                </Text>\r\n                <Text>{activity.buyer ? truncateHash(activity.buyer) : '-'}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text fontSize=\"14px\" color=\"textSubtle\">\r\n              {t('Date')}\r\n            </Text>\r\n            <Text>{localeTimestamp}</Text>\r\n          </Flex>\r\n        </LightGreyCard>\r\n        <Flex flexDirection=\"column\" pt=\"16px\" alignItems=\"center\">\r\n          <Button as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            {t('View on BscScan')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MobileModal\r\n","import React from 'react'\r\nimport { Flex, BinanceIcon, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nconst ActivityPrice = ({ bnbBusdPrice, price }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, price)\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n      {price ? (\r\n        <>\r\n          <Flex justifySelf=\"flex-start\" alignItems=\"center\">\r\n            <BinanceIcon width=\"12px\" height=\"12px\" mr=\"4px\" />\r\n            <Text maxWidth=\"80px\" bold>\r\n              {price.toLocaleString(undefined, {\r\n                minimumFractionDigits: 0,\r\n                maximumFractionDigits: 5,\r\n              })}\r\n            </Text>\r\n          </Flex>\r\n          {priceInUsd ? (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`(~$${priceInUsd.toLocaleString(undefined, {\r\n                minimumFractionDigits: 2,\r\n                maximumFractionDigits: 2,\r\n              })})`}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"18px\" width=\"42px\" />\r\n          )}\r\n        </>\r\n      ) : (\r\n        '-'\r\n      )}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ActivityPrice\r\n","import React from 'react'\r\nimport { Image, Flex, Text, Td, IconButton, Link, OpenNewIcon, useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport { Activity, NftToken } from 'state/nftMarket/types'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\r\nimport MobileModal from './MobileModal'\r\nimport ActivityPrice from './ActivityPrice'\r\nimport ActivityEventText from './ActivityEventText'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../../constants'\r\n\r\nconst RoundedImage = styled(Image)`\r\n  & > img {\r\n    border-radius: ${({ theme }) => theme.radii.default};\r\n  }\r\n`\r\n\r\ninterface ActivityRowProps {\r\n  activity: Activity\r\n  nft: NftToken\r\n  bnbBusdPrice: Price\r\n  isUserActivity?: boolean\r\n  isNftActivity?: boolean\r\n}\r\n\r\nconst ActivityRow: React.FC<ActivityRowProps> = ({\r\n  activity,\r\n  bnbBusdPrice,\r\n  nft,\r\n  isUserActivity = false,\r\n  isNftActivity = false,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n  const priceAsFloat = parseFloat(activity.price)\r\n  const timestampAsMs = parseFloat(activity.timestamp) * 1000\r\n  const localeTimestamp = new Date(timestampAsMs).toLocaleString(undefined, {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  })\r\n  const [onPresentMobileModal] = useModal(\r\n    <MobileModal\r\n      nft={nft}\r\n      activity={activity}\r\n      localeTimestamp={localeTimestamp}\r\n      bnbBusdPrice={bnbBusdPrice}\r\n      isUserActivity={isUserActivity}\r\n    />,\r\n  )\r\n  const isPBCollection = nft ? nft.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase() : false\r\n  const tokenId =\r\n    nft && isPBCollection\r\n      ? nft.attributes.find((attribute) => attribute.traitType === 'bunnyId')?.value\r\n      : nft\r\n      ? nft.tokenId\r\n      : null\r\n\r\n  return (\r\n    <tr {...((isXs || isSm) && { onClick: onPresentMobileModal })}>\r\n      {!isNftActivity ? (\r\n        <Td\r\n          {...((isXs || isSm) && {\r\n            onClick: (event) => {\r\n              event.stopPropagation()\r\n            },\r\n          })}\r\n        >\r\n          <RouterLink to={nft ? `${nftsBaseUrl}/collections/${nft.collectionAddress}/${tokenId}` : ``}>\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\" flexDirection={['column', null, 'row']}>\r\n              <RoundedImage\r\n                src={nft?.image.thumbnail}\r\n                alt={nft?.name}\r\n                width={64}\r\n                height={64}\r\n                mr={[0, null, '16px']}\r\n                mb={['8px', null, 0]}\r\n              />\r\n              <Flex flexDirection=\"column\">\r\n                <Text textAlign={['center', null, 'left']} color=\"textSubtle\" fontSize=\"14px\">\r\n                  {nft?.collectionName}\r\n                </Text>\r\n                <Text textAlign={['center', null, 'left']} bold>\r\n                  {nft?.name}\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          </RouterLink>\r\n        </Td>\r\n      ) : null}\r\n      <Td>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <ActivityEventText marketEvent={activity.marketEvent} />\r\n        </Flex>\r\n        {isXs || isSm ? <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} /> : null}\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <>\r\n          <Td>\r\n            <ActivityPrice price={priceAsFloat} bnbBusdPrice={bnbBusdPrice} />\r\n          </Td>\r\n          {isUserActivity ? (\r\n            <Td>\r\n              <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                {activity.otherParty ? <ProfileCell accountAddress={activity.otherParty} /> : '-'}\r\n              </Flex>\r\n            </Td>\r\n          ) : (\r\n            <>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.seller ? <ProfileCell accountAddress={activity.seller} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n              <Td>\r\n                <Flex justifyContent=\"center\" alignItems=\"center\">\r\n                  {activity.buyer ? <ProfileCell accountAddress={activity.buyer} /> : '-'}\r\n                </Flex>\r\n              </Td>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      <Td>\r\n        <Flex justifyContent=\"center\">\r\n          <Text textAlign=\"center\" fontSize={isXs || isSm ? '12px' : '16px'}>\r\n            {localeTimestamp}\r\n          </Text>\r\n        </Flex>\r\n      </Td>\r\n      {isXs || isSm ? null : (\r\n        <Td>\r\n          <IconButton as={Link} external href={getBscScanLink(activity.tx, 'transaction', chainId)}>\r\n            <OpenNewIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </Td>\r\n      )}\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default ActivityRow\r\n","import React from 'react'\r\nimport { InjectedModalProps, Modal, Flex, Text, Button, useModal, Link, Grid, LinkExternal } from '@pancakeswap/uikit'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { HorizontalDivider, RoundedImage } from './BuySellModals/shared/styles'\r\nimport EditProfileModal from '../Profile/components/EditProfileModal'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from '../constants'\r\n\r\nexport const StyledModal = styled(Modal)`\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst TextWrapper = styled(Flex)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n`\r\n\r\ninterface ProfileNftModalProps extends InjectedModalProps {\r\n  nft: NftToken\r\n}\r\n\r\nconst ProfileNftModal: React.FC<ProfileNftModalProps> = ({ nft, onDismiss }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  const itemPageUrlId = nft.collectionAddress === pancakeBunniesAddress ? nft.attributes[0].value : nft.tokenId\r\n\r\n  return (\r\n    <StyledModal title={t('Details')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\r\n      <Flex flexDirection=\"column\" maxWidth=\"350px\">\r\n        <Flex p=\"16px\">\r\n          <RoundedImage src={nft.image.thumbnail} height={68} width={68} mr=\"16px\" />\r\n          <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n            <Text bold>{nft.name}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n              {nft.collectionName}\r\n            </Text>\r\n            {/* TODO: Add lowestPrice when available */}\r\n          </Grid>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" px=\"16px\" mb=\"16px\">\r\n          <Flex flex=\"2\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Token ID: %id%', { id: nft.tokenId })}\r\n            </Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\" flex=\"3\">\r\n            <Button\r\n              as={Link}\r\n              p=\"0px\"\r\n              height=\"16px\"\r\n              external\r\n              variant=\"text\"\r\n              href={`${nftsBaseUrl}/collections/${nft.collectionAddress}/${itemPageUrlId}`}\r\n            >\r\n              {t('View Item')}\r\n            </Button>\r\n            <HorizontalDivider />\r\n            <LinkExternal p=\"0px\" height=\"16px\" href={getBscScanLinkForNft(nft.collectionAddress, nft.tokenId)}>\r\n              BscScan\r\n            </LinkExternal>\r\n          </Flex>\r\n        </Flex>\r\n        <TextWrapper p=\"24px 16px\" flexDirection=\"column\">\r\n          <Text mb=\"16px\">{t(\"You're using this NFT as your Pancake Profile picture\")}</Text>\r\n          <Text color=\"textSubtle\" mb=\"16px\" fontSize=\"14px\">\r\n            {t(\r\n              'Removing it will suspend your profile, and you won’t be able to earn points, participate in team activities, or be eligible for new NFT drops.',\r\n            )}\r\n          </Text>\r\n          <Text color=\"textSubtle\" fontSize=\"14px\">\r\n            {t('Go to your profile page to continue.')}\r\n          </Text>\r\n        </TextWrapper>\r\n        <Flex flexDirection=\"column\" py=\"16px\" px=\"16px\">\r\n          <Button onClick={onEditProfileModal} width=\"100%\" variant=\"secondary\">\r\n            {t('Remove Profile Pic')}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default ProfileNftModal\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { StepIndicator } from './styles'\r\n\r\ninterface ApproveAndConfirmStageProps {\r\n  variant: 'buy' | 'sell'\r\n  isApproved: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  handleApprove: () => void\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown if user wants to pay with WBNB and contract isn't approved yet\r\n// Sell Flow:\r\n// Shown the first time user puts NFT for sale\r\nconst ApproveAndConfirmStage: React.FC<ApproveAndConfirmStageProps> = ({\r\n  variant,\r\n  isApproved,\r\n  isApproving,\r\n  isConfirming,\r\n  handleApprove,\r\n  handleConfirm,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex mb=\"8px\" alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <StepIndicator success={isApproved}>\r\n              <Text fontSize=\"20px\" bold color=\"invertedContrast\">\r\n                1\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" color={isApproved ? 'success' : 'secondary'} bold>\r\n              {isApproved ? t('Enabled') : t('Enable')}\r\n            </Text>\r\n          </Flex>\r\n          {!isApproved && (\r\n            <Text mt=\"8px\" maxWidth=\"275px\" small color=\"textSubtle\">\r\n              {variant === 'buy'\r\n                ? t('Please enable WBNB spending in your wallet')\r\n                : t('Please enable your NFT to be sent to the market')}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isApproving && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      {!isApproved && (\r\n        <Button variant=\"secondary\" disabled={isApproving} onClick={handleApprove}>\r\n          {isApproving ? `${t('Enabling')}...` : t('Enable')}\r\n        </Button>\r\n      )}\r\n      <Flex alignItems=\"center\" mt=\"8px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mt=\"16px\">\r\n            <StepIndicator success={!!0} disabled={!isApproved}>\r\n              <Text fontSize=\"20px\" bold color={!isApproved ? 'textDisabled' : 'invertedContrast'}>\r\n                2\r\n              </Text>\r\n            </StepIndicator>\r\n            <Text fontSize=\"20px\" bold color={isApproved ? 'secondary' : 'textDisabled'}>\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color={isApproved ? 'textSubtle' : 'textDisabled'}>\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"16px\" disabled={!isApproved || isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? t('Confirming') : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ApproveAndConfirmStage\r\n","import React from 'react'\r\nimport { Flex, Text, Button, ArrowUpIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { Divider } from './styles'\r\n\r\ninterface TransactionConfirmedProps {\r\n  txHash: string\r\n  onDismiss: () => void\r\n}\r\n\r\nconst TransactionConfirmed: React.FC<TransactionConfirmedProps> = ({ txHash, onDismiss }) => {\r\n  const { chainId } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"space-between\" height=\"150px\">\r\n        <ArrowUpIcon width=\"64px\" height=\"64px\" color=\"primary\" />\r\n        <Text bold>{t('Transaction Confirmed')}</Text>\r\n        <LinkExternal href={getBscScanLink(txHash, 'transaction', chainId)}>{t('View on BscScan')}</LinkExternal>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex px=\"16px\" pb=\"16px\" justifyContent=\"center\">\r\n        <Button onClick={onDismiss} variant=\"secondary\" width=\"100%\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransactionConfirmed\r\n","import React from 'react'\r\nimport { Flex, Text, Button, Spinner } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ConfirmStageProps {\r\n  isConfirming: boolean\r\n  handleConfirm: () => void\r\n}\r\n\r\n// Buy Flow:\r\n// Shown in case user wants to pay with BNB\r\n// or if user wants to pay with WBNB and it is already approved\r\n// Sell Flow:\r\n// Shown if user adjusts the price or removes NFT from the market\r\nconst ConfirmStage: React.FC<ConfirmStageProps> = ({ isConfirming, handleConfirm }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Flex p=\"16px\" flexDirection=\"column\">\r\n      <Flex alignItems=\"center\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\">\r\n            <Text fontSize=\"20px\" bold color=\"secondary\">\r\n              {t('Confirm')}\r\n            </Text>\r\n          </Flex>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Please confirm the transaction in your wallet')}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"0 0 64px\" height=\"72px\" width=\"64px\">\r\n          {isConfirming && <Spinner size={64} />}\r\n        </Flex>\r\n      </Flex>\r\n      <Button mt=\"24px\" disabled={isConfirming} onClick={handleConfirm} variant=\"secondary\">\r\n        {isConfirming ? `${t('Confirming')}...` : t('Confirm')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default ConfirmStage\r\n","import { useEffect, useReducer, useRef } from 'react'\r\nimport { noop } from 'lodash'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { ethers } from 'ethers'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { logError } from 'utils/sentry'\r\n\r\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\r\n\r\ntype Action =\r\n  | { type: 'requires_approval' }\r\n  | { type: 'approve_sending' }\r\n  | { type: 'approve_receipt' }\r\n  | { type: 'approve_error' }\r\n  | { type: 'confirm_sending' }\r\n  | { type: 'confirm_receipt' }\r\n  | { type: 'confirm_error' }\r\n\r\ninterface State {\r\n  approvalState: LoadingState\r\n  confirmState: LoadingState\r\n}\r\n\r\nconst initialState: State = {\r\n  approvalState: 'idle',\r\n  confirmState: 'idle',\r\n}\r\n\r\nconst reducer = (state: State, actions: Action): State => {\r\n  switch (actions.type) {\r\n    case 'requires_approval':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_sending':\r\n      return {\r\n        ...state,\r\n        approvalState: 'loading',\r\n      }\r\n    case 'approve_receipt':\r\n      return {\r\n        ...state,\r\n        approvalState: 'success',\r\n      }\r\n    case 'approve_error':\r\n      return {\r\n        ...state,\r\n        approvalState: 'fail',\r\n      }\r\n    case 'confirm_sending':\r\n      return {\r\n        ...state,\r\n        confirmState: 'loading',\r\n      }\r\n    case 'confirm_receipt':\r\n      return {\r\n        ...state,\r\n        confirmState: 'success',\r\n      }\r\n    case 'confirm_error':\r\n      return {\r\n        ...state,\r\n        confirmState: 'fail',\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\ninterface OnSuccessProps {\r\n  state: State\r\n  receipt: ethers.providers.TransactionReceipt\r\n}\r\n\r\ninterface ApproveConfirmTransaction {\r\n  onApprove: () => Promise<ethers.providers.TransactionResponse>\r\n  onConfirm: (params?) => Promise<ethers.providers.TransactionResponse>\r\n  onRequiresApproval?: () => Promise<boolean>\r\n  onSuccess: ({ state, receipt }: OnSuccessProps) => void\r\n  onApproveSuccess?: ({ state, receipt }: OnSuccessProps) => void\r\n}\r\n\r\nconst useApproveConfirmTransaction = ({\r\n  onApprove,\r\n  onConfirm,\r\n  onRequiresApproval,\r\n  onSuccess = noop,\r\n  onApproveSuccess = noop,\r\n}: ApproveConfirmTransaction) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const handlePreApprove = useRef(onRequiresApproval)\r\n  const { toastError } = useToast()\r\n\r\n  // Check if approval is necessary, re-check if account changes\r\n  useEffect(() => {\r\n    if (account && handlePreApprove.current) {\r\n      handlePreApprove.current().then((result) => {\r\n        if (result) {\r\n          dispatch({ type: 'requires_approval' })\r\n        }\r\n      })\r\n    }\r\n  }, [account, handlePreApprove, dispatch])\r\n\r\n  return {\r\n    isApproving: state.approvalState === 'loading',\r\n    isApproved: state.approvalState === 'success',\r\n    isConfirming: state.confirmState === 'loading',\r\n    isConfirmed: state.confirmState === 'success',\r\n    hasApproveFailed: state.approvalState === 'fail',\r\n    hasConfirmFailed: state.confirmState === 'fail',\r\n    handleApprove: async () => {\r\n      try {\r\n        const tx = await onApprove()\r\n        dispatch({ type: 'approve_sending' })\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'approve_receipt' })\r\n          onApproveSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'approve_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n    handleConfirm: async (params = {}) => {\r\n      dispatch({ type: 'confirm_sending' })\r\n      try {\r\n        const tx = await onConfirm(params)\r\n        const receipt = await tx.wait()\r\n        if (receipt.status) {\r\n          dispatch({ type: 'confirm_receipt' })\r\n          onSuccess({ state, receipt })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'confirm_error' })\r\n        logError(error)\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport default useApproveConfirmTransaction\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport enum ButtonArrangement {\r\n  ROW = 'row',\r\n  SEQUENTIAL = 'sequential',\r\n}\r\n\r\ninterface ApproveConfirmButtonsProps {\r\n  isApproveDisabled: boolean\r\n  isApproving: boolean\r\n  isConfirming: boolean\r\n  isConfirmDisabled: boolean\r\n  onApprove: () => void\r\n  onConfirm: () => void\r\n  buttonArrangement?: ButtonArrangement\r\n  confirmLabel?: string\r\n  confirmId?: string\r\n}\r\n\r\nconst StyledApproveConfirmButtonRow = styled.div`\r\n  align-items: center;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  justify-content: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: 1fr 24px 1fr;\r\n  }\r\n`\r\n\r\nconst Button = styled(UIKitButton)`\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    min-width: 160px;\r\n  }\r\n`\r\n\r\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\r\n\r\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\r\n\r\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\r\n  isApproveDisabled,\r\n  isApproving,\r\n  isConfirming,\r\n  isConfirmDisabled,\r\n  onApprove,\r\n  onConfirm,\r\n  buttonArrangement = ButtonArrangement.ROW,\r\n  confirmLabel,\r\n  confirmId,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const confirmButtonText = confirmLabel ?? t('Confirm')\r\n\r\n  const ApproveConfirmRow = () => {\r\n    return (\r\n      <StyledApproveConfirmButtonRow>\r\n        <Box>\r\n          <Button\r\n            disabled={isApproveDisabled}\r\n            onClick={onApprove}\r\n            endIcon={isApproving ? spinnerIcon : undefined}\r\n            isLoading={isApproving}\r\n          >\r\n            {isApproving ? t('Enabling') : t('Enable')}\r\n          </Button>\r\n        </Box>\r\n        <Flex justifyContent=\"center\">\r\n          <ChevronRight />\r\n          <ChevronBottom />\r\n        </Flex>\r\n        <Box>\r\n          <Button\r\n            id={confirmId}\r\n            onClick={onConfirm}\r\n            disabled={isConfirmDisabled}\r\n            isLoading={isConfirming}\r\n            endIcon={isConfirming ? spinnerIcon : undefined}\r\n          >\r\n            {isConfirming ? t('Confirming') : confirmButtonText}\r\n          </Button>\r\n        </Box>\r\n      </StyledApproveConfirmButtonRow>\r\n    )\r\n  }\r\n\r\n  const ApproveConfirmSequential = () => {\r\n    return (\r\n      <>\r\n        {isApproveDisabled ? (\r\n          <Box>\r\n            <Button\r\n              id={confirmId}\r\n              onClick={onConfirm}\r\n              disabled={isConfirmDisabled}\r\n              isLoading={isConfirming}\r\n              endIcon={isConfirming ? spinnerIcon : undefined}\r\n            >\r\n              {isConfirming ? t('Confirming') : confirmButtonText}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Box>\r\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\r\n              {isApproving ? t('Enabling') : t('Enable')}\r\n            </Button>\r\n          </Box>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\r\n}\r\n\r\nexport default ApproveConfirmButtons\r\n","import styled from 'styled-components'\r\nimport { Flex, Image } from '@pancakeswap/uikit'\r\n\r\nexport const RoundedImage = styled(Image)`\r\n  border-radius: ${({ theme }) => theme.radii.small};\r\n  overflow: hidden;\r\n`\r\n\r\nexport const Divider = styled.div`\r\n  margin: 16px 0;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const HorizontalDivider = styled.div`\r\n  border-right: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nexport const StepIndicator = styled(Flex)<{ success: boolean; disabled?: boolean }>`\r\n  border-radius: 50%;\r\n  background-color: ${({ theme, success, disabled }) => {\r\n    if (disabled) {\r\n      return 'none'\r\n    }\r\n    return success ? theme.colors.success : theme.colors.secondary\r\n  }};\r\n  border: ${({ theme, disabled }) => (disabled ? `1px solid ${theme.colors.textDisabled}` : 'none')};\r\n  height: 32px;\r\n  width: 32px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 8px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nconst NoNftsImage = styled.div`\r\n  background: url('/images/nfts/no-profile-md.png');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default NoNftsImage\r\n","export enum SellingStage {\r\n  // Sell flow\r\n  SELL,\r\n  SET_PRICE,\r\n  APPROVE_AND_CONFIRM_SELL,\r\n  // Adjust price flow\r\n  EDIT,\r\n  ADJUST_PRICE,\r\n  CONFIRM_ADJUST_PRICE,\r\n  // Remove from market flow\r\n  REMOVE_FROM_MARKET,\r\n  CONFIRM_REMOVE_FROM_MARKET,\r\n  // Transfer flow\r\n  TRANSFER,\r\n  CONFIRM_TRANSFER,\r\n  // Common\r\n  TX_CONFIRMED,\r\n}\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, BinanceIcon, LinkExternal, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport EditProfileModal from 'views/Nft/market/Profile/components/EditProfileModal'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface SellStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToNextStage: () => void\r\n  continueToTransferStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to put their NFT for sale or transfer to another wallet\r\nconst SellStage: React.FC<SellStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToNextStage,\r\n  continueToTransferStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { hasProfile } = useProfile()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>\r\n                  {lowestPrice.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 3,\r\n                    maximumFractionDigits: 3,\r\n                  })}\r\n                </Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Sell')}\r\n        </Button>\r\n        <Button mb=\"8px\" variant=\"secondary\" onClick={continueToTransferStage}>\r\n          {t('Transfer')}\r\n        </Button>\r\n        {hasProfile && (\r\n          <Button variant=\"secondary\" onClick={onEditProfileModal}>\r\n            {t('Set as Profile Pic')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SellStage\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Modal, Box, Flex, Text, BinanceIcon, Input } from '@pancakeswap/uikit'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { SellingStage } from './types'\r\n\r\nexport const stagesWithBackButton = [\r\n  SellingStage.SET_PRICE,\r\n  SellingStage.ADJUST_PRICE,\r\n  SellingStage.APPROVE_AND_CONFIRM_SELL,\r\n  SellingStage.CONFIRM_ADJUST_PRICE,\r\n  SellingStage.REMOVE_FROM_MARKET,\r\n  SellingStage.CONFIRM_REMOVE_FROM_MARKET,\r\n  SellingStage.TRANSFER,\r\n  SellingStage.CONFIRM_TRANSFER,\r\n]\r\n\r\nexport const StyledModal = styled(Modal)<{ stage: SellingStage }>`\r\n  width: 360px;\r\n  & > div:last-child {\r\n    padding: 0;\r\n  }\r\n  & h2:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `color: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n  & svg:first-of-type {\r\n    ${({ stage, theme }) => (stagesWithBackButton.includes(stage) ? `fill: ${theme.colors.textSubtle}` : null)};\r\n  }\r\n`\r\n\r\nexport const GreyedOutContainer = styled(Box)`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  padding: 16px;\r\n`\r\n\r\nexport const RightAlignedInput = styled(Input)`\r\n  text-align: right;\r\n`\r\n\r\ninterface BnbAmountCellProps {\r\n  bnbAmount: number\r\n}\r\n\r\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${bnbAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        {`($${usdAmount.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface FeeAmountCellProps {\r\n  bnbAmount: number\r\n  creatorFee: number\r\n  tradingFee: number\r\n}\r\n\r\nexport const FeeAmountCell: React.FC<FeeAmountCellProps> = ({ bnbAmount, creatorFee, tradingFee }) => {\r\n  if (!bnbAmount || bnbAmount === 0) {\r\n    return (\r\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n        <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n        <Text bold mr=\"4px\">\r\n          -\r\n        </Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  const totalFee = creatorFee + tradingFee\r\n  const totalFeeAsDecimal = totalFee / 100\r\n  const feeAmount = bnbAmount * totalFeeAsDecimal\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n      <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n      <Text bold mr=\"4px\">{`${feeAmount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 6,\r\n      })}`}</Text>\r\n      <Text small color=\"textSubtle\" textAlign=\"right\">\r\n        ({totalFee}%)\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { Flex, Grid, Box, Text, Button, BinanceIcon, ErrorIcon, useTooltip } from '@pancakeswap/uikit'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { Divider } from '../shared/styles'\r\nimport { GreyedOutContainer, BnbAmountCell, RightAlignedInput, FeeAmountCell } from './styles'\r\n\r\ninterface SetPriceStageProps {\r\n  nftToSell: NftToken\r\n  variant: 'set' | 'adjust'\r\n  currentPrice?: string\r\n  lowestPrice?: number\r\n  price: string\r\n  setPrice: React.Dispatch<React.SetStateAction<string>>\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst MIN_PRICE = 0.005\r\nconst MAX_PRICE = 10000\r\n\r\n// Stage where user puts price for NFT they're about to put on sale\r\n// Also shown when user wants to adjust the price of already listed NFT\r\nconst SetPriceStage: React.FC<SetPriceStageProps> = ({\r\n  nftToSell,\r\n  variant,\r\n  lowestPrice,\r\n  currentPrice,\r\n  price,\r\n  setPrice,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const inputRef = useRef<HTMLInputElement>()\r\n  const adjustedPriceIsTheSame = variant === 'adjust' && parseFloat(currentPrice) === parseFloat(price)\r\n  const priceIsValid = !price || Number.isNaN(parseFloat(price)) || parseFloat(price) <= 0\r\n\r\n  const { creatorFee, tradingFee } = useGetCollection(nftToSell.collectionAddress)\r\n  const creatorFeeAsNumber = parseFloat(creatorFee)\r\n  const tradingFeeAsNumber = parseFloat(tradingFee)\r\n  const bnbPrice = useBNBBusdPrice()\r\n  const priceAsFloat = parseFloat(price)\r\n  const priceInUsd = multiplyPriceByAmount(bnbPrice, priceAsFloat)\r\n\r\n  const priceIsOutOfRange = priceAsFloat > MAX_PRICE || priceAsFloat < MIN_PRICE\r\n\r\n  const { tooltip, tooltipVisible, targetRef } = useTooltip(\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'When selling NFTs from this collection, a portion of the BNB paid will be diverted before reaching the seller:',\r\n        )}\r\n      </Text>\r\n      {creatorFeeAsNumber > 0 && (\r\n        <Text>{t('%percentage%% royalties to the collection owner', { percentage: creatorFee })}</Text>\r\n      )}\r\n      <Text>{t('%percentage%% trading fee will be used to buy & burn CAKE', { percentage: tradingFee })}</Text>\r\n    </>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (inputRef && inputRef.current) {\r\n      inputRef.current.focus()\r\n    }\r\n  }, [inputRef])\r\n\r\n  const getButtonText = () => {\r\n    if (variant === 'adjust') {\r\n      if (adjustedPriceIsTheSame || priceIsValid) {\r\n        return t('Input New Sale Price')\r\n      }\r\n      return t('Confirm')\r\n    }\r\n    return t('Enable Listing')\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold p=\"16px\">\r\n        {variant === 'set' ? t('Set Price') : t('Adjust Sale Price')}\r\n      </Text>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Set Price')}\r\n        </Text>\r\n        <Flex>\r\n          <Flex flex=\"1\" alignItems=\"center\">\r\n            <BinanceIcon width={24} height={24} mr=\"4px\" />\r\n            <Text bold>WBNB</Text>\r\n          </Flex>\r\n          <Flex flex=\"2\">\r\n            <RightAlignedInput\r\n              scale=\"sm\"\r\n              type=\"number\"\r\n              inputMode=\"decimal\"\r\n              value={price}\r\n              ref={inputRef}\r\n              isWarning={priceIsOutOfRange}\r\n              onChange={(e) => setPrice(e.target.value)}\r\n            />\r\n          </Flex>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" height=\"21px\" justifyContent=\"flex-end\">\r\n          {!Number.isNaN(priceInUsd) && (\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`$${priceInUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n            </Text>\r\n          )}\r\n        </Flex>\r\n        {priceIsOutOfRange && (\r\n          <Text fontSize=\"12px\" color=\"failure\">\r\n            {t('Allowed price range is between %minPrice% and %maxPrice% WBNB', {\r\n              minPrice: MIN_PRICE,\r\n              maxPrice: MAX_PRICE,\r\n            })}\r\n          </Text>\r\n        )}\r\n        <Flex mt=\"8px\">\r\n          <Text small color=\"textSubtle\" mr=\"8px\">\r\n            {t('Seller pays %percentage%% platform fee on sale', {\r\n              percentage: creatorFeeAsNumber + tradingFeeAsNumber,\r\n            })}\r\n          </Text>\r\n          <span ref={targetRef}>\r\n            <ErrorIcon />\r\n          </span>\r\n          {tooltipVisible && tooltip}\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Platform fee if sold')}\r\n          </Text>\r\n          <FeeAmountCell bnbAmount={priceAsFloat} creatorFee={creatorFeeAsNumber} tradingFee={tradingFeeAsNumber} />\r\n        </Flex>\r\n        {lowestPrice && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\" mt=\"16px\">\r\n            <Text small color=\"textSubtle\">\r\n              {t('Lowest price on market')}\r\n            </Text>\r\n            <BnbAmountCell bnbAmount={lowestPrice} />\r\n          </Flex>\r\n        )}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Box>\r\n          <Text small color=\"textSubtle\">\r\n            {t('The NFT will be removed from your wallet and put on sale at this price.')}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {t('Sales are in WBNB. You can swap WBNB to BNB 1:1 for free with PancakeSwap.')}\r\n          </Text>\r\n        </Box>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={priceIsValid || adjustedPriceIsTheSame || priceIsOutOfRange}\r\n        >\r\n          {getButtonText()}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SetPriceStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Link, LinkExternal, BinanceIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl, pancakeBunniesAddress } from 'views/Nft/market/constants'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { getBscScanLinkForNft } from 'utils'\r\nimport { Divider, HorizontalDivider, RoundedImage } from '../shared/styles'\r\n\r\ninterface EditStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  continueToAdjustPriceStage: () => void\r\n  continueToRemoveFromMarketStage: () => void\r\n}\r\n\r\n// Initial stage when user wants to edit already listed NFT (i.e. adjust price or remove from sale)\r\nconst EditStage: React.FC<EditStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  continueToAdjustPriceStage,\r\n  continueToRemoveFromMarketStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const itemPageUrlId =\r\n    nftToSell.collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n      ? nftToSell.attributes[0].value\r\n      : nftToSell.tokenId\r\n\r\n  return (\r\n    <>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n          <Text small color=\"textSubtle\">\r\n            {t('Your price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n            <Text small>{nftToSell.marketData.currentAskPrice}</Text>\r\n          </Flex>\r\n        </Grid>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" px=\"16px\" mt=\"8px\">\r\n        <Flex flex=\"2\">\r\n          <Text small color=\"textSubtle\">\r\n            {t('Token ID: %id%', { id: nftToSell.tokenId })}\r\n          </Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" flex=\"3\">\r\n          <Button\r\n            as={Link}\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            external\r\n            variant=\"text\"\r\n            href={`${nftsBaseUrl}/collections/${nftToSell.collectionAddress}/${itemPageUrlId}`}\r\n          >\r\n            {t('View Item')}\r\n          </Button>\r\n          <HorizontalDivider />\r\n          <LinkExternal\r\n            p=\"0px\"\r\n            height=\"16px\"\r\n            href={getBscScanLinkForNft(nftToSell.collectionAddress, nftToSell.tokenId)}\r\n          >\r\n            BscScan\r\n          </LinkExternal>\r\n        </Flex>\r\n      </Flex>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToAdjustPriceStage}>\r\n          {t('Adjust Sale Price')}\r\n        </Button>\r\n        <Button variant=\"danger\" onClick={continueToRemoveFromMarketStage}>\r\n          {t('Remove from Market')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EditStage\r\n","import React from 'react'\r\nimport { Flex, Box, Text, Button } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Divider } from '../shared/styles'\r\n\r\ninterface RemoveStageProps {\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst RemoveStage: React.FC<RemoveStageProps> = ({ continueToNextStage }) => {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <Box p=\"16px\" maxWidth=\"360px\">\r\n        <Text fontSize=\"24px\" bold>\r\n          {t('Remove from Market')}\r\n        </Text>\r\n        <Text mt=\"24px\" color=\"textSubtle\">\r\n          {t('Removing this NFT from the marketplace will return it to your wallet.')}\r\n        </Text>\r\n        <Text mt=\"16px\" color=\"textSubtle\">\r\n          {t('Continue?')}\r\n        </Text>\r\n      </Box>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button mb=\"8px\" onClick={continueToNextStage}>\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RemoveStage\r\n","import React from 'react'\r\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { Divider, RoundedImage } from '../shared/styles'\r\nimport { GreyedOutContainer } from './styles'\r\n\r\ninterface TransferStageProps {\r\n  nftToSell: NftToken\r\n  lowestPrice: number\r\n  transferAddress: string\r\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\r\n  isInvalidTransferAddress: boolean\r\n  continueToNextStage: () => void\r\n}\r\n\r\nconst TransferStage: React.FC<TransferStageProps> = ({\r\n  nftToSell,\r\n  lowestPrice,\r\n  transferAddress,\r\n  setTransferAddress,\r\n  isInvalidTransferAddress,\r\n  continueToNextStage,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\r\n  const getErrorText = () => {\r\n    if (isInvalidTransferAddress) {\r\n      return t('That’s not a Binance Smart Chain wallet address.')\r\n    }\r\n    if (transferAddressEqualsConnectedAddress) {\r\n      return t('This address is the one that is currently connected')\r\n    }\r\n    return null\r\n  }\r\n  return (\r\n    <>\r\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\r\n        {t('Transfer to New Wallet')}\r\n      </Text>\r\n      <Flex p=\"16px\">\r\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\r\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\r\n          <Text bold>{nftToSell.name}</Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\r\n            {nftToSell.collectionName}\r\n          </Text>\r\n          {lowestPrice && (\r\n            <>\r\n              <Text small color=\"textSubtle\">\r\n                {t('Lowest price')}\r\n              </Text>\r\n              <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n                <BinanceIcon width={16} height={16} mr=\"4px\" />\r\n                <Text small>{lowestPrice}</Text>\r\n              </Flex>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Flex>\r\n      <GreyedOutContainer>\r\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\r\n          {t('Receiving address')}\r\n        </Text>\r\n        <Input\r\n          scale=\"sm\"\r\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\r\n          placeholder={t('Paste BSC address')}\r\n          value={transferAddress}\r\n          onChange={(e) => setTransferAddress(e.target.value)}\r\n        />\r\n        {isInvalidTransferAddress ||\r\n          (transferAddressEqualsConnectedAddress && (\r\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\r\n              {getErrorText()}\r\n            </Text>\r\n          ))}\r\n      </GreyedOutContainer>\r\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\r\n        <Flex alignSelf=\"flex-start\">\r\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\r\n        </Flex>\r\n        <Text small color=\"textSubtle\">\r\n          {t('This action will send your NFT to the address you have indicated above. Make sure it’s the correct')}\r\n        </Text>\r\n      </Grid>\r\n      <Divider />\r\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\r\n        <Button\r\n          mb=\"8px\"\r\n          onClick={continueToNextStage}\r\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TransferStage\r\n","import React, { useState } from 'react'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport useTheme from 'hooks/useTheme'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport useToast from 'hooks/useToast'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { ContextApi } from 'contexts/Localization/types'\r\nimport { isAddress } from 'utils'\r\nimport { useErc721CollectionContract, useNftMarketContract } from 'hooks/useContract'\r\nimport { useAppDispatch } from 'state'\r\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\r\nimport SellStage from './SellStage'\r\nimport SetPriceStage from './SetPriceStage'\r\nimport EditStage from './EditStage'\r\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\r\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\r\nimport { StyledModal, stagesWithBackButton } from './styles'\r\nimport { SellingStage } from './types'\r\nimport ConfirmStage from '../shared/ConfirmStage'\r\nimport RemoveStage from './RemoveStage'\r\nimport TransferStage from './TransferStage'\r\n\r\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\r\n  switch (stage) {\r\n    // Sell flow\r\n    case SellingStage.SELL:\r\n      return t('Details')\r\n    case SellingStage.SET_PRICE:\r\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n      return t('Back')\r\n    // Adjust price flow\r\n    case SellingStage.EDIT:\r\n      return t('Details')\r\n    case SellingStage.ADJUST_PRICE:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_ADJUST_PRICE:\r\n      return t('Confirm transaction')\r\n    // Remove from market flow\r\n    case SellingStage.REMOVE_FROM_MARKET:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n      return t('Confirm transaction')\r\n    // Transfer flow\r\n    case SellingStage.TRANSFER:\r\n      return t('Back')\r\n    case SellingStage.CONFIRM_TRANSFER:\r\n      return t('Confirm transaction')\r\n    // Common\r\n    case SellingStage.TX_CONFIRMED:\r\n      return t('Transaction Confirmed')\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n\r\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\r\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n    return t('Your NFT has been returned to your wallet')\r\n  }\r\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n    return t('Your NFT has been transferred to another wallet')\r\n  }\r\n  if (variant === 'sell') {\r\n    return t('Your NFT has been listed for sale!')\r\n  }\r\n  return t('Your NFT listing has been changed.')\r\n}\r\n\r\ninterface SellModalProps extends InjectedModalProps {\r\n  variant: 'sell' | 'edit'\r\n  nftToSell: NftToken\r\n}\r\n\r\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\r\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\r\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\r\n  const [transferAddress, setTransferAddress] = useState('')\r\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess } = useToast()\r\n  const collectionContract = useErc721CollectionContract(nftToSell.collectionAddress)\r\n  const nftMarketContract = useNftMarketContract()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\r\n\r\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\r\n\r\n  const goBack = () => {\r\n    switch (stage) {\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setPrice(nftToSell.marketData.currentAskPrice)\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_ADJUST_PRICE:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.EDIT)\r\n        break\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.SELL)\r\n        break\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        setStage(SellingStage.TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToNextStage = () => {\r\n    switch (stage) {\r\n      case SellingStage.SELL:\r\n        setStage(SellingStage.SET_PRICE)\r\n        break\r\n      case SellingStage.SET_PRICE:\r\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\r\n        break\r\n      case SellingStage.EDIT:\r\n        setStage(SellingStage.ADJUST_PRICE)\r\n        break\r\n      case SellingStage.ADJUST_PRICE:\r\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\r\n        break\r\n      case SellingStage.REMOVE_FROM_MARKET:\r\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\r\n        break\r\n      case SellingStage.TRANSFER:\r\n        setStage(SellingStage.CONFIRM_TRANSFER)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  const continueToRemoveFromMarketStage = () => {\r\n    setStage(SellingStage.REMOVE_FROM_MARKET)\r\n  }\r\n\r\n  const continueToTransferStage = () => {\r\n    setStage(SellingStage.TRANSFER)\r\n  }\r\n\r\n  const dispatchSuccessAction = () => {\r\n    switch (stage) {\r\n      // Remove from sale\r\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.WALLET,\r\n          }),\r\n        )\r\n        break\r\n      // Transfer NFT\r\n      case SellingStage.CONFIRM_TRANSFER:\r\n        dispatch(\r\n          removeUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n          }),\r\n        )\r\n        break\r\n      default:\r\n        // Modify listing OR list for sale\r\n        dispatch(\r\n          updateUserNft({\r\n            tokenId: nftToSell.tokenId,\r\n            collectionAddress: nftToSell.collectionAddress,\r\n            location: NftLocation.FORSALE,\r\n          }),\r\n        )\r\n        break\r\n    }\r\n  }\r\n\r\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\r\n    onRequiresApproval: async () => {\r\n      try {\r\n        const approvedForContract = await collectionContract.isApprovedForAll(account, nftMarketContract.address)\r\n        return approvedForContract\r\n      } catch (error) {\r\n        return false\r\n      }\r\n    },\r\n    onApprove: () => {\r\n      return callWithGasPrice(collectionContract, 'setApprovalForAll', [nftMarketContract.address, true])\r\n    },\r\n    onApproveSuccess: async ({ receipt }) => {\r\n      toastSuccess(\r\n        t('Contract approved - you can now put your NFT for sale!'),\r\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\r\n      )\r\n    },\r\n    onConfirm: () => {\r\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\r\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\r\n      }\r\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\r\n        return callWithGasPrice(collectionContract, 'safeTransferFrom(address,address,uint256)', [\r\n          account,\r\n          transferAddress,\r\n          nftToSell.tokenId,\r\n        ])\r\n      }\r\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\r\n      const askPrice = parseUnits(price)\r\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\r\n    },\r\n    onSuccess: async ({ receipt }) => {\r\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      dispatchSuccessAction()\r\n      setConfirmedTxHash(receipt.transactionHash)\r\n      setStage(SellingStage.TX_CONFIRMED)\r\n    },\r\n  })\r\n\r\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\r\n\r\n  return (\r\n    <StyledModal\r\n      title={modalTitles(stage, t)}\r\n      stage={stage}\r\n      onDismiss={onDismiss}\r\n      onBack={showBackButton ? goBack : null}\r\n      headerBackground={theme.colors.gradients.cardHeader}\r\n    >\r\n      {stage === SellingStage.SELL && (\r\n        <SellStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          continueToTransferStage={continueToTransferStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.SET_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"set\"\r\n          continueToNextStage={continueToNextStage}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\r\n        <ApproveAndConfirmStage\r\n          variant=\"sell\"\r\n          isApproved={isApproved}\r\n          isApproving={isApproving}\r\n          isConfirming={isConfirming}\r\n          handleApprove={handleApprove}\r\n          handleConfirm={handleConfirm}\r\n        />\r\n      )}\r\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\r\n      {stage === SellingStage.EDIT && (\r\n        <EditStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToAdjustPriceStage={continueToNextStage}\r\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\r\n        />\r\n      )}\r\n      {stage === SellingStage.ADJUST_PRICE && (\r\n        <SetPriceStage\r\n          nftToSell={nftToSell}\r\n          variant=\"adjust\"\r\n          continueToNextStage={continueToNextStage}\r\n          currentPrice={nftToSell.marketData.currentAskPrice}\r\n          lowestPrice={lowestPrice}\r\n          price={price}\r\n          setPrice={setPrice}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\r\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n      {stage === SellingStage.TRANSFER && (\r\n        <TransferStage\r\n          nftToSell={nftToSell}\r\n          lowestPrice={lowestPrice}\r\n          continueToNextStage={continueToNextStage}\r\n          transferAddress={transferAddress}\r\n          setTransferAddress={setTransferAddress}\r\n          isInvalidTransferAddress={isInvalidTransferAddress}\r\n        />\r\n      )}\r\n      {stage === SellingStage.CONFIRM_TRANSFER && (\r\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\r\n      )}\r\n    </StyledModal>\r\n  )\r\n}\r\n\r\nexport default SellModal\r\n","import { useEffect, useMemo } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\r\nimport { useGetCollections, useUserNfts } from 'state/nftMarket/hooks'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nconst useFetchUserNfts = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { profile, isInitialized: isProfileInitialized, isLoading: isProfileLoading } = useProfile()\r\n  const { userNftsInitializationState } = useUserNfts()\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  const previousProfileNftTokenId = usePreviousValue(profileNftTokenId)\r\n\r\n  // Fetch on first load when profile fetch is resolved\r\n  const shouldFetch =\r\n    account &&\r\n    userNftsInitializationState === UserNftInitializationState.UNINITIALIZED &&\r\n    isProfileInitialized &&\r\n    !isProfileLoading\r\n\r\n  // Fetch on account / profile change, once profile fetch is resolved\r\n  const hasAccountSwitched = previousProfileNftTokenId !== profileNftTokenId && !isProfileLoading && account\r\n\r\n  useEffect(() => {\r\n    if ((shouldFetch || hasAccountSwitched) && !isEmpty(collections)) {\r\n      dispatch(fetchUserNfts({ account, collections, profileNftWithCollectionAddress }))\r\n    }\r\n  }, [\r\n    dispatch,\r\n    account,\r\n    shouldFetch,\r\n    hasAccountSwitched,\r\n    profileNftTokenId,\r\n    collections,\r\n    profileNftWithCollectionAddress,\r\n  ])\r\n}\r\n\r\nexport default useFetchUserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, Radio } from '@pancakeswap/uikit'\r\n\r\ninterface SelectionCardProps {\r\n  name: string\r\n  value: string | number\r\n  isChecked?: boolean\r\n  onChange: (val: any) => void\r\n  image: string\r\n  disabled?: boolean\r\n}\r\n\r\nconst Label = styled.label<{ isDisabled: boolean }>`\r\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\r\n`\r\n\r\nconst Body = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  height: 80px;\r\n  padding: 8px 16px;\r\n`\r\n\r\nconst Children = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nconst StyledBackgroundImage = styled.div<{ src: string }>`\r\n  align-self: stretch;\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: contain;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 80px;\r\n`\r\n\r\nconst SelectionCard: React.FC<SelectionCardProps> = ({\r\n  name,\r\n  value,\r\n  isChecked = false,\r\n  image,\r\n  onChange,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Card isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\r\n      <Label isDisabled={disabled}>\r\n        <Body>\r\n          <Radio\r\n            name={name}\r\n            checked={isChecked}\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            disabled={disabled}\r\n            style={{ flex: 'none' }}\r\n          />\r\n          <Children>{children}</Children>\r\n        </Body>\r\n        <StyledBackgroundImage src={image} />\r\n      </Label>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SelectionCard\r\n"],"sourceRoot":""}