{"version":3,"sources":["views/Teams/components/IconStatBox.tsx","views/Nft/market/Profile/components/EditProfileAvatar.tsx","views/Nft/market/Profile/components/ProfileHeader.tsx","views/Nft/market/Profile/components/TabMenu.tsx","views/Nft/market/Profile/components/Achievements/AchievementAvatar.tsx","views/Nft/market/Profile/components/Achievements/AchievementTitle.tsx","views/Nft/market/Profile/components/Achievements/AchievementDescription.tsx","views/Nft/market/Profile/components/Achievements/AchievementCard.tsx","views/Nft/market/Profile/components/Achievements/AchievementsList.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/PointsLabel.tsx","views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx","views/Nft/market/Profile/components/Achievements/ClaimPointsCallout.tsx","views/Nft/market/Profile/components/Achievements/index.tsx","views/Nft/market/Profile/utils/sortUserActivity.tsx","views/Nft/market/Profile/components/ActivityHistory/index.tsx","views/Nft/market/Profile/components/SubMenu.tsx","views/Nft/market/Profile/components/UserNfts.tsx","views/Nft/market/Profile/ConnectedProfile.tsx","state/achievements/hooks.ts","views/Nft/market/Profile/hooks/useNftsForAddress.tsx","views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx","views/Nft/market/Profile/UnconnectedProfile.tsx","views/Nft/market/Profile/index.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx"],"names":["SecondaryCard","styled","Text","theme","colors","tertiary","defaultProps","p","IconStatBox","Icon","icon","title","subtitle","isDisabled","props","alignItems","width","mr","color","as","scale","textTransform","fontSize","bold","EditOverlay","div","StyledEditProfileAvatar","EditProfileAvatar","src","alt","useModal","EditProfileModal","onEditProfileModal","onClick","AvatarImage","StyledIconButton","IconButton","ProfileHeader","accountPath","profile","achievements","nftCollected","isAchievementsLoading","isNftLoading","isProfileLoading","t","useTranslation","account","useWeb3React","isConnectedAccount","toLowerCase","numNftCollected","formatNumber","numPoints","points","numAchievements","length","avatarImage","nft","image","thumbnail","BannerHeader","bannerImage","imagePath","teamId","getBannerImage","bannerAlt","avatar","display","target","href","getBscScanLink","MarketPageTitle","pb","username","truncateHash","description","flexDirection","mb","external","mt","to","StatBox","stat","Tab","button","$active","secondary","textSubtle","cardBorder","background","TabMenu","accountAddress","useParams","pathname","useLocation","useState","includes","achievementsActive","setIsAchievementsActive","useEffect","RouterLink","nftsBaseUrl","NoBadgePlaceholder","BunnyPlaceholderIcon","mediaQueries","sm","StyledAchievementAvatar","img","AchievementAvatar","badge","AchievementTitle","key","data","Description","attrs","md","AchievementDescription","Details","Flex","AchievementCard","achievement","toLocaleString","Grid","AchievementsList","isLoading","isMobile","useMatchBreakpoints","height","map","id","justifyContent","style","PointsLabel","localePoints","num","ActionColumn","StyledAchievementRow","Body","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","useToast","toastError","toastSuccess","callWithGasPrice","useCallWithGasPrice","handleCollectPoints","a","address","tx","wait","receipt","status","Toast","txHash","transactionHash","logError","px","endIcon","spin","disabled","variant","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","dispatch","useAppDispatch","useProfile","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","filter","prevClaimableAchievement","isActive","totalPointsToCollect","sumBy","Achievements","PrizeIcon","sortUserActivity","userActivity","askOrderHistory","buyTradeHistory","sellTradeHistory","transformTransactions","transactions","transaction","userSeller","seller","marketEvent","MarketEvent","SELL","BUY","timestamp","price","askPrice","otherParty","buyer","allActivity","askOrder","orderType","AskOrderType","CANCEL","MODIFY","NEW","getAskOrderEvent","sort","activityItem1","activityItem2","timestamp1","ethers","BigNumber","from","sub","toNumber","ActivityHistory","useTheme","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","sortedUserActivities","setSortedUserActivities","setIsLoading","useUserNfts","activity","bnbBusdPrice","useBNBBusdPrice","isXs","isSm","initializationState","UserNftInitializationState","INITIALIZED","isAddress","toLocaleLowerCase","fetchAddressActivity","getUserActivity","addressActivity","console","error","fetchUserActivity","fetchActivityNftMetadata","activityNftTokenIds","uniqBy","tokenId","collectionAddress","collection","getNftsFromDifferentCollectionsApi","nfts","max","Math","ceil","getMaxPages","slice","getActivitySlice","textAlign","TableLoader","nftMeta","find","metaNft","ActivityRow","isUserActivity","borderTop","pt","page","NoNftsImage","SubMenuComponent","ItemsConfig","label","BaseSubMenu","items","activeItem","UserNfts","userNftsInitializationState","location","clickedProfileNft","setClickedProfileNft","clickedSellNft","setClickedSellNft","ProfileNftModal","onPresentProfileNftModal","SellModal","nftToSell","onPresentSellModal","gridGap","gridTemplateColumns","marketData","isUserNft","NftLocation","PROFILE","WALLET","FORSALE","handleCollectibleClick","currentAskPrice","isTradable","parseFloat","nftLocation","collectionName","GridPlaceholder","TabMenuWrapper","Box","ConnectedProfile","useSelector","state","achievementFetchStatus","userNfts","fetchAchievements","useFetchAchievements","useFetchUserNfts","MarketPageHeader","position","AchievementFetchStatus","FETCHED","Page","minHeight","path","SubMenu","exact","useNftsForAddress","isProfileFetching","combinedNfts","setCombinedNfts","collections","useGetCollections","hasProfileNft","profileNftTokenId","toString","profileNftCollectionAddress","profileNftWithCollectionAddress","useMemo","getNfts","getCompleteAccountNftData","completeNftData","isEmpty","UnconnectedProfile","useProfileForAddress","profileHookState","isFetching","useAchievementsForAddress","isAchievementFetching","UnconnectedProfileNfts","NftProfile","isConnectedProfile","maxWidth","StatBoxItem","mx","fontWeight","invertedContrast","radii","card","isDark","GridPlaceholderItem","numItems","times","itemKey","borderColor","children","SubMenuItems","StyledBannerImage","BannerImage","bottom","left"],"mappings":"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","file":"static/js/17.028cece1.chunk.js","sourcesContent":["import React, { ElementType, ReactNode } from 'react'\r\nimport { Flex, Heading, Text, TextProps } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst SecondaryCard = styled(Text)`\r\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\r\n  border-radius: 16px;\r\n`\r\n\r\nSecondaryCard.defaultProps = {\r\n  p: '24px',\r\n}\r\n\r\ninterface IconStatBoxProps extends TextProps {\r\n  icon: ElementType\r\n  title: ReactNode\r\n  subtitle: ReactNode\r\n  isDisabled?: boolean\r\n}\r\n\r\nconst IconStatBox: React.FC<IconStatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\r\n  return (\r\n    <SecondaryCard {...props}>\r\n      <Flex alignItems=\"start\">\r\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\r\n        <div>\r\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\r\n            {title}\r\n          </Heading>\r\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\r\n            {subtitle}\r\n          </Text>\r\n        </div>\r\n      </Flex>\r\n    </SecondaryCard>\r\n  )\r\n}\r\n\r\nexport default IconStatBox\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useModal } from '@pancakeswap/uikit'\r\nimport AvatarImage from 'views/Nft/market/components/BannerHeader/AvatarImage'\r\nimport EditProfileModal from './EditProfileModal'\r\n\r\nconst EditOverlay = styled.div`\r\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\r\n  border-radius: 50%;\r\n  left: 0;\r\n  height: 100%;\r\n  opacity: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: opacity 300ms;\r\n  width: 100%;\r\n  z-index: 1;\r\n`\r\n\r\nconst StyledEditProfileAvatar = styled.div`\r\n  position: relative;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n\r\n    ${EditOverlay} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`\r\n\r\nconst EditProfileAvatar: React.FC<{ src: string; alt?: string }> = ({ src, alt }) => {\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  return (\r\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\r\n      <AvatarImage src={src} alt={alt} />\r\n      <EditOverlay />\r\n    </StyledEditProfileAvatar>\r\n  )\r\n}\r\n\r\nexport default EditProfileAvatar\r\n","import React from 'react'\r\nimport { Link as ReactRouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { Achievement, Profile } from 'state/types'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport EditProfileAvatar from './EditProfileAvatar'\r\nimport BannerHeader from '../../components/BannerHeader'\r\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\r\nimport MarketPageTitle from '../../components/MarketPageTitle'\r\nimport EditProfileModal from './EditProfileModal'\r\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\r\n\r\ninterface HeaderProps {\r\n  accountPath: string\r\n  profile: Profile\r\n  achievements: Achievement[]\r\n  nftCollected: number\r\n  isAchievementsLoading: boolean\r\n  isNftLoading: boolean\r\n  isProfileLoading: boolean\r\n}\r\n\r\nconst StyledIconButton = styled(IconButton)`\r\n  width: fit-content;\r\n`\r\n\r\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\r\nconst ProfileHeader: React.FC<HeaderProps> = ({\r\n  accountPath,\r\n  profile,\r\n  achievements,\r\n  nftCollected,\r\n  isAchievementsLoading,\r\n  isNftLoading,\r\n  isProfileLoading,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\r\n\r\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\r\n  const numNftCollected = !isNftLoading ? (nftCollected ? formatNumber(nftCollected, 0, 0) : '-') : null\r\n  const numPoints = !isProfileLoading ? (profile?.points ? formatNumber(profile.points, 0, 0) : '-') : null\r\n  const numAchievements = !isAchievementsLoading\r\n    ? achievements?.length\r\n      ? formatNumber(achievements.length, 0, 0)\r\n      : '-'\r\n    : null\r\n\r\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\r\n\r\n  const getBannerImage = () => {\r\n    const imagePath = '/images/teams'\r\n    if (profile) {\r\n      switch (profile.teamId) {\r\n        case 1:\r\n          return `${imagePath}/storm-banner.png`\r\n        case 2:\r\n          return `${imagePath}/flippers-banner.png`\r\n        case 3:\r\n          return `${imagePath}/cakers-banner.png`\r\n        default:\r\n          break\r\n      }\r\n    }\r\n    return `${imagePath}/no-team-banner.png`\r\n  }\r\n\r\n  const getAvatar = () => {\r\n    const getIconButtons = () => {\r\n      return (\r\n        // TODO: Share functionality once user profiles routed by ID\r\n        <Flex display=\"inline-flex\">\r\n          {accountPath && (\r\n            <StyledIconButton\r\n              target=\"_blank\"\r\n              as=\"a\"\r\n              href={getBscScanLink(accountPath, 'address')}\r\n              alt={t('View BscScan for user address')}\r\n            >\r\n              <BscScanIcon width=\"20px\" color=\"primary\" />\r\n            </StyledIconButton>\r\n          )}\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    const getImage = () => {\r\n      return (\r\n        <>\r\n          {profile && accountPath && isConnectedAccount ? (\r\n            <EditProfileAvatar src={avatarImage} alt={t('User profile picture')} />\r\n          ) : (\r\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\r\n          )}\r\n        </>\r\n      )\r\n    }\r\n    return (\r\n      <>\r\n        {getImage()}\r\n        {getIconButtons()}\r\n      </>\r\n    )\r\n  }\r\n\r\n  const getTitle = () => {\r\n    if (profile?.username) {\r\n      return `@${profile.username}`\r\n    }\r\n\r\n    if (accountPath) {\r\n      return truncateHash(accountPath, 5, 3)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  const renderDescription = () => {\r\n    const getActivateButton = () => {\r\n      if (!profile) {\r\n        return (\r\n          <ReactRouterLink to=\"/create-profile\">\r\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\r\n          </ReactRouterLink>\r\n        )\r\n      }\r\n      return (\r\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\r\n          {t('Reactivate Profile')}\r\n        </Button>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\r\n        {accountPath && profile?.username && (\r\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\r\n            {truncateHash(accountPath)}\r\n          </Link>\r\n        )}\r\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\r\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\r\n        <StatBox>\r\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\r\n          <StatBoxItem title={t('Points')} stat={numPoints} />\r\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\r\n        </StatBox>\r\n      </MarketPageTitle>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProfileHeader\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Link as RouterLink, useLocation, useParams } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst Tab = styled.button<{ $active: boolean }>`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  color: ${({ theme, $active }) => ($active ? theme.colors.secondary : theme.colors.textSubtle)};\r\n  border-width: ${({ $active }) => ($active ? '1px 1px 0 1px' : '0')};\r\n  border-style: solid solid none solid;\r\n  border-color: ${({ theme }) =>\r\n    `${theme.colors.cardBorder} ${theme.colors.cardBorder} transparent ${theme.colors.cardBorder}`};\r\n  outline: 0;\r\n  padding: 12px 16px;\r\n  border-radius: 16px 16px 0 0;\r\n  font-size: 16px;\r\n  font-weight: ${({ $active }) => ($active ? '600' : '400')};\r\n  background-color: ${({ theme, $active }) => ($active ? theme.colors.background : 'transparent')};\r\n  transition: background-color 0.3s ease-out;\r\n`\r\n\r\nconst TabMenu = () => {\r\n  const { t } = useTranslation()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { pathname } = useLocation()\r\n  const [achievementsActive, setIsAchievementsActive] = useState(pathname.includes('achievements'))\r\n\r\n  useEffect(() => {\r\n    setIsAchievementsActive(pathname.includes('achievements'))\r\n  }, [pathname])\r\n\r\n  return (\r\n    <Flex>\r\n      <Tab\r\n        onClick={() => setIsAchievementsActive(false)}\r\n        $active={!achievementsActive}\r\n        as={RouterLink}\r\n        to={`${nftsBaseUrl}/profile/${accountAddress}`}\r\n      >\r\n        NFTs\r\n      </Tab>\r\n      <Tab\r\n        onClick={() => setIsAchievementsActive(true)}\r\n        $active={achievementsActive}\r\n        as={RouterLink}\r\n        to={`${nftsBaseUrl}/profile/${accountAddress}/achievements`}\r\n      >\r\n        {t('Achievements')}\r\n      </Tab>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TabMenu\r\n","import React, { ImgHTMLAttributes } from 'react'\r\nimport styled from 'styled-components'\r\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\r\n\r\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\r\n  badge?: string\r\n}\r\n\r\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\r\n  height: 48px;\r\n  width: 48px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 64px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst StyledAchievementAvatar = styled.img`\r\n  height: 48px;\r\n  width: 48px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 64px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\r\n  if (!badge) {\r\n    return <NoBadgePlaceholder />\r\n  }\r\n\r\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\r\n}\r\n\r\nexport default AchievementAvatar\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { TranslatableText as AchievementTitleType } from 'config/constants/types'\r\n\r\ninterface AchievementTitleProps extends TextProps {\r\n  title: AchievementTitleType\r\n}\r\n\r\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (typeof title === 'string') {\r\n    return (\r\n      <Text bold {...props}>\r\n        {title}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  const { key, data = {} } = title\r\n\r\n  return (\r\n    <Text bold {...props}>\r\n      {t(key, data)}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default AchievementTitle\r\n","import React from 'react'\r\nimport { Text, TextProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { TranslatableText as AchievementDescriptionType } from 'config/constants/types'\r\nimport styled from 'styled-components'\r\n\r\ninterface AchievementDescriptionProps extends TextProps {\r\n  description?: AchievementDescriptionType\r\n}\r\n\r\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (!description) {\r\n    return null\r\n  }\r\n\r\n  if (typeof description === 'string') {\r\n    return (\r\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\r\n        {description}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  const { key, data = {} } = description\r\n\r\n  return (\r\n    <Description color=\"textSubtle\" {...props}>\r\n      {t(key, data)}\r\n    </Description>\r\n  )\r\n}\r\n\r\nexport default AchievementDescription\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\r\nimport { Achievement } from 'state/types'\r\nimport AchievementAvatar from './AchievementAvatar'\r\nimport AchievementTitle from './AchievementTitle'\r\nimport AchievementDescription from './AchievementDescription'\r\n\r\ninterface AchievementCardProps {\r\n  achievement: Achievement\r\n}\r\n\r\nconst Details = styled(Flex)`\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n`\r\n\r\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\r\n  return (\r\n    <Flex>\r\n      <AchievementAvatar badge={achievement.badge} />\r\n      <Details>\r\n        <AchievementTitle title={achievement.title} />\r\n        <AchievementDescription description={achievement.description} />\r\n      </Details>\r\n      <Flex alignItems=\"center\">\r\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\r\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default AchievementCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Heading, Skeleton, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Achievement } from 'state/types'\r\nimport AchievementCard from './AchievementCard'\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-gap: 16px;\r\n  grid-template-columns: 1fr;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`\r\n\r\nconst AchievementsList: React.FC<{ achievements: Achievement[]; isLoading: boolean }> = ({\r\n  achievements,\r\n  isLoading,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { isMobile } = useMatchBreakpoints()\r\n\r\n  if (isLoading) {\r\n    if (isMobile) {\r\n      return <Skeleton width=\"100%\" height=\"64px\" />\r\n    }\r\n    return <Skeleton width=\"540px\" height=\"64px\" />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        {achievements.map((achievement) => (\r\n          <AchievementCard key={achievement.id} achievement={achievement} />\r\n        ))}\r\n      </Grid>\r\n      {achievements.length === 0 && (\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\r\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\r\n            {t('No achievements yet!')}\r\n          </Heading>\r\n        </Flex>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AchievementsList\r\n","import React from 'react'\r\nimport { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface PointsLabelProps extends FlexProps {\r\n  points: number\r\n}\r\n\r\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const localePoints = points.toLocaleString()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" {...props}>\r\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\r\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default PointsLabel\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\r\nimport { Achievement } from 'state/types'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePointCenterIfoContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { ToastDescriptionWithTx } from 'components/Toast'\r\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\r\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\r\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\r\nimport { logError } from 'utils/sentry'\r\nimport PointsLabel from './PointsLabel'\r\n\r\ninterface AchievementRowProps {\r\n  achievement: Achievement\r\n  onCollectSuccess?: (achievement: Achievement) => void\r\n}\r\n\r\nconst ActionColumn = styled.div`\r\n  flex: none;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    max-width: 160px;\r\n\r\n    & > button {\r\n      width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledAchievementRow = styled(Flex)`\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding-bottom: 16px;\r\n  padding-top: 16px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nconst Body = styled(Flex)`\r\n  flex-direction: column;\r\n  flex: 1;\r\n  margin-left: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    align-items: center;\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\r\n  const [isCollecting, setIsCollecting] = useState(false)\r\n  const { t } = useTranslation()\r\n  const pointCenterContract = usePointCenterIfoContract()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n\r\n  const handleCollectPoints = async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\r\n      setIsCollecting(true)\r\n      const receipt = await tx.wait()\r\n      if (receipt.status) {\r\n        onCollectSuccess(achievement)\r\n        toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\r\n      } else {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    } catch (error) {\r\n      logError(error)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsCollecting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledAchievementRow>\r\n      <AchievementAvatar badge={achievement.badge} />\r\n      <Body>\r\n        <Details>\r\n          <AchievementTitle title={achievement.title} />\r\n          <AchievementDescription description={achievement.description} />\r\n        </Details>\r\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\r\n        <ActionColumn>\r\n          <Button\r\n            onClick={handleCollectPoints}\r\n            isLoading={isCollecting}\r\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n            disabled={isCollecting}\r\n            variant=\"secondary\"\r\n          >\r\n            {t('Collect')}\r\n          </Button>\r\n        </ActionColumn>\r\n      </Body>\r\n    </StyledAchievementRow>\r\n  )\r\n}\r\n\r\nexport default AchievementRow\r\n","import React, { useEffect, useState } from 'react'\r\nimport { sumBy } from 'lodash'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { Achievement } from 'state/types'\r\nimport { addPoints } from 'state/profile'\r\nimport { addAchievement } from 'state/achievements'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getClaimableIfoData } from 'utils/achievements'\r\nimport AchievementRow from './AchievementRow'\r\n\r\nconst ClaimPointsCallout = () => {\r\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { profile } = useProfile()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchIfoClaims = async () => {\r\n      const ifoData = await getClaimableIfoData(account)\r\n      setClaimableAchievement(ifoData)\r\n    }\r\n\r\n    if (account) {\r\n      fetchIfoClaims()\r\n    }\r\n  }, [account, dispatch, setClaimableAchievement])\r\n\r\n  const handleCollectSuccess = (achievement: Achievement) => {\r\n    dispatch(addAchievement(achievement))\r\n    dispatch(addPoints(achievement.points))\r\n\r\n    setClaimableAchievement((prevClaimableAchievements) =>\r\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\r\n    )\r\n  }\r\n\r\n  if (!profile?.isActive) {\r\n    return null\r\n  }\r\n\r\n  if (claimableAchievements.length === 0) {\r\n    return null\r\n  }\r\n\r\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\r\n\r\n  return (\r\n    <Card isActive mb=\"32px\">\r\n      <CardHeader>\r\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\r\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\r\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\r\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\r\n          </Flex>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody>\r\n        {claimableAchievements.map((achievement) => (\r\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\r\n        ))}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ClaimPointsCallout\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, PrizeIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport IconStatBox from 'views/Teams/components/IconStatBox'\r\nimport { Achievement } from 'state/types'\r\nimport AchievementsList from './AchievementsList'\r\nimport ClaimPointsCallout from './ClaimPointsCallout'\r\n\r\nconst Achievements: React.FC<{ achievements: Achievement[]; isLoading: boolean; points?: number }> = ({\r\n  achievements,\r\n  isLoading,\r\n  points = 0,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <IconStatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\r\n        <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\r\n          {t('Achievements')}\r\n        </Heading>\r\n        <ClaimPointsCallout />\r\n        <AchievementsList achievements={achievements} isLoading={isLoading} />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Achievements\r\n","import { ethers } from 'ethers'\r\nimport { Activity, AskOrder, AskOrderType, MarketEvent, Transaction } from 'state/nftMarket/types'\r\n\r\nexport const sortUserActivity = (\r\n  account: string,\r\n  userActivity: { askOrderHistory: AskOrder[]; buyTradeHistory: Transaction[]; sellTradeHistory: Transaction[] },\r\n): Activity[] => {\r\n  const { askOrderHistory, buyTradeHistory, sellTradeHistory } = userActivity\r\n\r\n  const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\r\n    switch (orderType) {\r\n      case AskOrderType.CANCEL:\r\n        return MarketEvent.CANCEL\r\n      case AskOrderType.MODIFY:\r\n        return MarketEvent.MODIFY\r\n      case AskOrderType.NEW:\r\n        return MarketEvent.NEW\r\n      default:\r\n        return MarketEvent.MODIFY\r\n    }\r\n  }\r\n\r\n  const transformTransactions = (transactions: Transaction[]): Activity[] => {\r\n    const transformedTransactions = transactions.map((transaction) => {\r\n      const userSeller = transaction.seller.id === account.toLowerCase()\r\n      const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\r\n      const { timestamp, nft } = transaction\r\n      const price = transaction.askPrice\r\n      const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\r\n      const tx = transaction.id\r\n      return { marketEvent, price, otherParty, timestamp, nft, tx }\r\n    })\r\n\r\n    return transformedTransactions\r\n  }\r\n\r\n  const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\r\n    const transformedAskOrders = askOrders.map((askOrder) => {\r\n      const marketEvent = getAskOrderEvent(askOrder.orderType)\r\n      const { timestamp, nft } = askOrder\r\n      const price = askOrder.askPrice\r\n      const tx = askOrder.id\r\n      return { marketEvent, price, timestamp, nft, tx }\r\n    })\r\n\r\n    return transformedAskOrders\r\n  }\r\n\r\n  const allActivity = [\r\n    ...transformAskOrders(askOrderHistory),\r\n    ...transformTransactions(buyTradeHistory),\r\n    ...transformTransactions(sellTradeHistory),\r\n  ]\r\n  if (allActivity.length > 0) {\r\n    const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\r\n      const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\r\n      const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\r\n      return timestamp2.sub(timestamp1).toNumber()\r\n    })\r\n\r\n    return sortedByMostRecent\r\n  }\r\n  return []\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { uniqBy } from 'lodash'\r\nimport { isAddress } from 'utils'\r\nimport { fetchUserActivity } from 'state/nftMarket/reducer'\r\nimport { useAppDispatch } from 'state'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { ArrowBackIcon, ArrowForwardIcon, Card, Flex, Table, Text, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { getNftsFromDifferentCollectionsApi, getUserActivity } from 'state/nftMarket/helpers'\r\nimport { Activity, NftToken, TokenIdWithCollectionAddress, UserNftInitializationState } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TableLoader from 'components/TableLoader'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useParams } from 'react-router'\r\nimport { sortUserActivity } from '../../utils/sortUserActivity'\r\nimport NoNftsImage from '../../../components/Activity/NoNftsImage'\r\nimport { Arrow, PageButtons } from '../../../components/PaginationButtons'\r\nimport ActivityRow from '../../../components/Activity/ActivityRow'\r\n\r\nconst MAX_PER_PAGE = 8\r\n\r\nconst ActivityHistory = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { theme } = useTheme()\r\n  const { t } = useTranslation()\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [maxPage, setMaxPages] = useState(1)\r\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\r\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\r\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const { activity: userActivity } = useUserNfts()\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const { isXs, isSm } = useMatchBreakpoints()\r\n\r\n  useEffect(() => {\r\n    if (account && userActivity.initializationState === UserNftInitializationState.INITIALIZED) {\r\n      const differentAddress =\r\n        accountAddress && isAddress(accountAddress)\r\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\r\n          : false\r\n      if (!differentAddress) {\r\n        setSortedUserActivities(sortUserActivity(account, userActivity))\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n  }, [account, userActivity, accountAddress])\r\n\r\n  useEffect(() => {\r\n    const fetchAddressActivity = async () => {\r\n      try {\r\n        const addressActivity = await getUserActivity(accountAddress.toLocaleLowerCase())\r\n        setSortedUserActivities(sortUserActivity(accountAddress, addressActivity))\r\n        setIsLoading(false)\r\n      } catch (error) {\r\n        console.error('Failed to fetch address activity', error)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      const differentAddress =\r\n        accountAddress && isAddress(accountAddress)\r\n          ? account.toLowerCase() !== accountAddress.toLocaleLowerCase()\r\n          : false\r\n      if (differentAddress) {\r\n        fetchAddressActivity()\r\n      } else {\r\n        dispatch(fetchUserActivity(account))\r\n      }\r\n    } else if (accountAddress && isAddress(accountAddress)) {\r\n      fetchAddressActivity()\r\n    }\r\n  }, [account, accountAddress, dispatch])\r\n\r\n  useEffect(() => {\r\n    const fetchActivityNftMetadata = async () => {\r\n      const activityNftTokenIds = uniqBy(\r\n        sortedUserActivities.map((activity): TokenIdWithCollectionAddress => {\r\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\r\n        }),\r\n        'tokenId',\r\n      )\r\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\r\n      setNftMetadata(nfts)\r\n    }\r\n\r\n    const getMaxPages = () => {\r\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\r\n      setMaxPages(max)\r\n    }\r\n\r\n    if (sortedUserActivities.length > 0) {\r\n      getMaxPages()\r\n      fetchActivityNftMetadata()\r\n    }\r\n\r\n    return () => {\r\n      setActivitiesSlice([])\r\n      setNftMetadata([])\r\n      setMaxPages(1)\r\n      setCurrentPage(1)\r\n    }\r\n  }, [sortedUserActivities])\r\n\r\n  useEffect(() => {\r\n    const getActivitySlice = () => {\r\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\r\n      setActivitiesSlice(slice)\r\n    }\r\n    if (sortedUserActivities.length > 0) {\r\n      getActivitySlice()\r\n    }\r\n  }, [sortedUserActivities, currentPage])\r\n\r\n  return (\r\n    <Card>\r\n      {sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && !isLoading ? (\r\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n          <NoNftsImage />\r\n          <Text pt=\"8px\" bold>\r\n            {t('No NFT market history found')}\r\n          </Text>\r\n        </Flex>\r\n      ) : (\r\n        <>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\r\n                <Th textAlign=\"right\"> {t('Event')}</Th>\r\n                {isXs || isSm ? null : (\r\n                  <>\r\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\r\n                    <Th textAlign=\"center\"> {t('From/To')}</Th>\r\n                  </>\r\n                )}\r\n                <Th textAlign=\"center\"> {t('Date')}</Th>\r\n                {isXs || isSm ? null : <Th />}\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {isLoading ? (\r\n                <TableLoader />\r\n              ) : (\r\n                activitiesSlice.map((activity) => {\r\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\r\n                  return (\r\n                    <ActivityRow\r\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\r\n                      activity={activity}\r\n                      nft={nftMeta}\r\n                      bnbBusdPrice={bnbBusdPrice}\r\n                      isUserActivity\r\n                    />\r\n                  )\r\n                })\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n          <Flex\r\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\r\n            pt=\"24px\"\r\n            flexDirection=\"column\"\r\n            justifyContent=\"space-between\"\r\n            height=\"100%\"\r\n          >\r\n            <PageButtons>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\r\n                }}\r\n              >\r\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\r\n              <Arrow\r\n                onClick={() => {\r\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\r\n                }}\r\n              >\r\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\r\n              </Arrow>\r\n            </PageButtons>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ActivityHistory\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport BaseSubMenu from '../../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../../constants'\r\n\r\nconst SubMenuComponent: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { pathname } = useLocation()\r\n\r\n  const ItemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/profile/${accountAddress}`,\r\n    },\r\n    {\r\n      label: t('Activity'),\r\n      href: `${nftsBaseUrl}/profile/${accountAddress}/activity`,\r\n    },\r\n  ]\r\n\r\n  return <BaseSubMenu items={ItemsConfig} activeItem={pathname} justifyContent=\"flex-start\" mb=\"60px\" />\r\n}\r\n\r\nexport default SubMenuComponent\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport ProfileNftModal from '../../components/ProfileNftModal'\r\nimport NoNftsImage from '../../components/Activity/NoNftsImage'\r\nimport SellModal from '../../components/BuySellModals/SellModal'\r\n\r\ninterface ProfileNftProps {\r\n  nft: NftToken\r\n  location: NftLocation\r\n}\r\n\r\ninterface SellNftProps {\r\n  nft: NftToken\r\n  location: NftLocation\r\n  variant: 'sell' | 'edit'\r\n}\r\n\r\nconst UserNfts = () => {\r\n  const { nfts, userNftsInitializationState } = useUserNfts()\r\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\r\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\r\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\r\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\r\n  const { t } = useTranslation()\r\n\r\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\r\n    switch (location) {\r\n      case NftLocation.PROFILE:\r\n        setClickedProfileNft({ nft, location })\r\n        break\r\n      case NftLocation.WALLET:\r\n        setClickedSellNft({ nft, location, variant: 'sell' })\r\n        break\r\n      case NftLocation.FORSALE:\r\n        setClickedSellNft({ nft, location, variant: 'edit' })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (clickedProfileNft.nft) {\r\n      onPresentProfileNftModal()\r\n    }\r\n    // exhaustive deps disabled as the useModal dep causes re-render loop\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [clickedProfileNft])\r\n\r\n  useEffect(() => {\r\n    if (clickedSellNft.nft) {\r\n      onPresentSellModal()\r\n    }\r\n    // exhaustive deps disabled as the useModal dep causes re-render loop\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [clickedSellNft])\r\n\r\n  return (\r\n    <>\r\n      {/* User has no NFTs */}\r\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\r\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n          <NoNftsImage />\r\n          <Text pt=\"8px\" bold>\r\n            {t('No NFTs found')}\r\n          </Text>\r\n        </Flex>\r\n      ) : // User has NFTs and data has been fetched\r\n      nfts.length > 0 ? (\r\n        <Grid\r\n          gridGap=\"16px\"\r\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n          alignItems=\"start\"\r\n        >\r\n          {nfts.map((nft) => {\r\n            const { marketData, location } = nft\r\n\r\n            return (\r\n              <CollectibleActionCard\r\n                isUserNft\r\n                onClick={() => handleCollectibleClick(nft, location)}\r\n                key={`${nft.tokenId}-${nft.collectionName}`}\r\n                nft={nft}\r\n                currentAskPrice={\r\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\r\n                }\r\n                nftLocation={location}\r\n              />\r\n            )\r\n          })}\r\n        </Grid>\r\n      ) : (\r\n        // User NFT data hasn't been fetched\r\n        <GridPlaceholder />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useProfile } from 'state/profile/hooks'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport { Route } from 'react-router'\r\nimport { useUserNfts } from 'state/nftMarket/hooks'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport { useAchievements, useFetchAchievements } from 'state/achievements/hooks'\r\nimport { AchievementFetchStatus } from 'state/types'\r\nimport { UserNftInitializationState } from 'state/nftMarket/types'\r\nimport useFetchUserNfts from './hooks/useFetchUserNfts'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport ProfileHeader from './components/ProfileHeader'\r\nimport TabMenu from './components/TabMenu'\r\nimport Achievements from './components/Achievements'\r\nimport ActivityHistory from './components/ActivityHistory'\r\nimport SubMenu from './components/SubMenu'\r\nimport UserNfts from './components/UserNfts'\r\n\r\nconst TabMenuWrapper = styled(Box)`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translate(-50%, 0%);\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    left: auto;\r\n    transform: none;\r\n  }\r\n`\r\n\r\nconst ConnectedProfile = () => {\r\n  const { profile, isLoading: isProfileLoading } = useProfile()\r\n  const { achievements, achievementFetchStatus } = useAchievements()\r\n  const { account } = useWeb3React()\r\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\r\n\r\n  useFetchAchievements()\r\n  useFetchUserNfts()\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader position=\"relative\">\r\n        <ProfileHeader\r\n          accountPath={account}\r\n          profile={profile}\r\n          achievements={achievements}\r\n          nftCollected={userNfts.length}\r\n          isProfileLoading={isProfileLoading}\r\n          isNftLoading={userNftsInitializationState !== UserNftInitializationState.INITIALIZED}\r\n          isAchievementsLoading={achievementFetchStatus !== AchievementFetchStatus.FETCHED}\r\n        />\r\n        <TabMenuWrapper>\r\n          <TabMenu />\r\n        </TabMenuWrapper>\r\n      </MarketPageHeader>\r\n      <Page style={{ minHeight: 'auto' }}>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\r\n          <Achievements\r\n            achievements={achievements}\r\n            isLoading={achievementFetchStatus !== AchievementFetchStatus.FETCHED}\r\n            points={profile?.points}\r\n          />\r\n        </Route>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\r\n          <SubMenu />\r\n          <ActivityHistory />\r\n        </Route>\r\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\r\n          <SubMenu />\r\n          <UserNfts />\r\n        </Route>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ConnectedProfile\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { State, AchievementState } from '../types'\r\nimport { fetchAchievements } from '.'\r\n\r\nexport const useFetchAchievements = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchAchievements(account))\r\n    }\r\n  }, [account, dispatch])\r\n}\r\n\r\nexport const useAchievements = () => {\r\n  const achievements: AchievementState = useSelector((state: State) => state.achievements)\r\n  return achievements\r\n}\r\n","import { useEffect, useMemo, useState } from 'react'\r\nimport isEmpty from 'lodash/isEmpty'\r\nimport { useGetCollections } from 'state/nftMarket/hooks'\r\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\r\nimport { Profile } from 'state/types'\r\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\r\n\r\nconst useNftsForAddress = (account: string, profile: Profile, isProfileFetching: boolean) => {\r\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const collections = useGetCollections()\r\n\r\n  const hasProfileNft = profile?.tokenId\r\n  const profileNftTokenId = profile?.tokenId?.toString()\r\n  const profileNftCollectionAddress = profile?.collectionAddress\r\n\r\n  const profileNftWithCollectionAddress = useMemo(() => {\r\n    if (hasProfileNft) {\r\n      return {\r\n        tokenId: profileNftTokenId,\r\n        collectionAddress: profileNftCollectionAddress,\r\n        nftLocation: NftLocation.PROFILE,\r\n      }\r\n    }\r\n    return null\r\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\r\n\r\n  useEffect(() => {\r\n    const getNfts = async () => {\r\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\r\n      setCombinedNfts(completeNftData)\r\n      setIsLoading(false)\r\n    }\r\n\r\n    if (!isProfileFetching && !isEmpty(collections)) {\r\n      setIsLoading(true)\r\n      getNfts()\r\n    }\r\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\r\n\r\n  return { nfts: combinedNfts, isLoading }\r\n}\r\n\r\nexport default useNftsForAddress\r\n","import React from 'react'\r\nimport { Grid, Text, Flex } from '@pancakeswap/uikit'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\r\nimport GridPlaceholder from '../../components/GridPlaceholder'\r\nimport NoNftsImage from '../../components/Activity/NoNftsImage'\r\n\r\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <>\r\n      {/* User has no NFTs */}\r\n      {nfts.length === 0 && !isLoading ? (\r\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n          <NoNftsImage />\r\n          <Text pt=\"8px\" bold>\r\n            {t('No NFTs found')}\r\n          </Text>\r\n        </Flex>\r\n      ) : // User has NFTs and data has been fetched\r\n      nfts.length > 0 ? (\r\n        <Grid\r\n          gridGap=\"16px\"\r\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\r\n          alignItems=\"start\"\r\n        >\r\n          {nfts.map((nft) => {\r\n            const { marketData } = nft\r\n\r\n            return (\r\n              <CollectibleLinkCard\r\n                key={`${nft.tokenId}-${nft.collectionName}`}\r\n                nft={nft}\r\n                currentAskPrice={\r\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\r\n                }\r\n              />\r\n            )\r\n          })}\r\n        </Grid>\r\n      ) : (\r\n        // User NFT data hasn't been fetched\r\n        <GridPlaceholder />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserNfts\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useAchievementsForAddress, useProfileForAddress } from 'state/profile/hooks'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport { Route, useParams } from 'react-router'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport ProfileHeader from './components/ProfileHeader'\r\nimport TabMenu from './components/TabMenu'\r\nimport Achievements from './components/Achievements'\r\nimport ActivityHistory from './components/ActivityHistory'\r\nimport SubMenu from './components/SubMenu'\r\nimport useNftsForAddress from './hooks/useNftsForAddress'\r\nimport UnconnectedProfileNfts from './components/UnconnectedProfileNfts'\r\n\r\nconst TabMenuWrapper = styled(Box)`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translate(-50%, 0%);\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    left: auto;\r\n    transform: none;\r\n  }\r\n`\r\n\r\nconst UnconnectedProfile = () => {\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { profile: profileHookState, isFetching: isProfileFetching } = useProfileForAddress(accountAddress)\r\n  const { profile } = profileHookState || {}\r\n  const { achievements, isFetching: isAchievementFetching } = useAchievementsForAddress(accountAddress)\r\n  const { nfts, isLoading: isNftLoading } = useNftsForAddress(accountAddress, profile, isProfileFetching)\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader position=\"relative\">\r\n        <ProfileHeader\r\n          accountPath={accountAddress}\r\n          profile={profile}\r\n          achievements={achievements}\r\n          nftCollected={nfts.length}\r\n          isProfileLoading={isProfileFetching}\r\n          isNftLoading={isNftLoading}\r\n          isAchievementsLoading={isAchievementFetching}\r\n        />\r\n        <TabMenuWrapper>\r\n          <TabMenu />\r\n        </TabMenuWrapper>\r\n      </MarketPageHeader>\r\n      <Page style={{ minHeight: 'auto' }}>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/achievements`}>\r\n          <Achievements achievements={achievements} isLoading={isAchievementFetching} points={profile?.points} />\r\n        </Route>\r\n        <Route path={`${nftsBaseUrl}/profile/:accountAddress/activity`}>\r\n          <SubMenu />\r\n          <ActivityHistory />\r\n        </Route>\r\n        <Route exact path={`${nftsBaseUrl}/profile/:accountAddress`}>\r\n          <SubMenu />\r\n          <UnconnectedProfileNfts nfts={nfts} isLoading={isNftLoading} />\r\n        </Route>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UnconnectedProfile\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useParams } from 'react-router'\r\nimport { isAddress } from 'utils'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport Page from 'components/Layout/Page'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ConnectedProfile from './ConnectedProfile'\r\nimport UnconnectedProfile from './UnconnectedProfile'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport ProfileHeader from './components/ProfileHeader'\r\nimport NoNftsImage from '../components/Activity/NoNftsImage'\r\n\r\nconst NftProfile = () => {\r\n  const { account } = useWeb3React()\r\n  const { accountAddress } = useParams<{ accountAddress: string }>()\r\n  const { t } = useTranslation()\r\n\r\n  const isConnectedProfile = account?.toLowerCase() === accountAddress?.toLowerCase()\r\n  const invalidAddress = !accountAddress || isAddress(accountAddress) === false\r\n\r\n  if (invalidAddress) {\r\n    return (\r\n      <>\r\n        <MarketPageHeader position=\"relative\">\r\n          <ProfileHeader\r\n            accountPath={accountAddress}\r\n            profile={null}\r\n            achievements={null}\r\n            nftCollected={null}\r\n            isAchievementsLoading={false}\r\n            isNftLoading={false}\r\n            isProfileLoading={false}\r\n          />\r\n        </MarketPageHeader>\r\n        <Page style={{ minHeight: 'auto' }}>\r\n          <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\r\n            <NoNftsImage />\r\n            <Text textAlign=\"center\" maxWidth=\"420px\" pt=\"8px\" bold>\r\n              {t('Please enter a valid address, or connect your wallet to view your profile')}\r\n            </Text>\r\n          </Flex>\r\n        </Page>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return <>{isConnectedProfile ? <ConnectedProfile /> : <UnconnectedProfile />}</>\r\n}\r\n\r\nexport default NftProfile\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","import React from 'react'\r\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\r\nimport times from 'lodash/times'\r\n\r\ninterface GridPlaceholderProps extends GridProps {\r\n  numItems?: number\r\n}\r\n\r\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\r\n  <Box {...props}>\r\n    <Skeleton height=\"258px\" mb=\"8px\" />\r\n    <Skeleton width=\"30%\" mb=\"4px\" />\r\n    <Skeleton width=\"45%\" mb=\"16px\" />\r\n    <Skeleton />\r\n  </Box>\r\n)\r\n\r\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\r\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\r\n    {times(numItems).map((itemKey) => (\r\n      <GridPlaceholderItem key={itemKey} />\r\n    ))}\r\n  </Grid>\r\n)\r\n\r\nexport default GridPlaceholder\r\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n"],"sourceRoot":""}