{"version":3,"sources":["../node_modules/lodash/sum.js","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx","views/Nft/market/hooks/useGetLowestPrice.ts","../node_modules/lodash/capitalize.js","../node_modules/lodash/_baseSum.js","components/CollapsibleCard/index.tsx","views/Nft/market/Collection/Traits/styles.tsx","views/Nft/market/Collection/Traits/PancakeBunniesTraits.tsx","views/Nft/market/Collection/Traits/utils.tsx","views/Nft/market/Collection/Traits/CollectionTraits.tsx","views/Nft/market/Collection/Traits/index.tsx","views/Nft/market/components/StatBox.tsx","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","../node_modules/lodash/_hasUnicode.js","views/Nft/market/components/BannerHeader/AvatarImage.tsx","../node_modules/lodash/upperFirst.js","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/components/CollectibleCard/styles.tsx","views/Nft/market/hooks/useGetCollectionDistribution.tsx","../node_modules/lodash/_createCaseFirst.js","../node_modules/lodash/_castSlice.js","../node_modules/lodash/_baseSlice.js","../node_modules/lodash/_stringToArray.js","../node_modules/lodash/_asciiToArray.js","../node_modules/lodash/_unicodeToArray.js"],"names":["baseSum","require","identity","module","exports","array","length","BackLink","styled","RouterLink","theme","colors","primary","TopBar","t","useTranslation","alignItems","justifyContent","mb","to","nftsBaseUrl","color","width","SearchBar","LowestPriceStatBoxItem","collectionAddress","props","useState","lowestPrice","setLowestPrice","useEffect","a","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","StatBox","title","symbol","stat","Header","collection","useParams","totalSupply","numberTokensListed","totalVolumeBNB","banner","avatar","useLocation","pathname","hash","volume","parseFloat","itemsConfig","label","href","MarketPageHeader","BannerHeader","bannerImage","large","AvatarImage","src","MarketPageTitle","name","description","formatNumber","Number","address","Container","BaseSubMenu","items","activeItem","mt","getBunnyIdFromNft","nft","bunnyId","attributes","find","attr","traitType","value","toString","useGetLowestPriceFromBunnyId","isFetching","setIsFetching","getNftsMarketData","otherId","isTradable","response","tokenMarketData","currentAskPrice","useGetLowestPriceFromNft","isPancakeBunny","toLowerCase","pancakeBunniesAddress","bunnyIdAttr","upperFirst","string","iteratee","result","index","current","CollapsibleCard","initialOpenState","children","isOpen","setIsOpen","p","as","variant","scale","onClick","StyledSortButton","button","secondary","TableWrapper","div","NftImage","Image","ClickableRow","tr","NftName","thumbnailSrc","height","mr","LowestPriceCell","amount","PancakeBunniesTraits","tokenApiResponse","setTokenApiResponse","raritySort","setRaritySort","push","useHistory","getNftsFromCollectionApi","apiResponse","fetchTokens","totalMinted","sum","Object","values","attributesDistribution","sortedBunnieKeys","useMemo","keys","data","sort","bunnyIdA","bunnyIdB","bunnyCountA","bunnyCountB","sortBunniesByRarityBuilder","textAlign","type","currentValue","map","count","percentage","image","thumbnail","times","bunnyCnt","CollectionTraits","useGetCollectionDistribution","total","traitValues","reduce","accum","traitValue","rarity","sortType","capitalize","prevRaritySort","orderBy","Traits","dispatch","useAppDispatch","useGetCollection","fetchCollection","py","StatBoxItem","fontSize","mx","fontWeight","Flex","invertedContrast","cardBorder","radii","card","ResultStatus","SubMenu","input","inputSecondary","default","AddressLink","Text","initialState","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","state","setState","isAddress","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","px","background","useTheme","isDark","reHasUnicode","RegExp","test","attrs","alt","borderColor","createCaseFirst","history","gridGap","gridTemplateColumns","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","bannerAlt","flexDirection","pb","BannerImage","bottom","left","BNBAmountLabel","CostLabel","cost","bnbBusdPrice","priceInUsd","multiplyPriceByAmount","MetaRow","maxWidth","ellipsis","StyledCollectibleCard","Card","lg","LowestPriceMetaRow","useGetCollectionDistributionPB","getCollectionDistributionApi","castSlice","hasUnicode","stringToArray","methodName","strSymbols","chr","charAt","trailing","join","slice","baseSlice","start","end","Array","asciiToArray","unicodeToArray","split","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","reUnicode","match"],"mappings":"iHAAA,IAAIA,EAAUC,EAAQ,MAClBC,EAAWD,EAAQ,KAsBvBE,EAAOC,QANP,SAAaC,GACX,OAAQA,GAASA,EAAMC,OACnBN,EAAQK,EAAOH,GACf,I,6LCZAK,EAAWC,YAAOC,IAAPD,CAAH,iHAEH,qBAAGE,MAAkBC,OAAOC,WAqBxBC,EAhBU,WACvB,IAAQC,EAAMC,cAAND,EAER,OACE,eAAC,KAAD,CAAME,WAAW,SAASC,eAAe,gBAAgBC,GAAG,OAA5D,UACE,eAACX,EAAD,CAAUY,GAAE,UAAKC,IAAL,gBAAZ,UACE,cAAC,IAAD,CAAiBC,MAAM,UAAUC,MAAM,SACtCR,EAAE,sBAEL,cAAC,IAAD,UACE,cAACS,EAAA,EAAD,U,8ECQOC,EAxBuD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,kBAAsBC,EAAY,iBACzG,EAAsCC,mBAAiB,MAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KACQf,EAAMC,cAAND,EAERgB,qBAAU,YACc,uCAAG,4BAAAC,EAAA,sEACaC,YAA2BP,GADxC,OACjBQ,EADiB,OAEvBJ,EAAeI,GAFQ,2CAAH,qDAKtBC,KACC,CAACT,EAAmBI,IAEvB,IAAMM,EACY,OAAhBP,EACI,KACAA,EAAYQ,oBAAeC,EAAW,CACpCC,sBAAuB,EACvBC,sBAAuB,IAG/B,OAAO,cAACC,EAAA,EAAD,aAAaC,MAAO3B,EAAE,oBAAqB,CAAE4B,OAAQ,QAAUC,KAAMR,GAA0BT,KC8CzFkB,IAvDuB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAC/BpB,EAAsBqB,cAAtBrB,kBACAsB,EAAoEF,EAApEE,YAAaC,EAAuDH,EAAvDG,mBAAoBC,EAAmCJ,EAAnCI,eAAgBC,EAAmBL,EAAnBK,OAAQC,EAAWN,EAAXM,OACzDrC,EAAMC,cAAND,EACR,EAA2BsC,cAAnBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,KAEZC,EAASN,EACXO,WAAWP,GAAgBb,oBAAeC,EAAW,CACnDC,sBAAuB,EACvBC,sBAAuB,IAEzB,IAEEkB,EAAc,CAClB,CACEC,MAAO5C,EAAE,SACT6C,KAAK,GAAD,OAAKvC,IAAL,wBAAgCK,EAAhC,WAEN,CACEiC,MAAO5C,EAAE,UACT6C,KAAK,GAAD,OAAKvC,IAAL,wBAAgCK,EAAhC,YAEN,CACEiC,MAAO5C,EAAE,YACT6C,KAAK,GAAD,OAAKvC,IAAL,wBAAgCK,EAAhC,eAIR,OACE,qCACE,eAACmC,EAAA,EAAD,WACE,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,CAAcC,YAAaZ,EAAOa,MAAOZ,OAAQ,cAACa,EAAA,EAAD,CAAaC,IAAKd,MACnE,cAACe,EAAA,EAAD,CACEzB,MAAOI,EAAWsB,KAClBC,YAAavB,EAAWuB,YAAc,cAAC,KAAD,CAAM/C,MAAM,aAAZ,SAA0BP,EAAE+B,EAAWuB,eAAuB,KAFtG,SAIE,eAAC5B,EAAA,EAAD,WACE,cAACA,EAAA,EAAD,CAAaC,MAAO3B,EAAE,SAAU6B,KAAM0B,YAAaC,OAAOvB,GAAc,EAAG,KAC3E,cAACP,EAAA,EAAD,CACEC,MAAO3B,EAAE,gBACT6B,KAAMK,EAAqBqB,YAAaC,OAAOtB,GAAqB,EAAG,GAAK,MAE9E,cAAC,EAAD,CAAwBvB,kBAAmBoB,EAAW0B,UACtD,cAAC/B,EAAA,EAAD,CAAaC,MAAO3B,EAAE,kBAAmB,CAAE4B,OAAQ,QAAUC,KAAMY,YAIzE,cAACiB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAaC,MAAOjB,EAAakB,WAAU,UAAKtB,GAAL,OAAgBC,GAAQ,UAAYsB,GAAG,OAAO1D,GAAG,e,iKC5D9F2D,EAAoB,SAACC,GAA2B,IAAD,IAC7CC,EAAO,UAAGD,EAAIE,kBAAP,iBAAG,EAAgBC,MAAK,SAACC,GAAD,MAA6B,YAAnBA,EAAKC,oBAAvC,aAAG,EAA8DC,MAC9E,OAAOL,EAAUA,EAAQM,WAAa,MAG3BC,EAA+B,SAACP,GAC3C,MAAoCpD,oBAAkB,GAAtD,mBAAO4D,EAAP,KAAmBC,EAAnB,KACA,EAAsC7D,mBAAiB,MAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KAsBA,OApBAC,qBAAU,WAeJiD,GAdkB,uCAAG,gCAAAhD,EAAA,sEAErByD,GAAc,GAFO,SAGEC,YAAkB,CAAEC,QAASX,EAASY,YAAY,GAAQ,EAAG,kBAAmB,OAHlF,QAGfC,EAHe,QAKRtF,OAAS,IAAI,EAAD,YACGsF,EADH,GAChBC,EADgB,KAEvBhE,EAAe2B,WAAWqC,EAAgBC,mBAPvB,uBAUrBN,GAAc,GAVO,uEAAH,oDAepBtD,KAED,CAAC6C,IAEG,CAAEQ,aAAY3D,gBAGVmE,EAA2B,SAACjB,GAAmC,IAAD,EACzE,EAAoCnD,oBAAkB,GAAtD,mBAAO4D,EAAP,KAAmBC,EAAnB,KACA,EAAsC7D,mBAAiB,MAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KACMmE,GAAiB,UAAAlB,EAAIrD,yBAAJ,eAAuBwE,iBAAkBC,IAAsBD,cA4BtF,OA1BAnE,qBAAU,WAqBJkE,GAAkBlB,GApBA,uCAAG,kCAAA/C,EAAA,6DACjBoE,EAActB,EAAkBC,GADf,SAGrBU,GAAc,GAHO,SAIEC,YACrB,CAAEC,QAASS,EAAaR,YAAY,GACpC,EACA,kBACA,OARmB,QAIfC,EAJe,QAWRtF,OAAS,IAAI,EAAD,YACGsF,EADH,GAChBC,EADgB,KAEvBhE,EAAe2B,WAAWqC,EAAgBC,mBAbvB,uBAgBrBN,GAAc,GAhBO,yEAAH,oDAqBpBtD,KAED,CAAC8D,EAAgBlB,IAEb,CAAES,aAAY3D,iB,qBCzEvB,IAAIyD,EAAWpF,EAAQ,KACnBmG,EAAanG,EAAQ,KAqBzBE,EAAOC,QAJP,SAAoBiG,GAClB,OAAOD,EAAWf,EAASgB,GAAQJ,iB,mBCIrC9F,EAAOC,QAdP,SAAiBC,EAAOiG,GAKtB,IAJA,IAAIC,EACAC,GAAS,EACTlG,EAASD,EAAMC,SAEVkG,EAAQlG,GAAQ,CACvB,IAAImG,EAAUH,EAASjG,EAAMmG,SACbnE,IAAZoE,IACFF,OAAoBlE,IAAXkE,EAAuBE,EAAWF,EAASE,GAGxD,OAAOF,I,oRCiBMG,EApByC,SAAC,GAA4D,IAAD,IAAzDC,wBAAyD,SAAhClE,EAAgC,EAAhCA,MAAOmE,EAAyB,EAAzBA,SAAalF,EAAY,iBAClH,EAA4BC,mBAASgF,GAArC,mBAAOE,EAAP,KAAeC,EAAf,KAIA,OACE,eAAC,IAAD,2BAAUpF,GAAV,cACE,cAAC,IAAD,CAAYqF,EAAE,OAAd,SACE,eAAC,KAAD,CAAM/F,WAAW,SAASC,eAAe,gBAAzC,UACE,cAAC,KAAD,CAAS+F,GAAG,KAAZ,SAAkBvE,IAClB,cAAC,KAAD,CAAYwE,QAAQ,OAAOC,MAAM,KAAKC,QAP3B,kBAAML,GAAWD,IAO5B,SACGA,EAAS,cAAC,IAAD,CAAevF,MAAM,SAAY,cAAC,IAAD,CAAiBA,MAAM,gBAIvEuF,GAAUD,O,0CC5BJQ,EAAmB5G,IAAO6G,OAAV,2HAIlB,qBAAG3G,MAAkBC,OAAO2G,aAI1BC,EAAe/G,IAAOgH,IAAV,4GAMZC,EAAWjH,YAAOkH,KAAPlH,CAAH,sFAORmH,EAAenH,IAAOoH,GAAV,2GAUZC,EAA4D,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAc3D,EAAjB,EAAiBA,KAAjB,OACvE,eAAC,KAAD,CAAMnD,WAAW,SAAjB,UACE,cAACyG,EAAD,CAAUxD,IAAK6D,EAAcxG,MAAO,GAAIyG,OAAQ,GAAIC,GAAG,QACvD,cAAC,KAAD,UAAO7D,QCjBL8D,EAAiD,SAAC,GAAiB,IAAflD,EAAc,EAAdA,QACxD,EAAoCO,YAA6BP,GAAzDQ,EAAR,EAAQA,WAAY3D,EAApB,EAAoBA,YAEpB,OAAI2D,EAEA,cAAC,KAAD,CAAMtE,eAAe,WAAWK,MAAM,QAAtC,SACE,cAAC,KAAD,CAAUyG,OAAO,OAAOzG,MAAM,WAK/BM,EAIE,cAAC,IAAD,CAAgBX,eAAe,WAAWiH,OAAQtG,EAAaN,MAAM,UAHnE,MAwHI6G,EAlHmD,SAAC,GAA2B,IAAzB1G,EAAwB,EAAxBA,kBACnE,EAAgDE,mBAAsC,MAAtF,mBAAOyG,EAAP,KAAyBC,EAAzB,KACA,EAAoC1G,mBAAmB,OAAvD,mBAAO2G,EAAP,KAAmBC,EAAnB,KACQzH,EAAMC,cAAND,EACA0H,EAASC,cAATD,KAER1G,qBAAU,YACS,uCAAG,4BAAAC,EAAA,sEACQ2G,YAAyBjH,GADjC,OACZkH,EADY,OAElBN,EAAoBM,GAFF,2CAAH,qDAKjBC,KACC,CAACnH,EAAmB4G,IAEvB,IAAMQ,EAAcT,EAAmBU,IAAIC,OAAOC,OAAOZ,EAAiBa,yBAA2B,EAE/FC,EAAmBC,mBAAQ,WAC/B,OAAKf,EAEEW,OAAOK,KAAKhB,EAAiBiB,MAAMC,KCnD5C,SAAC,GAAD,IAAGhB,EAAH,EAAGA,WAAYe,EAAf,EAAeA,KAAf,OACA,SAACE,EAAUC,GAAc,IAAD,IAChBC,EAAW,UAAGJ,EAAKJ,uBAAuBM,UAA/B,QAA4C,EACvDG,EAAW,UAAGL,EAAKJ,uBAAuBO,UAA/B,QAA4C,EAE7D,MAAsB,QAAflB,EAAuBmB,EAAcC,EAAcA,EAAcD,GD8CzBE,CAA2B,CAAErB,aAAYe,KAAMjB,KAFhE,KAG7B,CAACE,EAAYF,IAMhB,OACE,mCACGA,EACC,cAAC,EAAD,CAAiB3F,MAAO3B,EAAE,YAA1B,SACE,cAACyG,EAAD,UACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIqC,UAAU,OAAd,SAAsB9I,EAAE,UACxB,cAAC,KAAD,UAAKA,EAAE,WACP,cAAC,KAAD,UACE,cAACsG,EAAD,CAAkByC,KAAK,SAAS1C,QAfzB,WACvBoB,GAAc,SAACuB,GAAD,MAAoC,QAAjBA,EAAyB,OAAS,UAcnD,SACE,eAAC,KAAD,CAAM9I,WAAW,SAAjB,UACGF,EAAE,UACa,QAAfwH,EAAuB,cAAC,IAAD,CAAajH,MAAM,cAAiB,cAAC,IAAD,CAAeA,MAAM,qBAIvF,cAAC,KAAD,CAAIuI,UAAU,QAAd,SAAuB9I,EAAE,iBAG7B,gCACGoI,EAAiBa,KAAI,SAAChF,GAAa,IAAD,EAC3BD,EAAMsD,EAAiBiB,KAAKtE,GAClC,IAAKD,EAEH,OAAO,KAET,IAAMkF,EAAa,UAAG5B,EAAiBa,uBAAuBlE,UAA3C,QAAuD,EACpEkF,EAAcD,EAAQnB,EAAe,IAK3C,OACE,eAAClB,EAAD,CAA4BR,QALV,WAClBqB,EAAK,GAAD,OAAIpH,IAAJ,wBAA+BK,EAA/B,YAAoDsD,KAINtC,MAAO3B,EAAE,qBAA3D,UACE,cAAC,KAAD,UACE,cAAC,EAAD,CAASgH,aAAchD,EAAIoF,MAAMC,UAAWhG,KAAMW,EAAIX,SAExD,cAAC,KAAD,CAAIyF,UAAU,SAAd,SAAwBvF,YAAa2F,EAAO,EAAG,KAC/C,cAAC,KAAD,CAAIJ,UAAU,SAAd,mBAA2BvF,YAAa4F,EAAY,EAAG,GAAvD,OACA,cAAC,KAAD,CAAIL,UAAU,QAAQtI,MAAM,QAA5B,SACE,cAAC,EAAD,CAAiByD,QAASA,QAPXA,eAiB/B,cAAC,EAAD,CAAiBtC,MAAO3B,EAAE,cAA1B,SACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAI8I,UAAU,OAAd,SAAsB9I,EAAE,UACxB,cAAC,KAAD,UAAKA,EAAE,WACP,cAAC,KAAD,UAAKA,EAAE,YACP,cAAC,KAAD,UAAKA,EAAE,iBAGX,gCACGsJ,IAAM,IAAIL,KAAI,SAACM,GAAD,OACb,+BACE,cAAC,KAAD,UACE,eAAC,KAAD,CAAMrJ,WAAW,SAAjB,UACE,cAAC,KAAD,CAAU+G,OAAO,OAAOzG,MAAM,OAAO0G,GAAG,QACxC,cAAC,KAAD,CAAU1G,MAAM,eAGpB,cAAC,KAAD,UACE,cAAC,KAAD,MAEF,cAAC,KAAD,UACE,cAAC,KAAD,QAXK+I,gB,8DEDVC,EAhH2C,SAAC,GAA2B,IAAzB7I,EAAwB,EAAxBA,kBAC3D,EAA6B8I,YAA6B9I,GAAlD4H,EAAR,EAAQA,KAAM9D,EAAd,EAAcA,WACd,EAAoC5D,mBAAmC,IAAvE,mBAAO2G,EAAP,KAAmBC,EAAnB,KACQzH,EAAMC,cAAND,EAER,OAAIyE,EAEA,cAAC,EAAD,CAAiB9C,MAAO3B,EAAE,cAA1B,SACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAI8I,UAAU,OAAd,SAAsB9I,EAAE,UACxB,cAAC,KAAD,CAAIQ,MAAM,QAAV,SAAmBR,EAAE,WACrB,cAAC,KAAD,CAAIQ,MAAM,QAAV,SAAmBR,EAAE,iBAGzB,gCACGsJ,IAAM,IAAIL,KAAI,SAACM,GAAD,OACb,+BACE,cAAC,KAAD,UACE,cAAC,KAAD,CAAU/I,MAAM,YAElB,cAAC,KAAD,UACE,cAAC,KAAD,MAEF,cAAC,KAAD,UACE,cAAC,KAAD,QARK+I,aAmBnB,mCACGhB,GACCN,OAAOK,KAAKC,GAAMU,KAAI,SAAC5E,EAAWqB,GAChC,IAAMgE,EAAQ1B,IAAIC,OAAOC,OAAOK,EAAKlE,KAG/BsF,EAAkE1B,OAAOK,KAAKC,EAAKlE,IAAYuF,QACnG,SAACC,EAAOC,GACN,IAAMZ,EAAQX,EAAKlE,GAAWyF,GACxBC,EAAUb,EAAQQ,EAAS,IAEjC,MAAM,GAAN,mBAAWG,GAAX,CAAkB,CAAEvF,MAAOwF,EAAYZ,QAAOa,cAEhD,IAEIC,EAAWxC,EAAWnD,IAAc,OAkB1C,OACE,cAAC,EAAD,CAAiC1C,MAAOsI,IAAW5F,GAAYwB,iBAAkBH,GAAS,EAAGtF,GAAG,OAAhG,SACE,cAACqG,EAAD,UACE,eAAC,KAAD,WACE,gCACE,+BACE,cAAC,KAAD,CAAIqC,UAAU,OAAd,SAAsB9I,EAAE,UACxB,cAAC,KAAD,CAAIQ,MAAM,QAAV,SAAmBR,EAAE,WACrB,cAAC,KAAD,CAAIQ,MAAM,QAAV,SACE,cAAC8F,EAAD,CAAkByC,KAAK,SAAS1C,QAzBrB,WACvBoB,GAAc,SAACyC,GACb,OAAKA,EAAe7F,GAOb,2BACF6F,GADL,kBAEG7F,EAA0C,QAA9B6F,EAAe7F,GAAuB,OAAS,QARrD,2BACF6F,GADL,kBAEG7F,EAAY,YAoBP,SACE,eAAC,KAAD,CAAMnE,WAAW,SAAjB,UACGF,EAAE,UACwB,QAA1BwH,EAAWnD,GACV,cAAC,IAAD,CAAa9D,MAAM,cAEnB,cAAC,IAAD,CAAeA,MAAM,0BAOjC,gCACG4J,IAAQR,EAAa,SAAUK,GAAUf,KAAI,YAA+B,IAA5B3E,EAA2B,EAA3BA,MAAO4E,EAAoB,EAApBA,MAAOa,EAAa,EAAbA,OAC7D,OACE,+BACE,cAAC,KAAD,UAAKE,IAAW3F,KAChB,cAAC,KAAD,CAAIwE,UAAU,SAAd,SAAwBvF,YAAa2F,EAAO,EAAG,KAC/C,cAAC,KAAD,CAAIJ,UAAU,SAAd,mBAA2BvF,YAAawG,EAAQ,EAAG,GAAnD,SAHOzF,cAxBCD,SCpDnB+F,UAzBA,WACb,IAAQzJ,EAAsBqB,cAAtBrB,kBACF0J,EAAWC,cACXvI,EAAawI,YAAiB5J,GAQpC,OANAK,qBAAU,WACJL,GACF0J,EAASG,YAAgB7J,MAE1B,CAACA,EAAmB0J,IAGrB,qCACE,cAACvI,EAAA,EAAD,CAAQC,WAAYA,IACpB,cAAC2B,EAAA,EAAD,CAAW+G,GAAG,OAAd,SACG9J,IAAsByE,IACrB,cAAC,EAAD,CAAsBzE,kBAAmBA,IAEzC,cAAC,EAAD,CAAkBA,kBAAmBA,W,8ICpBlC+J,EAA0C,SAAC,GAAD,IAAG/I,EAAH,EAAGA,MAAOE,EAAV,EAAUA,KAASjB,EAAnB,wBACrD,eAAC,IAAD,2BAASA,GAAT,cACE,cAAC,KAAD,CAAM+J,SAAS,OAAOpK,MAAM,aAAauI,UAAU,SAAnD,SACGnH,IAEO,OAATE,EACC,cAAC,KAAD,CAAUoF,OAAO,OAAOzG,MAAM,MAAMoK,GAAG,SAEvC,cAAC,KAAD,CAAMC,WAAW,MAAM/B,UAAU,SAAjC,SACGjH,SAMHH,EAAUhC,YAAOoL,KAAPpL,CAAH,4LAEG,qBAAGE,MAAkBC,OAAOkL,oBACtB,qBAAGnL,MAAkBC,OAAOmL,cAC/B,qBAAGpL,MAAkBqL,MAAMC,QAM/BxJ,O,yCC3BVyJ,E,0JAAAA,O,yBAAAA,I,iBAAAA,I,0BAAAA,M,KAWL,IAAMC,EAAU1L,IAAOgH,IAAV,wXAEG,qBAAG9G,MAAkBC,OAAOwL,SACtB,qBAAGzL,MAAkBC,OAAOyL,kBAC3B,qBAAG1L,MAAkBqL,MAAMM,WAAW,qBAAG3L,MAAkBqL,MAAMM,WAYpF,qBAAGxF,QACG,yEAQJyF,EAAc9L,YAAO+L,KAAP/L,CAAH,mJAQXgM,EAAe,CACnBjH,YAAY,EACZkH,YAAaR,EAAaS,UAC1BtH,MAAO,IAGHuH,EAA6B,kBAAMC,QAAQC,SAAQ,IA4E1CC,IA1E+C,SAAC,GAIxD,IAAD,IAHJC,sBAGI,MAHaJ,EAGb,EAFJK,EAEI,EAFJA,eACGtL,EACC,iBACJ,EAA0BC,mBAAS6K,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACQpM,EAAMC,cAAND,EACAyE,EAAmC0H,EAAnC1H,WAAYkH,EAAuBQ,EAAvBR,YAAarH,EAAU6H,EAAV7H,MAyCjC,OAzBAtD,qBAAU,YACoC,IAArBqL,YAAU/H,GAER,uCAAG,4BAAArD,EAAA,sEAExBmL,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgC7H,YAAY,OAF7B,SAGCwH,EAAe3H,GAHhB,OAGlBiI,EAHkB,OAKxBH,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEP7H,YAAY,EACZkH,YAAaY,EAAapB,EAAaqB,MAAQrB,EAAasB,eARtC,gDAWxBL,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgC7H,YAAY,OAX7B,yDAAH,oDAgBvBiI,GAEAN,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgCX,YAAaR,EAAaS,iBAEpE,CAACtH,EAAO2H,EAAgBG,IAGzB,eAAC,IAAD,yBAAKO,SAAS,YAAe/L,GAA7B,cACE,cAAC,KAAD,CACEgM,YAAa5M,EAAE,mBAAoB,CAAE6M,QAAS7M,EAAE,WAAWmF,gBAC3Db,MAAO6H,EAAM7H,MACbwI,SA5Ce,SAACC,GACpB,IAAeC,EAAaD,EAAIE,OAAxB3I,MACR8H,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,IAEPhI,MAAO0I,QAyCLE,MAAO,CAAEP,SAAU,WAAYQ,OAAQ,GAAIC,aAAc,UAE1D3I,GACC,cAAC,IAAD,CAAKkI,SAAS,WAAWU,IAAI,OAAOC,MAAM,OAAOJ,MAAO,CAAEC,OAAQ,IAAlE,SACE,cAAC,IAAD,MAGJ,cAAC/B,EAAD,CAASrF,OAAQ4F,IAAgBR,EAAaS,UAA9C,SACGD,IAAgBR,EAAaqB,MAC5B,cAAChB,EAAD,CAAanF,QA9CD,WAClB+F,EAASV,GACTQ,EAAeC,EAAM7H,QA4Cf,SAAoC6H,EAAM7H,QAE1C,cAAC,KAAD,CAAMiJ,GAAG,OAAO1C,WAAW,OAA3B,SACG7K,EAAE,+B,4ECjHA8C,IARqC,SAAClC,GACnD,IACM4M,EADYC,cAAV7N,MACiB8N,OACrB,uDACA,uDACJ,OAAO,cAAC,IAAD,aAAYF,WAAYA,GAAgB5M,M,kBCRjD,IAWI+M,EAAeC,OAAO,uFAa1BvO,EAAOC,QAJP,SAAoBiG,GAClB,OAAOoI,EAAaE,KAAKtI,K,8CCdrBrC,E,KAAcxD,EAAOgH,IAAIoH,OAAwB,kBAAc,CACnEC,IADqD,EAAGA,OAAtCrO,CAAH,yQAGI,qBAAGyD,OAOR,qBAAG6K,aAAiC,aAOrC9K,O,oBCzBf,IAmBIoC,EAnBkBnG,EAAQ,IAmBb8O,CAAgB,eAEjC5O,EAAOC,QAAUgG,G,oFCNF7E,IAVa,SAACG,GAC3B,IAAMsN,EAAUvG,cAMhB,OAAO,cAAC,IAAD,aAAoBuE,eAJA,SAAC5H,GAC1B4J,EAAQxG,KAAR,UAAgBpH,IAAhB,oBAAuCgE,MAG0B1D,M,8GCQtDwC,IAZyC,SAAC,GAAD,IAAGzB,EAAH,EAAGA,MAAO2B,EAAV,EAAUA,YAAawC,EAAvB,EAAuBA,SAAalF,EAApC,wBACtD,eAAC,KAAD,yBAAMuN,QAAQ,OAAOjO,WAAW,SAASkO,oBAAqB,CAAC,MAAO,KAAM,KAAM,KAAM,mBAAuBxN,GAA/G,cACE,eAAC,IAAD,WACE,cAAC,KAAD,CAASsF,GAAG,KAAKE,MAAM,KAAK7F,MAAM,YAAYH,GAAG,OAAjD,SACGuB,IAEF2B,KAEH,cAAC,IAAD,UAAMwC,U,4DCbJnC,EAAcjE,YAAO2O,KAAP3O,CAAH,+FAEM,qBAAGE,MAAkBC,OAAOmL,cAGpCrH,O,2ECqBA2K,E,KAtBW5O,EAAOgH,IAAIoH,OAA8B,kBAAc,CAC/EC,IADiE,EAAGA,OAA5CrO,CAAH,kTAGnB,gBAAGyD,EAAH,EAAGA,IAAKvD,EAAR,EAAQA,MAAR,OAAqBuD,EAAG,iCAA6BA,EAA7B,kCAA4DvD,EAAMC,OAAOmL,eAC1E,qBAAG7H,OAS1B,qBAAGvD,MAAkB2O,aAAaC,MAIlC,qBAAG5O,MAAkB2O,aAAaE,M,yDCEvB1L,IAhBmC,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,YAAa0L,EAA4C,EAA5CA,UAAWrM,EAAiC,EAAjCA,OAAQyD,EAAyB,EAAzBA,SAAalF,EAAY,iBAC5G,OACE,cAAC,KAAD,yBAAM+N,cAAc,SAASvO,GAAG,QAAWQ,GAA3C,aACE,eAAC,IAAD,CAAK+L,SAAS,WAAWiC,GAAG,OAA5B,UACE,cAACC,EAAD,CAAa1L,IAAKH,EAAa+K,IAAKW,IACpC,cAAC,IAAD,CAAK/B,SAAS,WAAWmC,OAAQ,EAAGC,MAAO,EAA3C,SACE,eAAC,KAAD,CAAM7O,WAAW,WAAjB,UACGmC,EACAyD,e,kVCWAkJ,EAAgD,SAAC,GAAD,IAAG5H,EAAH,EAAGA,OAAWxG,EAAd,wBAC3D,eAAC,KAAD,yBAAMV,WAAW,UAAaU,GAA9B,cACE,cAAC,IAAD,CAAaJ,MAAM,OAAOoK,GAAG,QAC7B,cAAC,KAAD,CAAMC,WAAW,MAAjB,SACGzD,EAAO9F,oBAAeC,EAAW,CAChCC,sBAAuB,EACvBC,sBAAuB,WAWlBwN,EAAsC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAiBvO,EAAY,iBACjFwO,EAAaC,YAAsBF,EAAcD,GAEvD,OACE,eAAC,KAAD,yBAAMhP,WAAW,UAAaU,GAA9B,cACGwO,EAAa,GACZ,cAAC,KAAD,CAAMzE,SAAS,OAAOpK,MAAM,aAA5B,qBAA+C6O,EAAW9N,oBAAeC,EAAW,CAClFC,sBAAuB,EACvBC,sBAAuB,IAFzB,OAKF,cAACuN,EAAD,CAAgB5H,OAAQ8H,SASjBI,EAAkC,SAAC,GAAD,IAAG3N,EAAH,EAAGA,MAAOmE,EAAV,EAAUA,SAAalF,EAAvB,wBAC7C,eAAC,KAAD,yBAAMV,WAAW,SAASC,eAAe,iBAAoBS,GAA7D,cACE,cAAC,KAAD,CAAM+J,SAAS,OAAOpK,MAAM,aAAagP,SAAS,QAAQC,UAAQ,EAAC7N,MAAOA,EAA1E,SACGA,IAEH,cAAC,IAAD,UAAMmE,SAgDG2J,EAAwB/P,YAAOgQ,IAAPhQ,CAAH,sOAS9B,qBAAGE,MAAkB2O,aAAaoB,MAazBC,EAAqB,SAAC,GAAwE,IAAtE9O,EAAqE,EAArEA,YAAa2D,EAAwD,EAAxDA,WAAY0K,EAA4C,EAA5CA,aACpDnP,EAAMC,cAAND,EAER,OAAKyE,GAAe3D,EAKlB,cAACwO,EAAD,CAAS3N,MAAO3B,EAAE,gBAAlB,SACGyE,EACC,cAAC,KAAD,CAAUwC,OAAO,OAAOzG,MAAM,SAE9B,cAACyO,EAAD,CAAWC,KAAMpO,EAAaqO,aAAcA,MARzC,O,qIC/GEU,EAAiC,WAC5C,MAA0BhP,mBAAkB,CAAE4D,YAAY,EAAO8D,KAAM,OAAvE,mBAAO4D,EAAP,KAAcC,EAAd,KAeA,OAbApL,qBAAU,YACS,uCAAG,4BAAAC,EAAA,6DAClBmL,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgC7H,YAAY,OADnC,SAEQqL,YAA0D1K,KAFlE,OAEZyC,EAFY,OAGlBuE,EAAS,CACP3H,YAAY,EACZ8D,KAAMV,EAAYU,OALF,2CAAH,qDASjBT,KACC,CAACsE,IAEGD,GAGM1C,IA3CsB,SAAC9I,GACpC,MAA0BE,mBAAgB,CAAE4D,YAAY,EAAO8D,KAAM,OAArE,mBAAO4D,EAAP,KAAcC,EAAd,KAeA,OAbApL,qBAAU,YACS,uCAAG,4BAAAC,EAAA,6DAClBmL,GAAS,SAACE,GAAD,mBAAC,eAAoBA,GAArB,IAAgC7H,YAAY,OADnC,SAEQqL,YAAwDnP,GAFhE,OAEZkH,EAFY,OAGlBuE,EAAS,CACP3H,YAAY,EACZ8D,KAAMV,EAAYU,OALF,2CAAH,qDASjBT,KACC,CAACnH,EAAmByL,IAEhBD,I,oBC1BT,IAAI4D,EAAY5Q,EAAQ,KACpB6Q,EAAa7Q,EAAQ,KACrB8Q,EAAgB9Q,EAAQ,KACxBoF,EAAWpF,EAAQ,KA6BvBE,EAAOC,QApBP,SAAyB4Q,GACvB,OAAO,SAAS3K,GACdA,EAAShB,EAASgB,GAElB,IAAI4K,EAAaH,EAAWzK,GACxB0K,EAAc1K,QACdhE,EAEA6O,EAAMD,EACNA,EAAW,GACX5K,EAAO8K,OAAO,GAEdC,EAAWH,EACXJ,EAAUI,EAAY,GAAGI,KAAK,IAC9BhL,EAAOiL,MAAM,GAEjB,OAAOJ,EAAIF,KAAgBI,K,oBC5B/B,IAAIG,EAAYtR,EAAQ,KAiBxBE,EAAOC,QANP,SAAmBC,EAAOmR,EAAOC,GAC/B,IAAInR,EAASD,EAAMC,OAEnB,OADAmR,OAAcpP,IAARoP,EAAoBnR,EAASmR,GAC1BD,GAASC,GAAOnR,EAAUD,EAAQkR,EAAUlR,EAAOmR,EAAOC,K,kBCgBrEtR,EAAOC,QArBP,SAAmBC,EAAOmR,EAAOC,GAC/B,IAAIjL,GAAS,EACTlG,EAASD,EAAMC,OAEfkR,EAAQ,IACVA,GAASA,EAAQlR,EAAS,EAAKA,EAASkR,IAE1CC,EAAMA,EAAMnR,EAASA,EAASmR,GACpB,IACRA,GAAOnR,GAETA,EAASkR,EAAQC,EAAM,EAAMA,EAAMD,IAAW,EAC9CA,KAAW,EAGX,IADA,IAAIjL,EAASmL,MAAMpR,KACVkG,EAAQlG,GACfiG,EAAOC,GAASnG,EAAMmG,EAAQgL,GAEhC,OAAOjL,I,oBC3BT,IAAIoL,EAAe1R,EAAQ,KACvB6Q,EAAa7Q,EAAQ,KACrB2R,EAAiB3R,EAAQ,KAe7BE,EAAOC,QANP,SAAuBiG,GACrB,OAAOyK,EAAWzK,GACduL,EAAevL,GACfsL,EAAatL,K,kBCHnBlG,EAAOC,QAJP,SAAsBiG,GACpB,OAAOA,EAAOwL,MAAM,M,kBCPtB,IAQIC,EAAW,oBACXC,EAAU,kDACVC,EAAS,2BAETC,EAAc,qBACdC,EAAa,kCACbC,EAAa,qCAIbC,EAPa,MAAQL,EAAU,IAAMC,EAAS,IAOtB,IACxBK,EAAW,oBAEXC,EAAQD,EAAWD,GADP,gBAAwB,CAACH,EAAaC,EAAYC,GAAYd,KAAK,KAAO,IAAMgB,EAAWD,EAAW,MAElHG,EAAW,MAAQ,CAACN,EAAcF,EAAU,IAAKA,EAASG,EAAYC,EAAYL,GAAUT,KAAK,KAAO,IAGxGmB,EAAY9D,OAAOsD,EAAS,MAAQA,EAAS,KAAOO,EAAWD,EAAO,KAa1EnS,EAAOC,QAJP,SAAwBiG,GACtB,OAAOA,EAAOoM,MAAMD,IAAc","file":"static/js/10.4d25f6f7.chunk.js","sourcesContent":["var baseSum = require('./_baseSum'),\n    identity = require('./identity');\n\n/**\n * Computes the sum of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * _.sum([4, 2, 8, 6]);\n * // => 20\n */\nfunction sum(array) {\n  return (array && array.length)\n    ? baseSum(array, identity)\n    : 0;\n}\n\nmodule.exports = sum;\n","import React from 'react'\r\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\r\nimport { Link as RouterLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\nimport SearchBar from '../components/SearchBar'\r\n\r\nconst BackLink = styled(RouterLink)`\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  display: inline-flex;\r\n  font-weight: 600;\r\n`\r\n\r\nconst TopBar: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\r\n      <BackLink to={`${nftsBaseUrl}/collections`}>\r\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\r\n        {t('All Collections')}\r\n      </BackLink>\r\n      <Box>\r\n        <SearchBar />\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\r\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\r\n\r\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const { t } = useTranslation()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\r\n      setLowestPrice(lowestCollectionPrice)\r\n    }\r\n\r\n    fetchLowestPrice()\r\n  }, [collectionAddress, setLowestPrice])\r\n\r\n  const formattedLowestPrice =\r\n    lowestPrice === null\r\n      ? null\r\n      : lowestPrice.toLocaleString(undefined, {\r\n          minimumFractionDigits: 3,\r\n          maximumFractionDigits: 3,\r\n        })\r\n\r\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\r\n}\r\n\r\nexport default LowestPriceStatBoxItem\r\n","import React from 'react'\r\nimport { useLocation, useParams } from 'react-router'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { Collection } from 'state/nftMarket/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport MarketPageHeader from '../components/MarketPageHeader'\r\nimport MarketPageTitle from '../components/MarketPageTitle'\r\nimport StatBox, { StatBoxItem } from '../components/StatBox'\r\nimport BannerHeader from '../components/BannerHeader'\r\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\r\nimport BaseSubMenu from '../components/BaseSubMenu'\r\nimport { nftsBaseUrl } from '../constants'\r\nimport TopBar from './TopBar'\r\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\r\n\r\ninterface HeaderProps {\r\n  collection: Collection\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\r\n  const { t } = useTranslation()\r\n  const { pathname, hash } = useLocation()\r\n\r\n  const volume = totalVolumeBNB\r\n    ? parseFloat(totalVolumeBNB).toLocaleString(undefined, {\r\n        minimumFractionDigits: 3,\r\n        maximumFractionDigits: 3,\r\n      })\r\n    : '0'\r\n\r\n  const itemsConfig = [\r\n    {\r\n      label: t('Items'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\r\n    },\r\n    {\r\n      label: t('Traits'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\r\n    },\r\n    {\r\n      label: t('Activity'),\r\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#activity`,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <MarketPageHeader>\r\n        <TopBar />\r\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\r\n        <MarketPageTitle\r\n          title={collection.name}\r\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\r\n        >\r\n          <StatBox>\r\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\r\n            <StatBoxItem\r\n              title={t('Items listed')}\r\n              stat={numberTokensListed ? formatNumber(Number(numberTokensListed), 0, 0) : '0'}\r\n            />\r\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\r\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\r\n          </StatBox>\r\n        </MarketPageTitle>\r\n      </MarketPageHeader>\r\n      <Container>\r\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || '#items'}`} mt=\"24px\" mb=\"8px\" />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useState } from 'react'\r\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\r\nimport { NftToken } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\nexport interface LowestNftPrice {\r\n  isFetching: boolean\r\n  lowestPrice: number\r\n}\r\n\r\nconst getBunnyIdFromNft = (nft: NftToken): string => {\r\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\r\n  return bunnyId ? bunnyId.toString() : null\r\n}\r\n\r\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (bunnyId) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [bunnyId])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n\r\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\r\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\r\n\r\n  useEffect(() => {\r\n    const fetchLowestPrice = async () => {\r\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\r\n      try {\r\n        setIsFetching(true)\r\n        const response = await getNftsMarketData(\r\n          { otherId: bunnyIdAttr, isTradable: true },\r\n          1,\r\n          'currentAskPrice',\r\n          'asc',\r\n        )\r\n\r\n        if (response.length > 0) {\r\n          const [tokenMarketData] = response\r\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\r\n        }\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    if (isPancakeBunny && nft) {\r\n      fetchLowestPrice()\r\n    }\r\n  }, [isPancakeBunny, nft])\r\n\r\n  return { isFetching, lowestPrice }\r\n}\r\n","var toString = require('./toString'),\n    upperFirst = require('./upperFirst');\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\nmodule.exports = capitalize;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","import React, { useState } from 'react'\r\nimport {\r\n  CardProps,\r\n  CardHeader,\r\n  Card,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n} from '@pancakeswap/uikit'\r\n\r\ninterface CollapsibleCardProps extends CardProps {\r\n  initialOpenState?: boolean\r\n  title: string\r\n}\r\n\r\nconst CollapsibleCard: React.FC<CollapsibleCardProps> = ({ initialOpenState = true, title, children, ...props }) => {\r\n  const [isOpen, setIsOpen] = useState(initialOpenState)\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  return (\r\n    <Card {...props}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n          <Heading as=\"h3\">{title}</Heading>\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={toggleOpen}>\r\n            {isOpen ? <ChevronUpIcon width=\"24px\" /> : <ChevronDownIcon width=\"24px\" />}\r\n          </IconButton>\r\n        </Flex>\r\n      </CardHeader>\r\n      {isOpen && children}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CollapsibleCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Image, Text } from '@pancakeswap/uikit'\r\n\r\nexport const StyledSortButton = styled.button`\r\n  border: none;\r\n  cursor: pointer;\r\n  background: none;\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  font-weight: bold;\r\n`\r\n\r\nexport const TableWrapper = styled.div`\r\n  -webkit-overflow-scrolling: touch;\r\n  min-width: 320px;\r\n  overflow-x: auto;\r\n`\r\n\r\nexport const NftImage = styled(Image)`\r\n  flex: none;\r\n  & > img {\r\n    border-radius: 8px;\r\n  }\r\n`\r\n\r\nexport const ClickableRow = styled.tr`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    td {\r\n      opacity: 0.65;\r\n    }\r\n  }\r\n`\r\n\r\nexport const NftName: React.FC<{ thumbnailSrc: string; name: string }> = ({ thumbnailSrc, name }) => (\r\n  <Flex alignItems=\"center\">\r\n    <NftImage src={thumbnailSrc} width={48} height={48} mr=\"8px\" />\r\n    <Text>{name}</Text>\r\n  </Flex>\r\n)\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { Skeleton, Table, Td, Th, Flex, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\r\nimport { useHistory } from 'react-router'\r\nimport times from 'lodash/times'\r\nimport sum from 'lodash/sum'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\r\nimport { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useGetLowestPriceFromBunnyId } from '../../hooks/useGetLowestPrice'\r\nimport { BNBAmountLabel } from '../../components/CollectibleCard/styles'\r\nimport { sortBunniesByRarityBuilder } from './utils'\r\nimport { nftsBaseUrl } from '../../constants'\r\nimport { SortType } from '../../types'\r\nimport { ClickableRow, NftName, StyledSortButton, TableWrapper } from './styles'\r\n\r\ninterface PancakeBunniesTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst LowestPriceCell: React.FC<{ bunnyId: string }> = ({ bunnyId }) => {\r\n  const { isFetching, lowestPrice } = useGetLowestPriceFromBunnyId(bunnyId)\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <Flex justifyContent=\"flex-end\" width=\"100px\">\r\n        <Skeleton height=\"24px\" width=\"48px\" />\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  if (!lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return <BNBAmountLabel justifyContent=\"flex-end\" amount={lowestPrice} width=\"100px\" />\r\n}\r\n\r\nconst PancakeBunniesTraits: React.FC<PancakeBunniesTraitsProps> = ({ collectionAddress }) => {\r\n  const [tokenApiResponse, setTokenApiResponse] = useState<ApiResponseCollectionTokens>(null)\r\n  const [raritySort, setRaritySort] = useState<SortType>('asc')\r\n  const { t } = useTranslation()\r\n  const { push } = useHistory()\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\r\n      setTokenApiResponse(apiResponse)\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setTokenApiResponse])\r\n\r\n  const totalMinted = tokenApiResponse ? sum(Object.values(tokenApiResponse.attributesDistribution)) : 0\r\n\r\n  const sortedBunnieKeys = useMemo(() => {\r\n    if (!tokenApiResponse) return []\r\n\r\n    return Object.keys(tokenApiResponse.data).sort(sortBunniesByRarityBuilder({ raritySort, data: tokenApiResponse }))\r\n  }, [raritySort, tokenApiResponse])\r\n\r\n  const toggleRaritySort = () => {\r\n    setRaritySort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tokenApiResponse ? (\r\n        <CollapsibleCard title={t('Bunny Id')}>\r\n          <TableWrapper>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <Th textAlign=\"left\">{t('Name')}</Th>\r\n                  <Th>{t('Count')}</Th>\r\n                  <Th>\r\n                    <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                      <Flex alignItems=\"center\">\r\n                        {t('Rarity')}\r\n                        {raritySort === 'asc' ? <ArrowUpIcon color=\"secondary\" /> : <ArrowDownIcon color=\"secondary\" />}\r\n                      </Flex>\r\n                    </StyledSortButton>\r\n                  </Th>\r\n                  <Th textAlign=\"right\">{t('Lowest')}</Th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {sortedBunnieKeys.map((bunnyId) => {\r\n                  const nft = tokenApiResponse.data[bunnyId]\r\n                  if (!nft) {\r\n                    // Some bunnies don't exist on testnet\r\n                    return null\r\n                  }\r\n                  const count: number = tokenApiResponse.attributesDistribution[bunnyId] ?? 0\r\n                  const percentage = (count / totalMinted) * 100\r\n                  const handleClick = () => {\r\n                    push(`${nftsBaseUrl}/collections/${collectionAddress}/${bunnyId}`)\r\n                  }\r\n\r\n                  return (\r\n                    <ClickableRow key={bunnyId} onClick={handleClick} title={t('Click to view NFT')}>\r\n                      <Td>\r\n                        <NftName thumbnailSrc={nft.image.thumbnail} name={nft.name} />\r\n                      </Td>\r\n                      <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                      <Td textAlign=\"center\">{`${formatNumber(percentage, 0, 2)}%`}</Td>\r\n                      <Td textAlign=\"right\" width=\"100px\">\r\n                        <LowestPriceCell bunnyId={bunnyId} />\r\n                      </Td>\r\n                    </ClickableRow>\r\n                  )\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </TableWrapper>\r\n        </CollapsibleCard>\r\n      ) : (\r\n        <CollapsibleCard title={t('Loading...')}>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th textAlign=\"left\">{t('Name')}</Th>\r\n                <Th>{t('Count')}</Th>\r\n                <Th>{t('Rarity')}</Th>\r\n                <Th>{t('Lowest')}</Th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {times(19).map((bunnyCnt) => (\r\n                <tr key={bunnyCnt}>\r\n                  <Td>\r\n                    <Flex alignItems=\"center\">\r\n                      <Skeleton height=\"48px\" width=\"48px\" mr=\"8px\" />\r\n                      <Skeleton width=\"100px\" />\r\n                    </Flex>\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                  <Td>\r\n                    <Skeleton />\r\n                  </Td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </CollapsibleCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PancakeBunniesTraits\r\n","import { ApiResponseCollectionTokens } from 'state/nftMarket/types'\r\n\r\ntype sortBuilder = {\r\n  data: ApiResponseCollectionTokens\r\n  raritySort: string\r\n}\r\n\r\nexport const sortBunniesByRarityBuilder =\r\n  ({ raritySort, data }: sortBuilder) =>\r\n  (bunnyIdA, bunnyIdB) => {\r\n    const bunnyCountA = data.attributesDistribution[bunnyIdA] ?? 0\r\n    const bunnyCountB = data.attributesDistribution[bunnyIdB] ?? 0\r\n\r\n    return raritySort === 'asc' ? bunnyCountA - bunnyCountB : bunnyCountB - bunnyCountA\r\n  }\r\n","import React, { useState } from 'react'\r\nimport times from 'lodash/times'\r\nimport capitalize from 'lodash/capitalize'\r\nimport sum from 'lodash/sum'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { ArrowDownIcon, ArrowUpIcon, Flex, Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\r\nimport { formatNumber } from 'utils/formatBalance'\r\nimport CollapsibleCard from 'components/CollapsibleCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { SortType } from '../../types'\r\nimport { StyledSortButton, TableWrapper } from './styles'\r\nimport useGetCollectionDistribution from '../../hooks/useGetCollectionDistribution'\r\n\r\ninterface CollectionTraitsProps {\r\n  collectionAddress: string\r\n}\r\n\r\nconst CollectionTraits: React.FC<CollectionTraitsProps> = ({ collectionAddress }) => {\r\n  const { data, isFetching } = useGetCollectionDistribution(collectionAddress)\r\n  const [raritySort, setRaritySort] = useState<Record<string, SortType>>({})\r\n  const { t } = useTranslation()\r\n\r\n  if (isFetching) {\r\n    return (\r\n      <CollapsibleCard title={t('Loading...')}>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <Th textAlign=\"left\">{t('Name')}</Th>\r\n              <Th width=\"100px\">{t('Count')}</Th>\r\n              <Th width=\"160px\">{t('Rarity')}</Th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {times(19).map((bunnyCnt) => (\r\n              <tr key={bunnyCnt}>\r\n                <Td>\r\n                  <Skeleton width=\"100px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton />\r\n                </Td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </CollapsibleCard>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {data &&\r\n        Object.keys(data).map((traitType, index) => {\r\n          const total = sum(Object.values(data[traitType]))\r\n\r\n          // Parse the distribution values into an array to make it easier to sort\r\n          const traitValues: { value: string; count: number; rarity: number }[] = Object.keys(data[traitType]).reduce(\r\n            (accum, traitValue) => {\r\n              const count = data[traitType][traitValue]\r\n              const rarity = (count / total) * 100\r\n\r\n              return [...accum, { value: traitValue, count, rarity }]\r\n            },\r\n            [],\r\n          )\r\n          const sortType = raritySort[traitType] || 'desc'\r\n\r\n          const toggleRaritySort = () => {\r\n            setRaritySort((prevRaritySort) => {\r\n              if (!prevRaritySort[traitType]) {\r\n                return {\r\n                  ...prevRaritySort,\r\n                  [traitType]: 'asc',\r\n                }\r\n              }\r\n\r\n              return {\r\n                ...prevRaritySort,\r\n                [traitType]: prevRaritySort[traitType] === 'asc' ? 'desc' : 'asc',\r\n              }\r\n            })\r\n          }\r\n\r\n          return (\r\n            <CollapsibleCard key={traitType} title={capitalize(traitType)} initialOpenState={index <= 1} mb=\"32px\">\r\n              <TableWrapper>\r\n                <Table>\r\n                  <thead>\r\n                    <tr>\r\n                      <Th textAlign=\"left\">{t('Name')}</Th>\r\n                      <Th width=\"100px\">{t('Count')}</Th>\r\n                      <Th width=\"160px\">\r\n                        <StyledSortButton type=\"button\" onClick={toggleRaritySort}>\r\n                          <Flex alignItems=\"center\">\r\n                            {t('Rarity')}\r\n                            {raritySort[traitType] === 'asc' ? (\r\n                              <ArrowUpIcon color=\"secondary\" />\r\n                            ) : (\r\n                              <ArrowDownIcon color=\"secondary\" />\r\n                            )}\r\n                          </Flex>\r\n                        </StyledSortButton>\r\n                      </Th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {orderBy(traitValues, 'rarity', sortType).map(({ value, count, rarity }) => {\r\n                      return (\r\n                        <tr key={value}>\r\n                          <Td>{capitalize(value)}</Td>\r\n                          <Td textAlign=\"center\">{formatNumber(count, 0, 0)}</Td>\r\n                          <Td textAlign=\"center\">{`${formatNumber(rarity, 0, 2)}%`}</Td>\r\n                        </tr>\r\n                      )\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </TableWrapper>\r\n            </CollapsibleCard>\r\n          )\r\n        })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollectionTraits\r\n","import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport Container from 'components/Layout/Container'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCollection } from 'state/nftMarket/hooks'\r\nimport { fetchCollection } from 'state/nftMarket/reducer'\r\nimport Header from '../Header'\r\nimport PancakeBunniesTraits from './PancakeBunniesTraits'\r\nimport { pancakeBunniesAddress } from '../../constants'\r\nimport CollectionTraits from './CollectionTraits'\r\n\r\nconst Traits = () => {\r\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\r\n  const dispatch = useAppDispatch()\r\n  const collection = useGetCollection(collectionAddress)\r\n\r\n  useEffect(() => {\r\n    if (collectionAddress) {\r\n      dispatch(fetchCollection(collectionAddress))\r\n    }\r\n  }, [collectionAddress, dispatch])\r\n\r\n  return (\r\n    <>\r\n      <Header collection={collection} />\r\n      <Container py=\"40px\">\r\n        {collectionAddress === pancakeBunniesAddress ? (\r\n          <PancakeBunniesTraits collectionAddress={collectionAddress} />\r\n        ) : (\r\n          <CollectionTraits collectionAddress={collectionAddress} />\r\n        )}\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Traits\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\n\r\nexport interface StatBoxItemProps extends BoxProps {\r\n  title: string\r\n  stat: string\r\n}\r\n\r\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\r\n  <Box {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\r\n      {title}\r\n    </Text>\r\n    {stat === null ? (\r\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\r\n    ) : (\r\n      <Text fontWeight=\"600\" textAlign=\"center\">\r\n        {stat}\r\n      </Text>\r\n    )}\r\n  </Box>\r\n)\r\n\r\nconst StatBox = styled(Flex)`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.invertedContrast};\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  border-radius: ${({ theme }) => theme.radii.card};\r\n  justify-content: space-around;\r\n  padding: 8px;\r\n  width: 100%;\r\n`\r\n\r\nexport default StatBox\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n","import React from 'react'\r\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\r\nimport useTheme from 'hooks/useTheme'\r\n\r\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\r\n  const { theme } = useTheme()\r\n  const background = theme.isDark\r\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\r\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\r\n  return <PageHeader background={background} {...props} />\r\n}\r\n\r\nexport default MarketPageHeader\r\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","import styled from 'styled-components'\r\n\r\ninterface AvatarImageProps {\r\n  src: string\r\n  borderColor?: string\r\n  alt?: string\r\n}\r\n\r\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<AvatarImageProps>`\r\n  background: url('${({ src }) => src}');\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  border-radius: 50%;\r\n  position: relative;\r\n  width: 96px;\r\n  height: 96px;\r\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\r\n\r\n  & > img {\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport default AvatarImage\r\n","var createCaseFirst = require('./_createCaseFirst');\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\r\n\r\nconst SearchBar: React.FC = (props) => {\r\n  const history = useHistory()\r\n\r\n  const handleAddressClick = (value: string) => {\r\n    history.push(`${nftsBaseUrl}/profile/${value}`)\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactNode } from 'react'\r\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface MarketPageTitleProps extends GridProps {\r\n  title: string\r\n  description?: ReactNode\r\n}\r\n\r\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\r\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\r\n    <Box>\r\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\r\n        {title}\r\n      </Heading>\r\n      {description}\r\n    </Box>\r\n    <Box>{children}</Box>\r\n  </Grid>\r\n)\r\n\r\nexport default MarketPageTitle\r\n","import { SubMenuItems } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst BaseSubMenu = styled(SubMenuItems)`\r\n  background-color: transparent;\r\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\r\n`\r\n\r\nexport default BaseSubMenu\r\n","import styled from 'styled-components'\r\n\r\ninterface StyledBannerImageProps {\r\n  src: string\r\n  alt?: string\r\n}\r\n\r\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\r\n  alt,\r\n}))<StyledBannerImageProps>`\r\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\r\n  background-image: url('${({ src }) => src}');\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  flex: none;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  height: 123px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    height: 192px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    height: 256px;\r\n  }\r\n`\r\n\r\nexport default StyledBannerImage\r\n","import React, { ReactNode } from 'react'\r\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\r\nimport BannerImage from './BannerImage'\r\n\r\ninterface BannerHeaderProps extends FlexProps {\r\n  bannerImage: string\r\n  bannerAlt?: string\r\n  avatar?: ReactNode\r\n}\r\n\r\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\r\n  return (\r\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\r\n      <Box position=\"relative\" pb=\"56px\">\r\n        <BannerImage src={bannerImage} alt={bannerAlt} />\r\n        <Box position=\"absolute\" bottom={0} left={-4}>\r\n          <Flex alignItems=\"flex-end\">\r\n            {avatar}\r\n            {children}\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default BannerHeader\r\n","import React, { ReactElement } from 'react'\r\nimport {\r\n  Card,\r\n  BinanceIcon,\r\n  Box,\r\n  BoxProps,\r\n  CameraIcon,\r\n  Flex,\r\n  FlexProps,\r\n  SellIcon,\r\n  Text,\r\n  WalletFilledIcon,\r\n  Skeleton,\r\n} from '@pancakeswap/uikit'\r\nimport { Price } from '@pancakeswap/sdk'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\nimport styled from 'styled-components'\r\n\r\nexport const Footer: React.FC<BoxProps> = ({ children, ...props }) => (\r\n  <Box borderTop={[null, null, null, '1px solid']} borderColor=\"cardBorder\" pt=\"8px\" {...props}>\r\n    {children}\r\n  </Box>\r\n)\r\n\r\ninterface BNBAmountLabelProps extends FlexProps {\r\n  amount: number\r\n}\r\n\r\nexport const BNBAmountLabel: React.FC<BNBAmountLabelProps> = ({ amount, ...props }) => (\r\n  <Flex alignItems=\"center\" {...props}>\r\n    <BinanceIcon width=\"16px\" mx=\"4px\" />\r\n    <Text fontWeight=\"600\">\r\n      {amount.toLocaleString(undefined, {\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 4,\r\n      })}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\ninterface CostLabelProps extends FlexProps {\r\n  cost: number\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const CostLabel: React.FC<CostLabelProps> = ({ cost, bnbBusdPrice, ...props }) => {\r\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, cost)\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" {...props}>\r\n      {priceInUsd > 0 && (\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">{`($${priceInUsd.toLocaleString(undefined, {\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2,\r\n        })})`}</Text>\r\n      )}\r\n      <BNBAmountLabel amount={cost} />\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface MetaRowProps extends FlexProps {\r\n  title: string\r\n}\r\n\r\nexport const MetaRow: React.FC<MetaRowProps> = ({ title, children, ...props }) => (\r\n  <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n    <Text fontSize=\"12px\" color=\"textSubtle\" maxWidth=\"120px\" ellipsis title={title}>\r\n      {title}\r\n    </Text>\r\n    <Box>{children}</Box>\r\n  </Flex>\r\n)\r\n\r\nexport interface NftTagProps extends FlexProps {\r\n  icon?: ReactElement\r\n  color?: string\r\n}\r\n\r\nexport const NftTag: React.FC<NftTagProps> = ({ icon, color = 'text', children, ...props }) => (\r\n  <Flex display=\"inline-flex\" alignItems=\"center\" height=\"24px\" {...props}>\r\n    {icon}\r\n    <Text color={color} fontSize=\"14px\" fontWeight=\"600\">\r\n      {children}\r\n    </Text>\r\n  </Flex>\r\n)\r\n\r\nexport const ProfileNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<CameraIcon mr=\"4px\" width=\"16px\" color=\"textSubtle\" />} color=\"textSubtle\" {...props}>\r\n      {t('Profile')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const WalletNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<WalletFilledIcon mr=\"4px\" width=\"16px\" color=\"secondary\" />} color=\"secondary\" {...props}>\r\n      {t('Wallet')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const SellingNftTag: React.FC<NftTagProps> = (props) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <NftTag icon={<SellIcon mr=\"4px\" width=\"16px\" color=\"failure\" />} color=\"failure\" {...props}>\r\n      {t('Selling')}\r\n    </NftTag>\r\n  )\r\n}\r\n\r\nexport const StyledCollectibleCard = styled(Card)`\r\n  border-radius: 8px;\r\n  max-width: 320px;\r\n  transition: opacity 200ms;\r\n\r\n  & > div {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    &:hover {\r\n      cursor: pointer;\r\n      opacity: 0.6;\r\n    }\r\n  }\r\n`\r\ninterface LowestPriceMetaRowProps {\r\n  lowestPrice: number\r\n  isFetching: boolean\r\n  bnbBusdPrice: Price\r\n}\r\n\r\nexport const LowestPriceMetaRow = ({ lowestPrice, isFetching, bnbBusdPrice }: LowestPriceMetaRowProps) => {\r\n  const { t } = useTranslation()\r\n\r\n  if (!isFetching && !lowestPrice) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <MetaRow title={t('Lowest price')}>\r\n      {isFetching ? (\r\n        <Skeleton height=\"24px\" width=\"30px\" />\r\n      ) : (\r\n        <CostLabel cost={lowestPrice} bnbBusdPrice={bnbBusdPrice} />\r\n      )}\r\n    </MetaRow>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getCollectionDistributionApi } from 'state/nftMarket/helpers'\r\nimport { ApiCollectionDistribution, ApiCollectionDistributionPB } from 'state/nftMarket/types'\r\nimport { pancakeBunniesAddress } from '../constants'\r\n\r\ninterface State {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistribution['data']\r\n}\r\n\r\nconst useGetCollectionDistribution = (collectionAddress: string) => {\r\n  const [state, setState] = useState<State>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistribution>(collectionAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [collectionAddress, setState])\r\n\r\n  return state\r\n}\r\n\r\ninterface StatePB {\r\n  isFetching: boolean\r\n  data: ApiCollectionDistributionPB['data']\r\n}\r\n\r\nexport const useGetCollectionDistributionPB = () => {\r\n  const [state, setState] = useState<StatePB>({ isFetching: false, data: null })\r\n\r\n  useEffect(() => {\r\n    const fetchTokens = async () => {\r\n      setState((prevState) => ({ ...prevState, isFetching: true }))\r\n      const apiResponse = await getCollectionDistributionApi<ApiCollectionDistributionPB>(pancakeBunniesAddress)\r\n      setState({\r\n        isFetching: false,\r\n        data: apiResponse.data,\r\n      })\r\n    }\r\n\r\n    fetchTokens()\r\n  }, [setState])\r\n\r\n  return state\r\n}\r\n\r\nexport default useGetCollectionDistribution\r\n","var castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nmodule.exports = createCaseFirst;\n","var baseSlice = require('./_baseSlice');\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nmodule.exports = castSlice;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var asciiToArray = require('./_asciiToArray'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeToArray = require('./_unicodeToArray');\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nmodule.exports = stringToArray;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nmodule.exports = asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nmodule.exports = unicodeToArray;\n"],"sourceRoot":""}