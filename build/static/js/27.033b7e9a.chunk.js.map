{"version":3,"sources":["views/Predictions/Leaderboard/components/Crumbs.tsx","views/Predictions/Leaderboard/components/Hero.tsx","views/Predictions/Leaderboard/components/Results/styles.tsx","views/Predictions/Leaderboard/components/PositionLabel.tsx","views/Predictions/Leaderboard/components/PreviousBetsTable.tsx","views/Predictions/Leaderboard/components/MobileBetsTable.tsx","views/Predictions/Leaderboard/components/Results/DesktopBetsTable.tsx","views/Predictions/Leaderboard/components/WalletStatsModal.tsx","views/Predictions/Leaderboard/components/Results/ResultAvatar.tsx","views/Predictions/Leaderboard/components/Results/DesktopRow.tsx","views/Predictions/Leaderboard/components/Results/DesktopResults.tsx","views/Predictions/Leaderboard/components/Results/MobileRow.tsx","views/Predictions/Leaderboard/components/Results/MobileResults.tsx","views/Predictions/Leaderboard/components/Results/RankingCard.tsx","views/Predictions/Leaderboard/components/Results/index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","views/Predictions/Leaderboard/components/Results/ConnectedWalletResult.tsx","views/Predictions/Leaderboard/components/AddressSearch.tsx","views/Predictions/Leaderboard/components/Filters/index.tsx","views/Predictions/Leaderboard/index.tsx","state/predictions/hooks.ts","components/AddressInputSelect/index.tsx"],"names":["Crumbs","t","useTranslation","mb","to","Hero","PageHeader","as","scale","color","Row","children","props","alignItems","justifyContent","NetWinnings","amount","textPrefix","textColor","bnbBusdPrice","useBNBBusdPrice","value","multiplyPriceByAmount","Math","abs","flexDirection","fontWeight","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","fontSize","lineHeight","NetWinningsRow","StyledPositionLabel","styled","div","theme","bgColor","colors","Label","mediaQueries","lg","PositionLabel","position","isBull","BetPosition","BULL","icon","width","PreviousBetsTable","numberOfBets","account","useState","isFetching","setIsFetching","bets","setBets","orderedBets","orderBy","useEffect","a","getBetHistory","user","toLowerCase","response","map","transformBetResponse","fetchBetHistory","textAlign","times","num","height","bet","isWinner","round","epoch","claimedNetBNB","id","MobileBetsTable","isOpen","setIsOpen","px","py","borderBottom","borderColor","style","cursor","onClick","textTransform","DesktopBetsTable","p","ExternalLink","LinkExternal","text","WalletStatsModal","onDismiss","onBeforeDismiss","useTheme","selectedAddress","useGetSelectedAddress","address","result","useGetOrFetchLeaderboardAddressResult","profileAvatar","useGetProfileAvatar","isLoading","useGetLeaderboardLoadingState","LeaderboardLoadingState","LOADING","isDesktop","useMatchBreakpoints","minWidth","background","gradients","bubblegum","flex","mr","src","nft","image","thumbnail","username","href","getBscScanLink","truncateHash","variant","maxHeight","overflowY","gridTemplateColumns","gridGap","netBNB","winRate","totalBetsClaimed","totalBets","AvatarWrapper","Box","UsernameWrapper","ResultAvatar","useModal","onPresentWalletStatsModal","component","options","placement","Link","bold","external","DesktopRow","rank","DesktopResults","results","Container","index","StyledMobileRow","card","cardBorder","MobileRow","MobileResults","RotatedLaurelLeftIcon","LaurelLeftIcon","RotatedLaurelRightIcon","LaurelRightIcon","RankingCard","rankColor","getRankingColor","ribbon","variantColor","ribbonPosition","Results","arr","useGetLeaderboardResults","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","first","second","third","rest","currentSkip","useGetLeaderboardSkip","hasMoreResults","useGetLeaderboardHasMoreResults","dispatch","useAppDispatch","endIcon","spin","filterNextPageLeaderboard","LEADERBOARD_RESULTS_PER_PAGE","ConnectedWalletResult","useWeb3React","accountResult","fetchProfileAvatar","fetchAddressResult","isActive","AddressSearch","setSelectedAddress","handleValidAddress","useCallback","payload","data","handleAddressClick","AddressInputSelect","onAddressClick","onValidAddress","SearchWrapper","FilterWrapper","Filters","orderByOptions","label","Select","onOptionChange","option","setLeaderboardFilter","Leaderboard","leaderboardLoadingState","filters","useGetLeaderboardFilters","filterLeaderboard","INITIAL","PageLoader","Page","useGetRounds","rounds","useSelector","state","predictions","Object","keys","reduce","accum","parseBigNumberObj","useGetSortedRounds","roundData","values","useGetBetByEpoch","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","minBy","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetHasHistoryLoaded","hasHistoryLoaded","useGetCurrentHistoryPage","currentHistoryPage","useGetMinBetAmount","minBetAmount","useMemo","ethers","BigNumber","from","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetLastOraclePrice","lastOraclePrice","useGetCurrentRoundLockTimestamp","currentRound","useGetCurrentRound","lockTimestamp","startTimestamp","leaderboard","loadingState","skip","addressResult","addressResults","useGetAddressResult","isAddress","ResultStatus","SubMenu","input","inputSecondary","radii","default","AddressLink","Text","initialState","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","setState","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","placeholder","subject","onChange","evt","newValue","target","zIndex","paddingRight","top","right"],"mappings":"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","file":"static/js/27.033b7e9a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Box, Breadcrumbs, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst Crumbs = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box mb=\"24px\">\r\n      <Breadcrumbs>\r\n        <Link to=\"/\">{t('Home')}</Link>\r\n        <Link to=\"/prediction\">{t('Prediction')}</Link>\r\n        <Text>{t('Leaderboard')}</Text>\r\n      </Breadcrumbs>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Crumbs\r\n","import React from 'react'\r\nimport { Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport PageHeader from 'components/PageHeader'\r\nimport Crumbs from './Crumbs'\r\n\r\nconst Hero = () => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <PageHeader>\r\n      <Crumbs />\r\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\r\n        {t('Leaderboard')}\r\n      </Heading>\r\n    </PageHeader>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import React from 'react'\r\nimport { Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\r\nimport { multiplyPriceByAmount } from 'utils/prices'\r\n\r\nexport const Row: React.FC<FlexProps> = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\ninterface NetWinningsProps extends FlexProps {\r\n  amount: number\r\n  textPrefix?: string\r\n  textColor?: string\r\n}\r\n\r\nexport const NetWinnings: React.FC<NetWinningsProps> = ({ amount, textPrefix = '', textColor = 'text', ...props }) => {\r\n  const bnbBusdPrice = useBNBBusdPrice()\r\n  const value = multiplyPriceByAmount(bnbBusdPrice, Math.abs(amount))\r\n\r\n  if (!amount) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\" alignItems=\"flex-end\" {...props}>\r\n      <Text fontWeight=\"bold\" color={textColor}>\r\n        {`${textPrefix}${amount.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 6 })}`}\r\n      </Text>\r\n      <Text fontSize=\"12px\" color=\"textSubtle\" lineHeight={1}>\r\n        {`~$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const NetWinningsRow: React.FC<{ amount: number }> = ({ amount }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row mb=\"4px\">\r\n      <Text fontSize=\"12px\" color=\"textSubtle\">\r\n        {t('Net Winnings (BNB)')}\r\n      </Text>\r\n      <NetWinnings amount={amount} textPrefix={amount > 0 ? '+' : ''} textColor={amount > 0 ? 'success' : 'failure'} />\r\n    </Row>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowDownIcon, ArrowUpIcon } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface PositionLabelProps {\r\n  position: BetPosition\r\n}\r\n\r\nconst StyledPositionLabel = styled.div<{ bgColor: string }>`\r\n  align-items: center;\r\n  background-color: ${({ theme, bgColor }) => theme.colors[bgColor]};\r\n  border-radius: 4px;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  height: 32px;\r\n  min-width: 16px;\r\n  padding-left: 8px;\r\n  padding-right: 8px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: #fff;\r\n  display: none;\r\n  text-transform: uppercase;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: block;\r\n    margin-left: 4px;\r\n  }\r\n`\r\n\r\nconst PositionLabel: React.FC<PositionLabelProps> = ({ position }) => {\r\n  const { t } = useTranslation()\r\n  const isBull = position === BetPosition.BULL\r\n  const bgColor = isBull ? 'success' : 'failure'\r\n  const icon = isBull ? <ArrowUpIcon width=\"24px\" color=\"white\" /> : <ArrowDownIcon width=\"24px\" color=\"white\" />\r\n\r\n  return (\r\n    <StyledPositionLabel bgColor={bgColor}>\r\n      {icon}\r\n      <Label>{isBull ? t('Up') : t('Down')}</Label>\r\n    </StyledPositionLabel>\r\n  )\r\n}\r\n\r\nexport default PositionLabel\r\n","import React, { useEffect, useState } from 'react'\r\nimport times from 'lodash/times'\r\nimport orderBy from 'lodash/orderBy'\r\nimport { Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\r\nimport { Bet } from 'state/types'\r\nimport PositionLabel from './PositionLabel'\r\nimport { NetWinnings } from './Results/styles'\r\n\r\ninterface PreviousBetsTableProps {\r\n  numberOfBets?: number\r\n  account: string\r\n}\r\n\r\nconst PreviousBetsTable: React.FC<PreviousBetsTableProps> = ({ numberOfBets = 5, account }) => {\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const [bets, setBets] = useState<Bet[]>([])\r\n  const { t } = useTranslation()\r\n  const orderedBets = orderBy(bets, ['round.epoch'], ['desc'])\r\n\r\n  useEffect(() => {\r\n    const fetchBetHistory = async () => {\r\n      setIsFetching(true)\r\n      try {\r\n        const response = await getBetHistory(\r\n          {\r\n            user: account.toLowerCase(),\r\n          },\r\n          numberOfBets,\r\n        )\r\n\r\n        setBets(response.map(transformBetResponse))\r\n      } finally {\r\n        setIsFetching(false)\r\n      }\r\n    }\r\n\r\n    fetchBetHistory()\r\n  }, [account, numberOfBets, setIsFetching, setBets])\r\n\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <Th>{t('Round')}</Th>\r\n          <Th>{t('Direction')}</Th>\r\n          <Th textAlign=\"right\">{t('Winnings (BNB)')}</Th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {isFetching\r\n          ? times(numberOfBets).map((num) => (\r\n              <tr key={num}>\r\n                <Td>\r\n                  <Skeleton width=\"80px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton width=\"60px\" height=\"32px\" />\r\n                </Td>\r\n                <Td>\r\n                  <Skeleton width=\"80px\" />\r\n                </Td>\r\n              </tr>\r\n            ))\r\n          : orderedBets.map((bet) => {\r\n              const isWinner = bet.position === bet.round.position\r\n\r\n              return (\r\n                <tr key={bet.id}>\r\n                  <Td textAlign=\"center\" fontWeight=\"bold\">\r\n                    {bet.round.epoch.toLocaleString()}\r\n                  </Td>\r\n                  <Td textAlign=\"center\">\r\n                    <PositionLabel position={bet.position} />\r\n                  </Td>\r\n                  <Td textAlign=\"right\">\r\n                    <NetWinnings\r\n                      amount={isWinner ? bet.claimedNetBNB : bet.amount}\r\n                      textPrefix={isWinner ? '+' : '-'}\r\n                      textColor={isWinner ? 'success' : 'failure'}\r\n                    />\r\n                  </Td>\r\n                </tr>\r\n              )\r\n            })}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default PreviousBetsTable\r\n","import React, { useState } from 'react'\r\nimport { Flex, Text, ChevronUpIcon, ChevronDownIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport PreviousBetsTable from './PreviousBetsTable'\r\n\r\ninterface MobileBetsTableProps {\r\n  account: string\r\n}\r\n\r\nconst MobileBetsTable: React.FC<MobileBetsTableProps> = ({ account }) => {\r\n  const { t } = useTranslation()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const handleToggle = () => setIsOpen(!isOpen)\r\n\r\n  return (\r\n    <>\r\n      <Flex\r\n        alignItems=\"center\"\r\n        justifyContent=\"space-between\"\r\n        px=\"24px\"\r\n        py=\"32px\"\r\n        borderBottom=\"1px solid\"\r\n        borderColor=\"cardBorder\"\r\n        style={{ cursor: 'pointer' }}\r\n        onClick={handleToggle}\r\n      >\r\n        <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\">\r\n          {t('Last %num% Bets', { num: 5 })}\r\n        </Text>\r\n        {isOpen ? <ChevronDownIcon /> : <ChevronUpIcon />}\r\n      </Flex>\r\n      {isOpen && <PreviousBetsTable account={account} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MobileBetsTable\r\n","import React from 'react'\r\nimport { Box, Card, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport PreviousBetsTable from '../PreviousBetsTable'\r\n\r\ninterface DesktopBetsTableProps {\r\n  account: string\r\n}\r\n\r\nconst DesktopBetsTable: React.FC<DesktopBetsTableProps> = ({ account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box p=\"24px\">\r\n      <Text as=\"h5\" color=\"secondary\" fontWeight=\"bold\" textTransform=\"uppercase\" fontSize=\"12px\" mb=\"16px\">\r\n        {t('Last %num% Bets', { num: 5 })}\r\n      </Text>\r\n      <Card>\r\n        <PreviousBetsTable account={account} />\r\n      </Card>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default DesktopBetsTable\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  CloseIcon,\r\n  Flex,\r\n  Grid,\r\n  Text,\r\n  IconButton,\r\n  InjectedModalProps,\r\n  LinkExternal,\r\n  ModalContainer,\r\n  ModalHeader,\r\n  ProfileAvatar,\r\n  useMatchBreakpoints,\r\n  Skeleton,\r\n  Heading,\r\n} from '@pancakeswap/uikit'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport useTheme from 'hooks/useTheme'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { LeaderboardLoadingState } from 'state/types'\r\nimport {\r\n  useGetOrFetchLeaderboardAddressResult,\r\n  useGetLeaderboardLoadingState,\r\n  useGetSelectedAddress,\r\n} from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NetWinnings } from './Results/styles'\r\nimport MobileBetsTable from './MobileBetsTable'\r\nimport DesktopBetsTable from './Results/DesktopBetsTable'\r\n\r\ninterface WalletStatsModalProps extends InjectedModalProps {\r\n  account?: string\r\n  onBeforeDismiss?: () => void\r\n}\r\n\r\nconst ExternalLink = styled(LinkExternal)`\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.text};\r\n  }\r\n`\r\n\r\nconst WalletStatsModal: React.FC<WalletStatsModalProps> = ({ account, onDismiss, onBeforeDismiss }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const selectedAddress = useGetSelectedAddress()\r\n  const address = account || selectedAddress\r\n  const result = useGetOrFetchLeaderboardAddressResult(address)\r\n  const profileAvatar = useGetProfileAvatar(address)\r\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\r\n  const isLoading = leaderboardLoadingState === LeaderboardLoadingState.LOADING\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  const handleDismiss = () => {\r\n    if (onBeforeDismiss) {\r\n      onBeforeDismiss()\r\n    }\r\n\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer minWidth=\"320px\">\r\n      <ModalHeader background={theme.colors.gradients.bubblegum}>\r\n        <Flex alignItems=\"center\" style={{ flex: 1 }}>\r\n          <Box width={['64px', null, null, null, null, null, '96px']} mr=\"16px\">\r\n            <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={96} width={96} />\r\n          </Box>\r\n          <Box>\r\n            {profileAvatar.username && (\r\n              <Heading scale=\"lg\" mb=\"8px\">\r\n                {profileAvatar.username}\r\n              </Heading>\r\n            )}\r\n            <ExternalLink href={getBscScanLink(address, 'address')}>{truncateHash(address)}</ExternalLink>\r\n          </Box>\r\n        </Flex>\r\n        <IconButton variant=\"text\" onClick={handleDismiss} aria-label=\"Close the dialog\">\r\n          <CloseIcon color=\"text\" width=\"24px\" />\r\n        </IconButton>\r\n      </ModalHeader>\r\n      {result === null ? (\r\n        <Text p=\"32px\" textAlign=\"center\" fontWeight=\"bold\">\r\n          {t('No results found.')}\r\n        </Text>\r\n      ) : (\r\n        <Box maxHeight={['500px', null, null, null, null, null, 'none']} overflowY=\"auto\">\r\n          <Grid\r\n            gridTemplateColumns={['1fr', null, null, null, null, null, 'repeat(4, 1fr)']}\r\n            gridGap=\"16px\"\r\n            p=\"24px\"\r\n            borderBottom=\"1px solid\"\r\n            borderColor=\"cardBorder\"\r\n          >\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Net Winnings')}\r\n              </Text>\r\n              {isLoading ? (\r\n                <Skeleton />\r\n              ) : (\r\n                <NetWinnings\r\n                  amount={result?.netBNB}\r\n                  textPrefix={result?.netBNB > 0 ? '+' : ''}\r\n                  textColor={result?.netBNB > 0 ? 'success' : 'failure'}\r\n                  alignItems=\"flex-end\"\r\n                />\r\n              )}\r\n            </Box>\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Win Rate')}\r\n              </Text>\r\n              {isLoading ? (\r\n                <Skeleton />\r\n              ) : (\r\n                <Text fontWeight=\"bold\">{`${result?.winRate?.toLocaleString(undefined, {\r\n                  minimumFractionDigits: 0,\r\n                  maximumFractionDigits: 2,\r\n                })}%`}</Text>\r\n              )}\r\n            </Box>\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Rounds Won')}\r\n              </Text>\r\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBetsClaimed?.toLocaleString()}</Text>}\r\n            </Box>\r\n            <Box>\r\n              <Text as=\"h6\" fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"8px\">\r\n                {t('Rounds Played')}\r\n              </Text>\r\n              {isLoading ? <Skeleton /> : <Text fontWeight=\"bold\">{result?.totalBets?.toLocaleString()}</Text>}\r\n            </Box>\r\n          </Grid>\r\n          {isDesktop ? <DesktopBetsTable account={address} /> : <MobileBetsTable account={address} />}\r\n        </Box>\r\n      )}\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default WalletStatsModal\r\n","import React from 'react'\r\nimport { Box, Flex, FlexProps, Link, ProfileAvatar, SubMenu, SubMenuItem, useModal, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport { PredictionUser } from 'state/types'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WalletStatsModal from '../WalletStatsModal'\r\n\r\ninterface ResultAvatarProps extends FlexProps {\r\n  user: PredictionUser\r\n}\r\n\r\nconst AvatarWrapper = styled(Box)`\r\n  order: 2;\r\n  margin-left: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n    margin-left: 0;\r\n    margin-right: 8px;\r\n  }\r\n`\r\n\r\nconst UsernameWrapper = styled(Box)`\r\n  order: 1;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n  }\r\n`\r\n\r\nconst ResultAvatar: React.FC<ResultAvatarProps> = ({ user, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const profileAvatar = useGetProfileAvatar(user.id)\r\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\r\n\r\n  return (\r\n    <SubMenu\r\n      component={\r\n        <Flex alignItems=\"center\" {...props}>\r\n          <UsernameWrapper>\r\n            <Text color=\"primary\" fontWeight=\"bold\">\r\n              {profileAvatar.username || truncateHash(user.id)}\r\n            </Text>{' '}\r\n          </UsernameWrapper>\r\n          <AvatarWrapper\r\n            width={['32px', null, null, null, null, '40px']}\r\n            height={['32px', null, null, null, null, '40px']}\r\n          >\r\n            <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={40} width={40} />\r\n          </AvatarWrapper>\r\n        </Flex>\r\n      }\r\n      options={{ placement: 'bottom-start' }}\r\n    >\r\n      <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\r\n      <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\r\n        {t('View on BscScan')}\r\n      </SubMenuItem>\r\n    </SubMenu>\r\n  )\r\n}\r\n\r\nexport default ResultAvatar\r\n","import React from 'react'\r\nimport { Td, Text } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport ResultAvatar from './ResultAvatar'\r\nimport { NetWinnings } from './styles'\r\n\r\ninterface DesktopRowProps {\r\n  rank?: number\r\n  user: PredictionUser\r\n}\r\n\r\nconst DesktopRow: React.FC<DesktopRowProps> = ({ rank, user, ...props }) => (\r\n  <tr {...props}>\r\n    {rank ? (\r\n      <Td>\r\n        <Text textAlign=\"center\" fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text>\r\n      </Td>\r\n    ) : (\r\n      <Td />\r\n    )}\r\n    <Td>\r\n      <ResultAvatar user={user} />\r\n    </Td>\r\n    <Td>\r\n      <NetWinnings\r\n        amount={user.netBNB}\r\n        textPrefix={user.netBNB > 0 ? '+' : ''}\r\n        textColor={user.netBNB > 0 ? 'success' : 'failure'}\r\n      />\r\n    </Td>\r\n    <Td textAlign=\"center\">\r\n      {`${user.winRate.toLocaleString(undefined, {\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 2,\r\n      })}%`}\r\n    </Td>\r\n    <Td textAlign=\"center\">\r\n      <strong>{user.totalBetsClaimed.toLocaleString()}</strong>\r\n    </Td>\r\n    <Td textAlign=\"center\">{user.totalBets.toLocaleString()}</Td>\r\n  </tr>\r\n)\r\n\r\nexport default DesktopRow\r\n","import React from 'react'\r\nimport { Card, Table, Th } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport Container from 'components/Layout/Container'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport DesktopRow from './DesktopRow'\r\n\r\ninterface DesktopResultsProps {\r\n  results: PredictionUser[]\r\n}\r\n\r\nconst DesktopResults: React.FC<DesktopResultsProps> = ({ results }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Container mb=\"24px\">\r\n      <Card>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              <Th width=\"60px\">&nbsp;</Th>\r\n              <Th textAlign=\"left\">{t('User')}</Th>\r\n              <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\r\n              <Th>{t('Win Rate')}</Th>\r\n              <Th>{t('Rounds Won')}</Th>\r\n              <Th>{t('Rounds Played')}</Th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {results.map((result, index) => (\r\n              <DesktopRow key={result.id} rank={index + 4} user={result} />\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </Card>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default DesktopResults\r\n","import React from 'react'\r\nimport { Box, Text } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NetWinningsRow, Row } from './styles'\r\nimport ResultAvatar from './ResultAvatar'\r\n\r\ninterface MobileRowProps {\r\n  rank?: number\r\n  user: PredictionUser\r\n}\r\n\r\nconst StyledMobileRow = styled(Box)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n\r\n  &:first-child {\r\n    border-top: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n  }\r\n`\r\n\r\nconst MobileRow: React.FC<MobileRowProps> = ({ rank, user }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledMobileRow p=\"16px\">\r\n      <Row mb=\"16px\">\r\n        {rank ? <Text fontWeight=\"bold\" color=\"secondary\">{`#${rank}`}</Text> : <div />}\r\n        <ResultAvatar user={user} />\r\n      </Row>\r\n      <Row mb=\"4px\">\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Win Rate')}\r\n        </Text>\r\n        <Text fontWeight=\"bold\">\r\n          {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\r\n        </Text>\r\n      </Row>\r\n      <NetWinningsRow amount={user.netBNB} />\r\n      <Row>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Rounds Won')}\r\n        </Text>\r\n        <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\r\n      </Row>\r\n    </StyledMobileRow>\r\n  )\r\n}\r\n\r\nexport default MobileRow\r\n","import React from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport MobileRow from './MobileRow'\r\n\r\ninterface MobileResultsProps {\r\n  results: PredictionUser[]\r\n}\r\n\r\nconst MobileResults: React.FC<MobileResultsProps> = ({ results }) => {\r\n  return (\r\n    <Box mb=\"24px\">\r\n      {results.map((result, index) => (\r\n        <MobileRow key={result.id} rank={index + 4} user={result} />\r\n      ))}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MobileResults\r\n","import React from 'react'\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardBody,\r\n  CardRibbon,\r\n  Flex,\r\n  ProfileAvatar,\r\n  LaurelLeftIcon,\r\n  LaurelRightIcon,\r\n  Link,\r\n  Text,\r\n  SubMenu,\r\n  SubMenuItem,\r\n  useModal,\r\n} from '@pancakeswap/uikit'\r\nimport { PredictionUser } from 'state/types'\r\nimport { useGetProfileAvatar } from 'state/profile/hooks'\r\nimport styled from 'styled-components'\r\nimport { getBscScanLink } from 'utils'\r\nimport truncateHash from 'utils/truncateHash'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport WalletStatsModal from '../WalletStatsModal'\r\nimport { NetWinningsRow, Row } from './styles'\r\n\r\ninterface RankingCardProps {\r\n  rank: 1 | 2 | 3\r\n  user: PredictionUser\r\n}\r\n\r\nconst RotatedLaurelLeftIcon = styled(LaurelLeftIcon)`\r\n  transform: rotate(30deg);\r\n`\r\n\r\nconst RotatedLaurelRightIcon = styled(LaurelRightIcon)`\r\n  transform: rotate(-30deg);\r\n`\r\n\r\nconst getRankingColor = (rank: number) => {\r\n  if (rank === 3) {\r\n    return 'bronze'\r\n  }\r\n\r\n  if (rank === 2) {\r\n    return 'silver'\r\n  }\r\n\r\n  return 'gold'\r\n}\r\n\r\nconst RankingCard: React.FC<RankingCardProps> = ({ rank, user }) => {\r\n  const { t } = useTranslation()\r\n  const rankColor = getRankingColor(rank)\r\n  const profileAvatar = useGetProfileAvatar(user.id)\r\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal account={user.id} />)\r\n\r\n  return (\r\n    <Card ribbon={<CardRibbon variantColor={rankColor} text={`#${rank}`} ribbonPosition=\"left\" />}>\r\n      <CardBody p=\"24px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\" mb=\"24px\">\r\n          <SubMenu\r\n            component={\r\n              <>\r\n                <Flex mb=\"4px\">\r\n                  <RotatedLaurelLeftIcon color={rankColor} width=\"32px\" />\r\n                  <Box width={['40px', null, null, '64px']} height={['40px', null, null, '64px']}>\r\n                    <ProfileAvatar src={profileAvatar.nft?.image?.thumbnail} height={64} width={64} />\r\n                  </Box>\r\n                  <RotatedLaurelRightIcon color={rankColor} width=\"32px\" />\r\n                </Flex>\r\n                <Text color=\"primary\" fontWeight=\"bold\" textAlign=\"center\">\r\n                  {profileAvatar.username || truncateHash(user.id)}\r\n                </Text>\r\n              </>\r\n            }\r\n            options={{ placement: 'bottom' }}\r\n          >\r\n            <SubMenuItem onClick={onPresentWalletStatsModal}>{t('View Stats')}</SubMenuItem>\r\n            <SubMenuItem as={Link} href={getBscScanLink(user.id, 'address')} bold={false} color=\"text\" external>\r\n              {t('View on BscScan')}\r\n            </SubMenuItem>\r\n          </SubMenu>\r\n        </Flex>\r\n        <Row mb=\"4px\">\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {t('Win Rate')}\r\n          </Text>\r\n          <Text fontWeight=\"bold\">\r\n            {`${user.winRate.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 2 })}%`}\r\n          </Text>\r\n        </Row>\r\n        <NetWinningsRow amount={user.netBNB} />\r\n        <Row>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {t('Rounds Won')}\r\n          </Text>\r\n          <Text fontWeight=\"bold\">{`${user.totalBetsClaimed.toLocaleString()}/${user.totalBets.toLocaleString()}`}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default RankingCard\r\n","import React from 'react'\r\nimport { Box, Button, Grid, Flex, useMatchBreakpoints, AutoRenewIcon } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetLeaderboardHasMoreResults,\r\n  useGetLeaderboardLoadingState,\r\n  useGetLeaderboardResults,\r\n  useGetLeaderboardSkip,\r\n} from 'state/predictions/hooks'\r\nimport { LeaderboardLoadingState } from 'state/types'\r\nimport { filterNextPageLeaderboard } from 'state/predictions'\r\nimport { LEADERBOARD_RESULTS_PER_PAGE } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Container from 'components/Layout/Container'\r\nimport DesktopResults from './DesktopResults'\r\nimport MobileResults from './MobileResults'\r\nimport RankingCard from './RankingCard'\r\n\r\nconst Results = () => {\r\n  const { isDesktop } = useMatchBreakpoints()\r\n  const { t } = useTranslation()\r\n  const [first, second, third, ...rest] = useGetLeaderboardResults()\r\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\r\n  const isLoading = leaderboardLoadingState === LeaderboardLoadingState.LOADING\r\n  const currentSkip = useGetLeaderboardSkip()\r\n  const hasMoreResults = useGetLeaderboardHasMoreResults()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleClick = () => {\r\n    dispatch(filterNextPageLeaderboard(currentSkip + LEADERBOARD_RESULTS_PER_PAGE))\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Container mb=\"16px\">\r\n        <Grid\r\n          gridGap={['16px', null, null, null, null, '24px']}\r\n          gridTemplateColumns={['1fr', null, null, null, null, 'repeat(3, 1fr)']}\r\n        >\r\n          <RankingCard rank={1} user={first} />\r\n          <RankingCard rank={2} user={second} />\r\n          <RankingCard rank={3} user={third} />\r\n        </Grid>\r\n      </Container>\r\n      {isDesktop ? <DesktopResults results={rest} /> : <MobileResults results={rest} />}\r\n      <Flex mb=\"40px\" justifyContent=\"center\">\r\n        {hasMoreResults && (\r\n          <Button\r\n            variant=\"secondary\"\r\n            isLoading={isLoading}\r\n            endIcon={isLoading ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\r\n            onClick={handleClick}\r\n          >\r\n            {isLoading ? t('Loading...') : t('View More')}\r\n          </Button>\r\n        )}\r\n      </Flex>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import React, { useEffect } from 'react'\r\nimport { Card, Heading, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport Container from 'components/Layout/Container'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchProfileAvatar } from 'state/profile'\r\nimport { fetchAddressResult } from 'state/predictions'\r\nimport { useGetOrFetchLeaderboardAddressResult } from 'state/predictions/hooks'\r\nimport DesktopRow from './DesktopRow'\r\nimport MobileRow from './MobileRow'\r\n\r\nconst ConnectedWalletResult = () => {\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const accountResult = useGetOrFetchLeaderboardAddressResult(account)\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchProfileAvatar(account))\r\n      dispatch(fetchAddressResult(account))\r\n    }\r\n  }, [account, dispatch])\r\n\r\n  if (!account || !accountResult) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container mb=\"48px\">\r\n      <Heading as=\"h2\" scale=\"md\" color=\"secondary\" mb=\"16px\">\r\n        {t('My Rankings')}\r\n      </Heading>\r\n      {isDesktop ? (\r\n        <Card isActive>\r\n          <Table>\r\n            <thead>\r\n              <tr>\r\n                <Th width=\"60px\">&nbsp;</Th>\r\n                <Th textAlign=\"left\">&nbsp;</Th>\r\n                <Th textAlign=\"right\">{t('Net Winnings (BNB)')}</Th>\r\n                <Th textAlign=\"center\">{t('Win Rate')}</Th>\r\n                <Th>{t('Rounds Won')}</Th>\r\n                <Th>{t('Rounds Played')}</Th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <DesktopRow user={accountResult} />\r\n            </tbody>\r\n          </Table>\r\n        </Card>\r\n      ) : (\r\n        <Card isActive>\r\n          <MobileRow user={accountResult} />\r\n        </Card>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ConnectedWalletResult\r\n","import React, { useCallback } from 'react'\r\nimport { useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchAddressResult, setSelectedAddress } from 'state/predictions'\r\nimport AddressInputSelect from 'components/AddressInputSelect'\r\nimport WalletStatsModal from './WalletStatsModal'\r\n\r\nconst AddressSearch = () => {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleBeforeDismiss = () => {\r\n    dispatch(setSelectedAddress(null))\r\n  }\r\n\r\n  const [onPresentWalletStatsModal] = useModal(<WalletStatsModal onBeforeDismiss={handleBeforeDismiss} />)\r\n  const handleValidAddress = useCallback(\r\n    async (value: string) => {\r\n      const response: any = await dispatch(fetchAddressResult(value))\r\n      return response.payload?.data !== undefined\r\n    },\r\n    [dispatch],\r\n  )\r\n\r\n  const handleAddressClick = async (value: string) => {\r\n    await dispatch(setSelectedAddress(value))\r\n    onPresentWalletStatsModal()\r\n  }\r\n\r\n  return <AddressInputSelect onAddressClick={handleAddressClick} onValidAddress={handleValidAddress} />\r\n}\r\n\r\nexport default AddressSearch\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLeaderboardFilter } from 'state/predictions'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Container from 'components/Layout/Container'\r\nimport AddressSearch from '../AddressSearch'\r\n\r\nconst SearchWrapper = styled(Box)`\r\n  margin-bottom: 8px;\r\n  order: 1;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-bottom: 0;\r\n    order: 2;\r\n    width: 320px;\r\n  }\r\n`\r\nconst FilterWrapper = styled(Box)`\r\n  order: 2;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst Filters = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const orderByOptions = [\r\n    { label: t('Net Winnings'), value: 'netBNB' },\r\n    { label: t('Total BNB'), value: 'totalBNB' },\r\n    { label: t('Rounds Played'), value: 'totalBets' },\r\n    { label: t('Win Rate'), value: 'winRate' },\r\n  ]\r\n\r\n  const handleOrderBy = (option: OptionProps) => {\r\n    dispatch(setLeaderboardFilter({ orderBy: option.value }))\r\n  }\r\n\r\n  return (\r\n    <Container py=\"32px\">\r\n      <Text textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" fontWeight=\"bold\" mb=\"4px\">\r\n        {t('Rank By')}\r\n      </Text>\r\n      <Flex\r\n        flexDirection={['column', null, null, null, null, 'row']}\r\n        alignItems={['start', null, null, null, null, 'center']}\r\n        justifyContent={['start', null, null, null, null, 'space-between']}\r\n      >\r\n        <FilterWrapper>\r\n          <Select options={orderByOptions} onOptionChange={handleOrderBy} />\r\n        </FilterWrapper>\r\n        <SearchWrapper>\r\n          <AddressSearch />\r\n        </SearchWrapper>\r\n      </Flex>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Filters\r\n","import React, { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetLeaderboardFilters, useGetLeaderboardLoadingState } from 'state/predictions/hooks'\r\nimport { LeaderboardLoadingState } from 'state/types'\r\nimport { filterLeaderboard } from 'state/predictions'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport { PageMeta } from 'components/Layout/Page'\r\nimport Hero from './components/Hero'\r\nimport Results from './components/Results'\r\nimport ConnectedWalletResult from './components/Results/ConnectedWalletResult'\r\nimport Filters from './components/Filters'\r\n\r\nconst Leaderboard = () => {\r\n  const leaderboardLoadingState = useGetLeaderboardLoadingState()\r\n  const filters = useGetLeaderboardFilters()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(filterLeaderboard({ filters }))\r\n  }, [account, filters, dispatch])\r\n\r\n  if (leaderboardLoadingState === LeaderboardLoadingState.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageMeta />\r\n      <Hero />\r\n      <Filters />\r\n      <ConnectedWalletResult />\r\n      <Results />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Leaderboard\r\n","import { useEffect, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { isAddress } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\r\nimport { parseBigNumberObj } from './helpers'\r\nimport { fetchAddressResult } from '.'\r\n\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.intervalSeconds)\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetRounds()\r\n  return rounds[currentEpoch]\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetHasHistoryLoaded = () => {\r\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\r\n}\r\n\r\nexport const useGetCurrentHistoryPage = () => {\r\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetBufferSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.bufferSeconds)\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n/**\r\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\r\n */\r\nexport const useGetCurrentRoundLockTimestamp = () => {\r\n  const currentRound = useGetCurrentRound()\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n\r\n  if (!currentRound.lockTimestamp) {\r\n    return currentRound.startTimestamp + intervalSeconds\r\n  }\r\n\r\n  return currentRound.lockTimestamp\r\n}\r\n\r\n// Leaderboard\r\nexport const useGetLeaderboardLoadingState = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\r\n}\r\n\r\nexport const useGetLeaderboardResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.results)\r\n}\r\n\r\nexport const useGetLeaderboardFilters = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\r\n}\r\n\r\nexport const useGetLeaderboardSkip = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\r\n}\r\n\r\nexport const useGetLeaderboardHasMoreResults = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\r\n}\r\n\r\nexport const useGetAddressResult = (account: string) => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\r\n}\r\n\r\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\r\n  const addressResult = useGetAddressResult(account)\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    const address = isAddress(account)\r\n\r\n    // If address result is null it means we already tried fetching the results and none came back\r\n    if (!addressResult && addressResult !== null && address) {\r\n      dispatch(fetchAddressResult(account))\r\n    }\r\n  }, [dispatch, account, addressResult])\r\n\r\n  return addressResult\r\n}\r\n\r\nexport const useGetSelectedAddress = () => {\r\n  return useSelector((state: State) => state.predictions.leaderboard.selectedAddress)\r\n}\r\n","import React, { ChangeEvent, useState, useEffect } from 'react'\r\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { isAddress } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CircleLoader from 'components/Loader/CircleLoader'\r\n\r\nenum ResultStatus {\r\n  NOT_VALID,\r\n  FOUND,\r\n  NOT_FOUND,\r\n}\r\n\r\ninterface AddressInputSelectProps extends BoxProps {\r\n  onValidAddress?: (value: string) => Promise<boolean>\r\n  onAddressClick: (value: string) => void\r\n}\r\n\r\nconst SubMenu = styled.div<{ isOpen: boolean }>`\r\n  align-items: center;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\r\n  left: 0;\r\n  padding-bottom: 8px;\r\n  padding-top: 16px;\r\n  position: absolute;\r\n  top: calc(100% - 12px);\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  width: 100%;\r\n  z-index: 15;\r\n\r\n  ${({ isOpen }) =>\r\n    isOpen &&\r\n    `\r\n    height: auto;\r\n    opacity: 1;\r\n    transform: scaleY(1);\r\n  `}\r\n`\r\n\r\nconst AddressLink = styled(Text)`\r\n  cursor: pointer;\r\n  overflow-wrap: break-word;\r\n  font-weight: bold;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n`\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  resultFound: ResultStatus.NOT_VALID,\r\n  value: '',\r\n}\r\n\r\nconst defaultValidAddressHandler = () => Promise.resolve(true)\r\n\r\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\r\n  onValidAddress = defaultValidAddressHandler,\r\n  onAddressClick,\r\n  ...props\r\n}) => {\r\n  const [state, setState] = useState(initialState)\r\n  const { t } = useTranslation()\r\n  const { isFetching, resultFound, value } = state\r\n\r\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\r\n    const { value: newValue } = evt.target\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      value: newValue,\r\n    }))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setState(initialState)\r\n    onAddressClick(state.value)\r\n  }\r\n\r\n  // When we have a valid address fetch the data\r\n  useEffect(() => {\r\n    const isValidAddress = isAddress(value) !== false\r\n\r\n    const validAddressHandler = async () => {\r\n      try {\r\n        setState((prevState) => ({ ...prevState, isFetching: true }))\r\n        const hasResults = await onValidAddress(value)\r\n\r\n        setState((prevState) => ({\r\n          ...prevState,\r\n          isFetching: false,\r\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\r\n        }))\r\n      } catch {\r\n        setState((prevState) => ({ ...prevState, isFetching: false }))\r\n      }\r\n    }\r\n\r\n    if (isValidAddress) {\r\n      validAddressHandler()\r\n    } else {\r\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\r\n    }\r\n  }, [value, onValidAddress, setState])\r\n\r\n  return (\r\n    <Box position=\"relative\" {...props}>\r\n      <Input\r\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\r\n        value={state.value}\r\n        onChange={handleChange}\r\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\r\n      />\r\n      {isFetching && (\r\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\r\n          <CircleLoader />\r\n        </Box>\r\n      )}\r\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\r\n        {resultFound === ResultStatus.FOUND ? (\r\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\r\n        ) : (\r\n          <Text px=\"16px\" fontWeight=\"bold\">\r\n            {t('No results found.')}\r\n          </Text>\r\n        )}\r\n      </SubMenu>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddressInputSelect\r\n"],"sourceRoot":""}